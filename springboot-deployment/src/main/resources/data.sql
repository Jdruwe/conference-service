INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room8', 694, 'Room 8', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room5', 649, 'Room 5', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('ExhibitionHall', 2000, 'Exhibition Hall', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room3', 309, 'Room 3', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room9', 398, 'Room 9', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('BOF2', 70, 'BOF 2', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room6', 370, 'Room 6', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room10', 282, 'Room 10', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room7', 369, 'Room 7', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('BOF1', 70, 'BOF 1', 'classroom', null, null);
INSERT INTO PUBLIC.ROOM (ID, CAPACITY, NAME, SETUP, ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE) VALUES ('Room4', 348, 'Room 4', 'classroom', null, null);INSERT INTO PUBLIC.SCHEDULE (DATE, DAY) VALUES ('2018-11-12', 0);
INSERT INTO PUBLIC.SCHEDULE (DATE, DAY) VALUES ('2018-11-13', 1);
INSERT INTO PUBLIC.SCHEDULE (DATE, DAY) VALUES ('2018-11-14', 2);
INSERT INTO PUBLIC.SCHEDULE (DATE, DAY) VALUES ('2018-11-15', 3);
INSERT INTO PUBLIC.SCHEDULE (DATE, DAY) VALUES ('2018-11-16', 4);INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145629-1498252496', 'Room8', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456299257604', 'Room8', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145629-1731468034', 'Room8', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456291764484823', 'Room8', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456291406005538', 'Room8', '2018-11-16');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145626-1498252496', 'Room5', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456269257604', 'Room5', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145626-1731468034', 'Room5', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456261764484823', 'Room5', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456261406005538', 'Room5', '2018-11-16');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2--1133865272-1498252496', 'ExhibitionHall', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2--11338652729257604', 'ExhibitionHall', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2--1133865272-1731468034', 'ExhibitionHall', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2--11338652721764484823', 'ExhibitionHall', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2--11338652721406005538', 'ExhibitionHall', '2018-11-16');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145624-1731468034', 'Room3', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456241764484823', 'Room3', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145630-1498252496', 'Room9', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456309257604', 'Room9', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145630-1731468034', 'Room9', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456301764484823', 'Room9', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456301406005538', 'Room9', '2018-11-16');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-2044345-1498252496', 'BOF2', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-20443459257604', 'BOF2', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-2044345-1731468034', 'BOF2', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-20443451764484823', 'BOF2', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145627-1498252496', 'Room6', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456279257604', 'Room6', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145627-1731468034', 'Room6', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456271764484823', 'Room6', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456271406005538', 'Room6', '2018-11-16');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2--1841452966-1731468034', 'Room10', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2--18414529661764484823', 'Room10', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145628-1731468034', 'Room7', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456281764484823', 'Room7', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-2044344-1498252496', 'BOF1', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-20443449257604', 'BOF1', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-2044344-1731468034', 'BOF1', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-20443441764484823', 'BOF1', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-20443441406005538', 'BOF1', '2018-11-16');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145625-1498252496', 'Room4', '2018-11-12');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456259257604', 'Room4', '2018-11-13');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-79145625-1731468034', 'Room4', '2018-11-14');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456251764484823', 'Room4', '2018-11-15');
INSERT INTO PUBLIC.ROOM_SCHEDULE (ETAG, ROOM_ID, SCHEDULE_DATE) VALUES ('v2-791456251406005538', 'Room4', '2018-11-16');INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e14ef4212ffd330e97f9a0ff3420fc27714d4b0d', 'https://lh6.googleusercontent.com/-f2MnMLouFlA/AAAAAAAAAAI/AAAAAAAAMHE/CVS84gQlfu8/photo.jpg', '-1353053867', 'Jos√©', 'Paumard', '@JosePaumard');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('a733dc53923e5acd86780590978c563ce1e2582e', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/StuartMarks.jpg', '226687170', 'Stuart', 'Marks', '@stuartmarks');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('af8a385bb3e6caef5337c94d51e0999994e120e5', 'https://pbs.twimg.com/profile_images/950807350952181760/5pkYiJ8d_400x400.jpg', '-1756704381', 'Venkat', 'Subramaniam', '@venkat_s');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ff0eb37df830d5236a41d278f7d71c98461d775f', 'http://www.gravatar.com/avatar/629fdde67cb23f9d3799635d89c7b250', '1142501949', 'Grzegorz', 'Piwowarek', '@pivovarit');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8551616e8ea37d9a0c962b022afc9f6b377790f6', 'https://www.gravatar.com/avatar/dcccd96c499963133f7f95e7ffa20c4e', '558014462', 'Dan', 'Allen', '@mojavelinux');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5d72df99a9534dc88b752508970034f37b476ade', 'https://owncloud.senacor.com/index.php/apps/files_sharing/ajax/publicpreview.php?x=3360&y=1206&a=true&file=Alasdair%2520Collinson%2520face.png&t=O78wR8Mz323m4MA&scalingup=0', '1671664863', 'Alasdair', 'Collinson', '@blalasaadri');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7c3e49bf489644eeefdd3d85100b474c28c41086', 'http://www.gravatar.com/avatar/cf0c4a6be78057e020082a8550a8df43', '-2096912199', 'Oliver', 'Gierke', '@olivergierke');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8107d6242333f09d50f5cabe954fa611c2215c31', 'http://www.gravatar.com/avatar/bc0dcca4d3d893e5a20773dfa5a23d95', '-938639111', 'Mike', 'Thompson', '@barecode');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ac63ccacfadd16102fe70327a20e2faa6933bca6', 'https://lh6.googleusercontent.com/-xQRx_Bv6WyI/AAAAAAAAAAI/AAAAAAAAAMw/AHLHm3Yb15M/photo.jpg', '-1135621395', 'Graham', 'Charters', '@gcharters');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('813877751b36813246ddf5336298adb8047ead5d', 'https://rmoff.net/content/images/2018/05/robin-moffatt-600px.jpg', '346194227', 'Robin', 'Moffatt', '@rmoff');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f325eea5554d5773dbcb919b9e59b551571910be', 'https://www.gravatar.com/avatar/610f3914d9b392b389657823719f09dd', '-1934022635', 'Julien', 'Top√ßu', '@JulienTopcu');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('05b9d537f1895a60adc4dbc25b6af2d1ef458854', 'https://lh3.googleusercontent.com/-j9_eSHtCsqA/AAAAAAAAAAI/AAAAAAAAJRY/5Zw5yZvAzT4/s640-il/photo.jpg', '-2050428794', 'Stephan', 'Janssen', '@stephan007');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('bd2f55b11bacf7aa2791921b48dd589c3567bc81', 'https://pbs.twimg.com/profile_images/1012167014612267010/tpIWebKt_400x400.jpg', '-302922681', 'Mark', 'Reinhold', '@mreinhold');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f004137d03b2687edb58d424b9ee99e2b14dbe56', 'https://www.gravatar.com/avatar/13eee0ac5d38daea3d6ca6aa6efea5b3', '-705049449', 'Nicolai', 'Parlog', '@nipafx');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('fd71b90351915730a22a0e5a1e48f1618ad2ff3d', 'https://pbs.twimg.com/profile_images/818349489408901120/NRrP-Hak_400x400.jpg', '-924891266', 'Mike', 'Francois', '@mike_francois');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1456a8892fff6e3a1313500064598e2e55e9107c', 'http://www.gravatar.com/avatar/e6c942c0f8e6042fbd47fcd3c4113b90', '-1533504389', 'Adrian', 'Hornsby', '@adhorn');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('683566fa384c408462fd6d187a442889ecddccd5', 'https://www.gravatar.com/avatar/ba9686d8c567aabedc1b7f8b6a7fb3d6', '50158345', 'Juergen', 'Hoeller', '@springjuergen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('21656e1a64ca2d0f0f05cc513442258bc8564d3b', 'https://lh6.googleusercontent.com/-gon2JtIuiqI/AAAAAAAAAAI/AAAAAAAAmu8/ejVmjY9FgKY/photo.jpg', '-385124276', 'Arun', 'Gupta', '@arungupta');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ff24d00a2dc5b5dd2700c009eb2aa82587667101', 'https://www.gravatar.com/avatar/abf2c321be67e74e86c3b83e871593f0', '1691812165', 'Joe', 'Kutner', '@codefinger');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('202cc3276e3b7e3918623609feeef4d25d79a3ec', 'https://www.gravatar.com/avatar/54ef231a31560fa88933fcc80edfb718', '1115272736', 'Sander', 'Mak', '@Sander_Mak');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('dc8c4ba353342825dca80416b1e9176f24c7898c', 'https://www.gravatar.com/avatar/d118c6b78e6310ee50a8be537773e017', '-1095543545', 'Richard', 'Wellum', '@RichardW1001');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2915ce1f84a7b90a7eec6fdf5cb209ccad724e48', 'https://www.gravatar.com/avatar/8d95c25e83ff957c2162015f32eeb887', '-411478965', 'Tom', 'Wetjens', '@tomwetjens');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('518923203253fdad79de57c07b162f72338b6397', 'http://www.gravatar.com/avatar/394797f95420c4da4c84379f0d0b11c9', '1867190042', 'Mark', 'Heckler', '@mkheck');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d7fcff19b53bb354133bdc88eb77b720b39a5cbf', 'https://pbs.twimg.com/profile_images/594447174559092737/XAH_VlsG_400x400.jpg', '-806803006', 'Paulien', 'van Alst', '@PaulienVanAlst');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6abf170c2f14b452300d5b52df6818afcb6fcccf', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/JamesBirnie.jpg', '-99777167', 'James', 'Birnie', '@RunningChairJB');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('a8a78c50598038f7e98f0361822304bc7c858746', 'https://lh3.googleusercontent.com/-3nFkOwGrmC0/AAAAAAAAAAI/AAAAAAAABio/AJRvo84IIk8/photo.jpg', '1647416899', 'Miro', 'Cupak', '@mirocupak');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6def69d07b56e2667ec3d3c296fbd35014e10841', 'https://d3s75c3xtnyqxt.cloudfront.net/sites/default/files/styles/img-single-track/public/10094934084_2006994711.jpg', '-330290260', 'Brian', 'Goetz', '@BrianGoetz');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('911e2062352e61b9d4913c1b84540b698c014d24', 'https://lh3.googleusercontent.com/-6LIVpToyQp8/AAAAAAAAAAI/AAAAAAAAMJU/NU9zLEdWMeQ/photo.jpg', '-783867054', 'Victor', 'Rentea', '@victorrentea');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('70a37b119941970358f02ee9a30a18587550ff38', 'http://burrsutter.com/wp-content/uploads/2016/12/2016_BS_Headshot_400x400_SDMbkgrnd_mosaic.png', '962726444', 'Burr', 'Sutter', '@burrsutter');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('326f957b5bf291676606231592f9b91701075d89', 'https://pbs.twimg.com/profile_images/520392325818621952/EpPGuHIY_400x400.jpeg', '-1197968801', 'Ray', 'Tsang', '@saturnism');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('55e2fb75fa1fd0270646a491cded06957368bb9f', 'http://www.gravatar.com/avatar/917fa776e40325e488d52571546353a5', '-32900041', 'Eric', 'Bottard', '@ebottard');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('3ec19fb70764bdafcd26de67c65b633be189cda5', 'https://www.gravatar.com/avatar/97cac4c3979317d0b854d03504790d3f', '-1157125777', 'Rafa√´la', 'Breed', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1421cdc6da2d62b6476748ede71009cfaec49bcf', 'https://pbs.twimg.com/profile_images/910521107161210881/rEBx2R6y.jpg', '-1684794634', 'Alvaro', 'Sanchez-Mariscal', '@alvaro_sanchez');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ebc71affcab6b0cd8096485dcc252d04ee9b237e', 'https://lh6.googleusercontent.com/-HBRQvDEcopw/AAAAAAAAAAI/AAAAAAAAAFA/VKu5fglX3OE/photo.jpg', '1581075838', 'Ryan', 'Cuprak', '@ctjava');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ce0e7c7bc221e512ab776802963ddea755f2d557', 'https://lh3.googleusercontent.com/-0UoQsbTLIA4/AAAAAAAAAAI/AAAAAAAAAZc/yQh0S5AnfYc/photo.jpg', '192269346', 'Joe', 'Grandja', '@joe_grandja');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('14607f603130b340dddb453269fa5dbf4cb6761d', 'https://media.licdn.com/dms/image/C4E03AQGz7fRjOMbZCg/profile-displayphoto-shrink_100_100/0?e=1544054400&v=beta&t=2KSXh3IVkrC1SrGuL4vYq3sNqS3NHYQsq6iDQc54HvA', '1041469237', 'Adib', 'Saikali', '@asaikali');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b6b49f4fb582f67512ac2f8aa540549c4845f843', 'https://avatars2.githubusercontent.com/u/1107223?s=400&u=1e1996bece4acee5bbc760a346ce2ba1e8bd2a12&v=4', '-2097456195', 'Deepu', 'K Sasidharan', '@deepu105');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d1054b975ea621acd5b3c5e38f35ba94a9cf720f', 'http://www.gravatar.com/avatar/d035aeb839495240c58bbb03992ceda8', '756631760', 'Robert', 'Scholte', '@rfscholte');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c36efd6e34dbfa7e4af7869ec4132248215cb717', 'https://pbs.twimg.com/profile_images/921679843456057345/qVYptejF_400x400.jpg', '1957428014', 'Adnan', 'Isajbegovic', '@NTManiac');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('774d0f25362836375298c3a64a95f79195b203b7', 'https://www.gravatar.com/avatar/7053dc287dfcae489c9743e93ed87aac', '-1604167467', 'Ruben', 'Oostinga', '@RubenOostinga');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('3f32ed33ec789dde464df47ea47240156e4d776d', 'http://www.gravatar.com/avatar/8961b6245a03235ad444f8a11a6df359', '-231274613', 'Matthieu', 'Brouillard', '@alightinthefog');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e0dfdaf80ce2454c3aec8a22cb16cae3f5b8a69c', 'https://lh5.googleusercontent.com/-p8tWs3uTBXg/AAAAAAAAAAI/AAAAAAAAPdw/uheTL6YfPNo/photo.jpg', '-1173884673', 'Trisha', 'Gee', '@trisha_gee');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b32e73d3b070f325d520e8908113abf600da0e0a', 'https://avatars1.githubusercontent.com/u/10999780?s=460&v=4', '-810215603', 'Emily', 'Jiang', '@emilyfhjiang');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('90dd44bf81ebbf9f6181c7aab796f90f63738ff7', 'http://www.gravatar.com/avatar/fda55ee5c0da54ac713140223db94bb8', '-1669259525', 'Maxim', 'Novak', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5b4010d412ffa7885671b06b60ff3e2c2aeb1022', 'https://lh3.googleusercontent.com/-bF-0LvPUDqU/AAAAAAAAAAI/AAAAAAAAAbU/Zu2Fo5TdGVA/photo.jpg', '1704359507', 'Mario', 'Fusco', '@mariofusco');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('82be2dce61bcf52698dc682c175e2d9f63bf19df', 'https://avatars2.githubusercontent.com/u/7349662?s=460&v=4', '23864874', 'Bowie', 'Brotosumpeno', '@bosangjay');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('13eb124313d5f0750ea53e7882cb76e8d9925549', 'https://lh5.googleusercontent.com/-1zVQ4E5O2N0/AAAAAAAAAAI/AAAAAAAABMI/IU2cABJiPlo/photo.jpg', '-840705630', 'Fran√ßois', 'Gengler', '@genglefr');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d04310f1a0277d2e0b129390c42dbd09174a2adf', 'https://lh3.googleusercontent.com/-VtewSISxeKI/AAAAAAAAAAI/AAAAAAAAFlM/XcRA5w-GQNY/photo.jpg', '-299915701', 'Mykyta', 'Protsenko', '@mykyta_p');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1207f8e3d7f5b1acdfeedcf73a6389d3f7b79230', 'https://i.imgur.com/OZVjPr7.jpg', '1855404683', 'Alex', 'Borysov', '@aiborisov');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('a5a5bae3854780fe1e053247e59535f5f8ce9f28', 'https://lh6.googleusercontent.com/-rZiyyQVjAKo/AAAAAAAAAAI/AAAAAAAAABw/K068h_nkAK8/photo.jpg', '1202044819', 'Amir', 'Rustamzadeh', '@amirrustam');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9997ff47b162dcb9b5c582a5a1798571b0dccdab', 'https://bretmcg.com/bret-mcgowen.jpg', '1031993637', 'Bret', 'McGowen', '@BretMcG');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9cb2d39df72abda0f73bed7ae7f8b117e18acd66', 'https://avatars0.githubusercontent.com/u/292282?s=460&v=4', '-1829085623', 'David', 'Schmitz', '@koenighotze');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('14140d38392a8d13e9a6b956b3854c9fca117eb3', 'https://www.gravatar.com/avatar/621666a5b875bb78781c9cdc0baaca9c', '-847897099', 'Henri', 'Binsztok', '@henri_opa');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b1852252dc6c0770967861a5f00482bc4e5d2444', 'https://lh5.googleusercontent.com/-ofSxPhBah90/AAAAAAAAAAI/AAAAAAAAASU/0mwgDuBM5bY/photo.jpg', '-2070413186', 'Jason', 'Yee', '@gitbisect');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('51bea6ea1f0db004b7ecebf43745df84424cac32', 'http://blog.xebia.fr/images/devoxxuk-2014-logo.png', '622477648', 'Erik', '√ñsterlund', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('82f7c66113c7ce4158be622212bfa2c6bff1ff83', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/BenWilcock.jpg', '-1261870111', 'Ben', 'Wilcock', '@benbravo73');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2796e347c7b1b17fe7fe16e514660f689e5cb355', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/StevenvanBeelen.jpg', '1070080048', 'Steven', 'van Beelen', '@smcvbeelen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b392d0c94120fffc0b9d3097f70a7e6b4414ddee', 'http://www.gravatar.com/avatar/01d81296f03047d723fd47501681e549', '1418625724', 'Dieter', 'Hubau', '@dhubau');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('a2907b567a0c6c152e166ac206dd80db2b6d6358', 'https://www.gravatar.com/avatar/4b0aedbeed1cde602e6b8efda786fa4b', '317476910', 'Piet', 'van Dongen', '@pietvandongen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b90caa7c0917b501fda69e26c1e9291b1eb74c00', 'https://pbs.twimg.com/profile_images/2642704545/a77c0524766c6f3b4be4929f2005e627_400x400.png', '-170749665', 'Matti', 'Tahvonen', '@mattitahvonen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('fe2be7434f576503529de8d7bee94babefa4cf4f', 'https://lh4.googleusercontent.com/-IfN_dcqfjII/AAAAAAAAAAI/AAAAAAAAAVk/nRGHW37hVgE/photo.jpg', '1101720807', 'Leif', '√Östrand', '@leifastrand');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('bc8dc9b68fa3a1b307f3c390bb901e6a039bf9cc', 'https://lh3.googleusercontent.com/-3sUzAaUN01o/AAAAAAAAAAI/AAAAAAAACzE/6Nekr6L7RSk/photo.jpg', '-1900810056', 'Christophe', 'Jollivet', '@jollivetc');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('a02192acb0341950ed3c5d275761fb0e3229eee9', 'https://lh4.googleusercontent.com/-rcg2VixcAOI/AAAAAAAAAAI/AAAAAAAAAU0/ok41TDTqyeY/photo.jpg', '1408041681', 'S√©bastien', 'Laporte', '@seb__laporte');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1c1de8212af21979420f98df30a48b5e2749d9d5', 'http://bit.ly/headshot-netomarin', '-1219578720', 'Antonio', 'Marin Neto', '@netomarin');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1a3f188524b0769c71f53c073d27e19ca2ac8872', 'https://pbs.twimg.com/profile_images/651444930884186112/9vlhNFlu_400x400.png', '1547267616', 'Andrew', 'Brogdon', '@RedBrogdon');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('68b1cd23753859fa55674518f39c85ed44b75174', 'https://www.gravatar.com/avatar/ac1de725fe783f91b1fbff542ff6bb7e', '1065319319', 'Matt', 'Sullivan', '@mjohnsullivan');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8992d6c39bd902f947b65ea0fdfdaf106fa5835a', 'https://pbs.twimg.com/profile_images/725303614479147008/V38I57lN_400x400.jpg', '-447689058', 'Krzysztof', 'Kudrynski', '@kriskudrynski');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('80262325062fa7c266f32af05720abe1c072a5b3', 'https://media.licdn.com/dms/image/C4E03AQFIGLP-a7rNnQ/profile-displayphoto-shrink_800_800/0?e=1547683200&v=beta&t=bfJdPce-mnrVoQ1NBYhuP4NHAclQgHKTL2MtKjI8mKA', '-1476705141', 'B≈Ça≈ºej', 'Kubiak', '@blazkubiak');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c45aad1db09e2a310a9337c65883b8961283c0d3', 'http://www.gravatar.com/avatar/9999629551902f546d4817c9840bb9f6', '400476328', 'David', 'Delabassee', '@delabassee');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f780ca8757debe408df46e2a0d4431254dd4bc06', 'https://lh3.googleusercontent.com/-WjCY_pA1aRU/AAAAAAAAAAI/AAAAAAAACrw/ZZJMbXeW0lg/photo.jpg', '-986321886', 'Koffi Alain', 'Sessi', '@aksessi');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e2cc91133c04dfc7b519afc0a12059120b8eaeb1', 'https://lh6.googleusercontent.com/-fsIyqAsGR7A/AAAAAAAAAAI/AAAAAAAAHF8/53CNE4iUs5s/photo.jpg', '-2019473509', 'Heather', 'VanCura', '@heathervc');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9d249681193d71fab73c83dd2f9b6563a01ac581', 'https://lh4.googleusercontent.com/-K8eCVkIweKw/AAAAAAAAAAI/AAAAAAAAt_M/EpYzyr01xmw/photo.jpg', '554785929', 'Nishant', 'Srivastava', '@nisrulz');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d90442ecc8e0a932cd877f77c489da4c29236848', 'https://pbs.twimg.com/profile_images/777926456890494976/k1B2ahJ2_400x400.jpg', '-1742941654', 'Ga√´l', 'Blondelle', '@gblondelle');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9041552b955554c4fe4907f127e164d9395af163', 'https://www.gradlesummit.com/s/images/bio/53370_Champeau_20120713_165101_medium_sq.jpg', '1079373379', 'C√©dric', 'Champeau', '@CedricChampeau');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7600b5b536b12c53214ccccdb9ddc970af51aa36', 'https://dvbe18.confinabox.com/profilePicture/7600b5b536b12c53214ccccdb9ddc970af51aa36', '1694742528', 'Robyn', 'Larsen', '@robyn_larsen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('82766acbc75e36c51b6151eac21e4ae0e7059f8c', 'https://lh5.googleusercontent.com/-P4xRAGKGrYk/AAAAAAAAAAI/AAAAAAAAFKc/8sMXG3Vi-t4/photo.jpg', '807045700', 'Louis', 'Jacomet', '@ljacomet');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('bce4acb236bd432f576479f6e6d2494c0bdd6e65', 'https://lh3.googleusercontent.com/-EoxHUs94v8I/AAAAAAAAAAI/AAAAAAAACIA/T65I6REOk4I/photo.jpg', '-1525695372', 'Romeo', 'Kienzler', '@romeokienzler');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6211aeda51006fb257c51b607c01155edfbccadf', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/PierrePaci.jpeg', '1270362675', 'Pierre', 'Paci', '@pierre_paci');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2d5f0f508ec84fc3921c7f15a7c54a39f4f87b62', 'http://www.gravatar.com/avatar/4c6818ee88778a1936d3afb15ff938c2', '469539552', 'Antoine', 'Detante', '@antoined');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('bd4764498629afe21226d3c565bab675f587b6fa', 'https://pbs.twimg.com/profile_images/852427652086583296/r9w_Rk_Z_400x400.jpg', '-1137052441', 'Corina', 'Pip', '@imalittletester');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('81204e28f5a343c4f9812c91835b0ac8bffb763a', 'https://raw.githubusercontent.com/howtographql/howtographql/master/src/assets/graphics/contributors/bojan.jpg', '1777310008', 'Bojan', 'Tomiƒá', '@kaqqao');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7809a48d936be76c784289605b00cecc051463eb', 'http://www.yaya.fr/Pictures/Yannis.750x750.jpg', '-1033355931', 'Yannis', 'Bres', '@YannisBres');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f8caf20b7f6f226bf0637bc8e077d95161561439', 'https://www.gravatar.com/avatar/1a616a1b0ab4fe6ea72cc8d00c8ba4ec', '730673624', 'Quentin', 'Adam', '@waxzce');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6411091b413cbe292a892a0527f4d9086d421857', 'https://lh4.googleusercontent.com/-RPFXS90xZGI/AAAAAAAAAAI/AAAAAAACslE/QEL4wwy1k9g/photo.jpg', '-171435157', 'Murat', 'Yener', '@yenerm');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d235d137d2dae3e5ff511bc1b4d1fce34af0f8a7', 'https://pbs.twimg.com/profile_images/837901727969898498/Iusaea5m_400x400.jpg', '-672399950', 'Matthew', 'Fisher', '@bacongobbler');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2a900c2cffc420a69e30499847f9b0d1a407c340', 'http://www.gravatar.com/avatar/498838b88051c5a4c8a20b8499bd1b19', '1975011963', 'Andrzej', 'Grzesik', '@ags313');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('0ecb72ee6d1bfa1b4ee7b4561a610bd53767e9de', 'http://edegier.nl/photos/erwin.jpg', '-679302297', 'Erwin', 'de Gier', '@erwindeg');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('754d5324b56208c8c8bbc5c4947a1507037518ae', 'https://s.gravatar.com/avatar/b96856648af3bfdd5f15c0f32e90eec9', '-1133779889', 'Nathan', 'Murados', '@themuradonian');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('61df4cf53c99dac155f52e52f1fcb5539dc8260b', 'https://c1.staticflickr.com/5/4231/35710249762_d88676a2cc_b_d.jpg', '507403118', 'Michael', 'Cote', '@cote');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('48d3938acf24b622c1af8c6501857e393c4ff32d', 'https://lh6.googleusercontent.com/-OUTPrNFl7DM/AAAAAAAAAAI/AAAAAAAAKCM/x7dM7OgjDcs/photo.jpg', '-361393027', 'Gerard', 'Maas', '@maasg');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('299d1160a30e4518341169df2817be8c7d2cd5cf', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/AlanBateman.jpg', '-1946048710', 'Alan', 'Bateman', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b93078d70c84549e34fcdccf357b5625a8d5361c', 'https://lh6.googleusercontent.com/-c9DYfgXv-OQ/AAAAAAAAAAI/AAAAAAAAAAA/41HvmCQf2wY/photo.jpg', '2012793222', 'Axel', 'Fontaine', '@axelfontaine');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('25bda30f3b8379886dcdb3229520375bb564f37a', 'http://www.gravatar.com/avatar/64dbbbeb960d4014b28cd64d73340d94', '589340464', 'James', 'Strachan', '@jstrachan');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ee65e2019de49624e58688cf9459cea469a29687', 'http://blog.xebia.fr/images/devoxxuk-2014-logo.png', '-1126801843', 'Yishai', 'Galatzer', '@yigalatz');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e25388aa7339aae9d818086ade6e270a8bbd02d3', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/NakulMishra.jpg', '-1485724505', 'Nakul', 'Mishra', '@nklmish');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ec730bcb63b4b092743263fbd50be260c2a62437', 'https://drive.google.com/uc?export=view&id=1zLDVVpFlAcOXNbtsOKd_zgfoggurSuR8', '-248385995', 'Guillaume', 'Soldera', '@gsoldera');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('4a65ac0ef5d538e6543827b982baacab9d343963', 'https://avatars2.githubusercontent.com/u/2169239?s=460&v=4', '1107743028', 'Erik', 'Mulder', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5a73d74b13aa1aa44145faef290274229593baec', 'http://mbarsinai.com/square-220.jpeg', '-1647503883', 'Michael', 'Bar-Sinai', '@michbarsinai');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f67ea85f674b2d160e2d9d35f5f9c9888115568c', 'http://www.gravatar.com/avatar/872bb9cfb80c71fe0f9f23f1c86958c4', '-24950109', 'Ondro', 'Mih√°lyi', '@omihalyi');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b4630696dedf09d6da464d8301c3f31fd76225c0', 'https://en.gravatar.com/userimage/2133133/69cd6dbe8f4d2e32ec28896c92549782?size=200', '365919582', 'Antony', 'Stubbs', '@psynikal');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('39589d3fb28398f13c05d7ea77e7496627274be4', 'https://www.gravatar.com/avatar/83ba4449cf9195bd87dc11cb784acc6c?s=1024', '-1432869203', 'Jeroen', 'Mols', '@molsjeroen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6ecf0f052f036fefca9193ab827374c25381283e', 'https://www.gravatar.com/avatar/f1cffed7207743c5c50d207ee47f7924', '-1834871606', 'Oli', 'Gibson', '@oligibson');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7e26b7145a391d532523afa4c2283647dc821a4b', 'https://pbs.twimg.com/profile_images/1022590528330915841/H5dBaCpG_400x400.jpg', '35672458', 'Monira', 'Rhaimi', '@monirarhaimi');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('89228e5ae40bb347e77d4c915499b10401ba5393', 'https://avatars0.githubusercontent.com/u/11509290?s=400&v=4', '-877887079', 'Holly', 'Cummins', '@holly_cummins');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('94d38a2c38639dd4c38727e62d3b125094244544', 'https://lh5.googleusercontent.com/-QaMvBs8U3W4/AAAAAAAAAAI/AAAAAAAAAAo/XlIPb7_VbpU/photo.jpg', '-2006693116', 'Laurent', 'Baresse', '@Baresse');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('aad30e21bb11c3009996d5cf960b352240f2397c', 'https://lh5.googleusercontent.com/-eQ0KKUvy0no/AAAAAAAAAAI/AAAAAAAAAfo/EJcJA5QpIIw/photo.jpg', '-393344967', 'Arnaud', 'Giuliani', '@arnogiu');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('a6998d75a88dfaed52aae5bbbe7f402b5515f85a', 'https://openjfx.io/images/Rushforth.jpg', '2677872', 'Kevin', 'Rushforth', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('4bd12c1233e3f991ddc936c8cac93e086f834a31', 'https://lh4.googleusercontent.com/-5fu-qu4Ig7c/AAAAAAAAAAI/AAAAAAAAAEs/VB1PKNPy2Hk/photo.jpg', '-53200393', 'Johan', 'Vos', '@johanvos');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6b986eacc127d88cd01978f0cbf853fa79708b71', 'http://www.brianvermeer.nl/brian_OCO_400x400.jpg', '1189873250', 'Brian', 'Vermeer', '@BrianVerm');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('05afda51d686bab49c8687025d0b07b00ce45a0b', 'https://www.gravatar.com/avatar/55ac8578d32a08d68b078e47f29105b0', '-1781543047', 'Emmanuel', 'Bernard', '@emmanuelbernard');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f4d62663a544d0fbc01f78016838f5f411f2580a', 'http://www.gravatar.com/avatar/cb17294de56e44d18f1ab0dc966101a7', '-825709349', 'Guillaume', 'LOURS', '@glours');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5bb99432b2e4918ae33e5d01af1bbbb755b407d4', 'https://avatars1.githubusercontent.com/u/18708612?s=400&v=4', '-11597364', 'Sam', 'Warner', '@sjwarner_');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c8faf5b098667f2f6e685ac09f87b9dac1a00214', 'https://s.gravatar.com/avatar/e00b7c1f6769b607af9de3e32278a4fa?s=80', '-1886933132', 'Lien', 'Wuyts', '@WuytsLien');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('474eaa09ec5e38ee9c71d1f4a5c73051cdaf7b02', 'http://www.gravatar.com/avatar/3aad130eab0c6ad8705a2ef76283b657.png', '2056338292', 'Jan-Kees', 'van Andel', '@jankeesvanandel');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7a1ed3166072356dde9cbb5453540f0d02059921', 'https://lh5.googleusercontent.com/-jqaZc9ZsFp0/AAAAAAAAAAI/AAAAAAAAOD4/V7jKp0QODA4/photo.jpg', '945967776', 'Alex', 'Van Boxel', '@alexvb');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8a840a35dc6946fe9d5eaf0c0910a53afadaf981', 'https://www.hsablonniere.com/theme/img/hsablonniere.jpg', '73840505', 'Hubert', 'SABLONNI√àRE', '@hsablonniere');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('fb3e59bad2df2b9ad64d276dd3841e7e7e2298ed', 'https://pl.gravatar.com/userimage/17704581/7f28c2fd29802d7fc491e7383c5b5f34.jpg?size=600', '-349343118', 'Kuba', 'Marchwicki', '@kubem');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f645e0482172e9950d2fd4942e9f7c2611c510c2', 'http://bertjan.s3-eu-west-1.amazonaws.com/profile-small.jpg', '533804795', 'Bert Jan', 'Schrijver', '@bjschrijver');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ab1e708d820405781cb1d99dc31b7d52800c749f', 'https://lh5.googleusercontent.com/-839rjiWS0pg/AAAAAAAAAAI/AAAAAAAAA0Q/LbUzNWLqBKc/photo.jpg', '-128337518', 'Dimitris', 'Andreadis', '@dandreadis');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5fb1a718e0b8ca1b6b5f45a042ba32eaef27a0a3', 'http://www.gravatar.com/avatar/b489790e1a844284d7cd1fa2cd6e021f', '57721054', 'Ivar', 'Grimstad', '@ivar_grimstad');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('3855dcd2b577d100a20e3f145ad8f0a165d5b371', 'http://www.gravatar.com/avatar/3206e69e21d213cd672df8f50cdf6607', '-480369915', 'Dmitry', 'Kornilov', '@m0mus');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9efc4d746d8e6c4a58cdb8540be6229836705591', 'https://lh3.googleusercontent.com/-WE50dOB4RKo/AAAAAAAAAAI/AAAAAAAAAXg/Ycm0Nxt17io/photo.jpg', '-1784235574', 'Kevin', 'Sutter', '@kwsutter');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('694f8c83339b87ece72ccea8e9fa7588cd0dfe03', 'https://gravatar.com/avatar/53ee0e29febaf3f1522fcda24747ee0f', '157864294', 'Erik-Berndt', 'Scheper', '@fbascheper');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e43a02ca20691173da1dc75a12a7a030f72c13c0', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/OlegSelajev.jpeg', '756178184', 'Oleg', '≈†elajev', '@shelajev');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9d24c928e91ac666d17dca940a22448bc4b49eab', 'http://www.gravatar.com/avatar/00d62b08470577c921552e3a8e41632d', '-15461699', 'Thomas', 'Wuerthinger', '@thomaswue');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('93f8df2d142810c56d5a93269792ebdcf44a6171', 'https://lh5.googleusercontent.com/-c2TDYPWtdDg/AAAAAAAAAAI/AAAAAAAAAB0/ViwwWfSMtp4/photo.jpg', '-1616292283', 'Matt', 'Turner', '@mt165pro');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('41fff4f5cd9c2959c24310d7a1c44cbe2cb19cb6', 'http://www.gravatar.com/avatar/da0509c09b512df9b024325437f76958', '-1935308487', 'Damien', 'Duportal', '@DamienDuportal');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7dbca6c6316ec14fd7a30d99f5646e1aab680b8f', 'https://www.gravatar.com/avatar/db7334bc3ec4e3038beb0cbe6957f42d', '-1873743804', 'Michael', 'H√ºttermann', '@huettermann');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d93e2531582a3f47de85f60b52dbd8aac04afb35', 'https://avatars3.githubusercontent.com/u/4410012?s=400&v=4', '-2100418053', 'St√©phane', 'Tourni√©', '@sttournie');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5ff931f7cb9b9ddbda86b842319541e60203b55c', 'https://github.com/evrignaud/hireme/raw/master/avatar.png', '-989077031', 'Etienne', 'Vrignaud', '@evrignaud');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2bdeb54b47c914bbf0fdb00fe4a9c18ac28484a8', 'https://github.com/jonnyzzz/jonnyzzz.com/raw/master/images/ms-icon-310x310.png', '-730319352', 'Eugene', 'Petrenko', '@jonnyzzz');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('96678a1719c019691241d937530700d7c0f58768', 'https://s3-eu-west-1.amazonaws.com/glnds.io/images/0U1A4955.jpg', '1070578745', 'Gert', 'Leenders', '@glnds');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('4017188c2821621bd62e55f9035c7e48733b79c1', 'https://www.gravatar.com/avatar/4fefa621e89211dc7577bbb77a378a24', '-456659650', 'Micha√´l', 'Hompus', '@eNeRGy164');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('bb15ab5b46b4a1371708898c04565deec0549c26', 'https://intherealworld.io/img/me.jpg', '1653952638', 'Tim', 'Bogaert', '@bogguard');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c4a9f157fcf0e4f29df2d01d1b49fd24e12a0714', 'https://lh5.googleusercontent.com/-e-JfVzch2nY/AAAAAAAAAAI/AAAAAAAAAO8/OhC7zr1aP9Y/photo.jpg', '1881211700', 'Simon', 'Maple', '@sjmaple');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8af78fa5cf9450329a3ecbceb4038823681de4a7', 'https://www.gravatar.com/avatar/7e357ae5b0366a29f1f54434791ddefd', '-1996426292', 'Audrey', 'Neveu', '@Audrey_Neveu');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d2fd0a69f8cbf47c3c05f33fc93ca59b4df47dc0', 'https://storage.googleapis.com/deleplace-sandbox/photo/val.jpg', '-1347305982', 'Valentin', 'Deleplace', '@val_deleplace');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('4c2cc06bee1eef61b5bc866fe1be1fc97af31945', 'https://s.gravatar.com/avatar/7e6a435700dda6cdb22105d601f20892?s=500', '108201853', 'Laurent', 'Picard', '@PicardParis');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('46b63372a59ac3b2924376a62ab13cd8a58eb65f', 'http://www.gravatar.com/avatar/686399bd630ecc9381e4dfec8720816e', '695814692', 'Philippe', 'Bourgau', '@pbourgau');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('fa17bb8246e76e8c9f8bc99c89673b069a0a508d', 'https://raw.githubusercontent.com/SoSayethSimon/Evil-Kotlin-Quicksession/master/images/others/profilbild.jpg', '2055187503', 'Simon', 'Schell', '@SoSayethSimon');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7e5e21c2f5c83b30c6820362f100ca536c61a5de', 'http://www.gravatar.com/avatar/f0887bf6175ba40dca795eb37883a8cf', '502027314', 'David', 'Gageot', '@dgageot');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('68f9c9174f46a0a4e7300b299832604c1c973709', 'https://lh5.googleusercontent.com/-GUJq9wKrV8A/AAAAAAAAAAI/AAAAAAAABkI/H_CG66GUv1c/photo.jpg', '1475880857', 'Julien', 'Dubois', '@juliendubois');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c0e3e7970ba8146f48ac7f1357ca3e0c4dc08717', 'https://avatars2.githubusercontent.com/u/6815170?s=400&u=ad2793587ceab62a7d87b4fd309117e58f5d0938&v=4', '-841145957', 'Sebastian', 'Daschner', '@DaschnerS');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('770d49323c90aafdad5c67c770ff25fba9102a42', 'http://www.gravatar.com/avatar/4619f71443c2a00a87424d3b68a3ae83', '193609492', 'Bernd', 'R√ºcker', '@berndruecker');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5dd5aacbde402a87bc425d45db189d9ce7f2dd5d', 'https://www.gravatar.com/avatar/c97d55cc6c1f424d0731068519a24e9d', '138925066', 'Antoine', 'Tollenaere', '@antolnar');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('fff0c5b6085b5805cbba76d0de3e08fcbb384e5d', 'https://www.gravatar.com/avatar/ecbe37507e4bc5ba2c56b9cf3ca5988b', '-371708717', 'Ricardo', 'Lage', '@riclage');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d0e5ed79b2bbac20686a75dfe162c459ab1998fd', 'https://cfp.gr8conf.org/profile/img/54', '-1606996816', 'Graeme', 'Rocher', '@graemerocher');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('07162e8d688cbca41c7415ebea3164603f30dd08', 'https://pbs.twimg.com/profile_images/1008020255485112321/uA2CQic5_400x400.jpg', '-399764218', 'Jaap', 'Kabbedijk', '@jkabbedijk');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1fb4b36067019650b169a5514fb1908292305c35', 'https://avatars0.githubusercontent.com/u/26709481?s=400&u=87e192d3439901bf4e31855f1313c8c00ba09290&v=4', '-87032043', 'Gijsbert', 'van Renswoude', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('cdf458af94a18a9ad4553fab5ae89c87483cedc6', 'https://pbs.twimg.com/profile_images/430332736444715008/anlaqRmz_400x400.jpeg', '-855594659', 'Daniel', 'Bryant', '@danielbryantuk');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7054204a63b211dd9f47c9cb0a600da878c3b9ce', 'https://papercallio-production.s3.amazonaws.com/uploads/user/avatar/6476/me601x601.jpg', '1423049517', 'Steve', 'Poole', '@spoole167');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('310c22bc883bdb4e264531c4863345d37ef5eaea', 'http://www.gravatar.com/avatar/af288eef29fe7fc5dfaabe9c944d17fc', '-127020977', 'Charlie', 'Gerard', '@devdevcharlie');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5099132faff5ad68c2b154110a7a6ab10098493f', 'http://www.gravatar.com/avatar/09dbeb1373fa4fdb8dfd9a84cba6c03b', '-2002464623', 'Jeremias', 'R√∂√üler', '@roesslerj');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5e9c17ec90da31ab417f91096588f520dc40949c', 'http://www.gravatar.com/avatar/0fb625aef5a5feebdc02614a92e3af5e', '1331663323', 'Markus', 'Eisele', '@myfear');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('dd478b430a39baacd039f43c9afa192de87f9a64', 'http://developer-media.de/wp-content/uploads/2015/04/F%C3%B6rtsch_Martin_dwx15.jpg', '328864266', 'Martin', 'F√∂rtsch', '@MartinFoertsch');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f6b754ab8b25c55a64bf3c13eaa006764605d072', 'https://secure.gravatar.com/avatar/804516d025c94ef763dcbf43fc6806eb', '-623224235', 'Thomas', 'Endres', '@originalOne1984');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('05c3cce3782f6e475908944e12c902d721c2cb4a', 'http://blog.xebia.fr/images/devoxxuk-2014-logo.png', '486006680', 'Sharat', 'Chander', '@Sharat_Chander');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6a4bab44cd7903e054c5d6861a3c9aa9fcdf1826', 'https://lh4.googleusercontent.com/-1XmJ5ACcmBg/AAAAAAAAAAI/AAAAAAAAs7Q/vnQG2c83VQw/photo.jpg', '-601055737', 'Paco', 'van Beckhoven', '@DevPaco');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('74f5131beed4f12319f2a40bb89cae9e07541cb3', 'https://i.imgur.com/fCm12qF.jpg', '-1550108757', 'Alex', 'Rickabaugh', '@synalx');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e6cebcbe4110635e97ac99e1d036f2de28f74a85', 'http://blog.xebia.fr/images/devoxxuk-2014-logo.png', '-1955194720', 'Maurizio', 'Cimadamore', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8261870ee3c0a39bf4d487b4f5cc382f5808d128', 'https://www.gravatar.com/avatar/1fe4904857798affa9b7e130ee165042', '-580522510', 'Marek', 'St√≥j', '@MarekStoj');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d43a605b3a6dc64fab9bcc477db2425ef1e58adc', 'https://pbs.twimg.com/profile_images/1016407802636464128/wgcq2CC2_400x400.jpg', '-1129641510', 'Erin', 'Coughlan', '@ErinCoughlan16');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('0a13f99b2cca2bb7202e89490395af14e25f4270', 'https://d1.awsstatic.com/Developer%20Marketing/evangelists/alex-casalboni/alex-casalboni-spheres-round.9521aae9138a1307a448f5bf33511f0d6ceeb9b5.png', '940705502', 'Alex', 'Casalboni', '@alex_casalboni');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('4f99dc6aaeb118b9779aa48d2fa9dd967c19956b', 'https://www.gravatar.com/avatar/959d56c85205595d4505a0ee64e66f04', '-1276934040', 'Valerie', 'Andrianova', '@va_leriya');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('328c4f6e78329dac0b3a1bfcfecc77741e2d850b', 'https://objectstorage.eu-frankfurt-1.oraclecloud.com/n/oci_core_emea_sc_mannisto/b/img/o/erno-bg.jpg', '-324726497', 'Erno', 'Ven√§l√§inen', '@venalainene');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('3c66d2e9ee9e74d799bb2b39b95db7e032904829', 'https://avatars2.githubusercontent.com/u/11362563?s=460&v=4', '-803861303', 'Tom', 'Cools', '@TCoolsIT');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8e7181a94d25fd5393989c0906bd430a2d2ee4ca', 'https://fr.gravatar.com/userimage/32722828/19245aa9282325600ae512198e75cfaf.jpg?size=200', '264976511', 'Pierre', 'Cr√©pieux', '@PCrepieux');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1a2088264bf5334a99acc63cbfa1259811a86511', 'https://pbs.twimg.com/profile_images/909794528772673536/19LgIr6i_400x400.jpg', '-339889114', 'Frank', 'Poncelet', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('34cdcd4373cfc16028ca3f54f5bd096370781754', 'https://lh3.googleusercontent.com/-O4hwF7obqpo/AAAAAAAAAAI/AAAAAAAACkE/v_wsdLtXlx0/photo.jpg', '-61937163', 'Geoffrey', 'De Smet', '@GeoffreyDeSmet');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('a105b804e93174461454090a16790ca454bb5b7d', 'https://pbs.twimg.com/profile_images/1043182987548999681/Yk7GjwUG_400x400.jpg', '-413478814', 'Piotr', 'Krzemi≈Ñski', '@pkrzemin');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('770ddde56d4781a265efd5cea062d59bc0d11f1a', 'https://pbs.twimg.com/profile_images/1043979415926050816/dGqXqbl9_400x400.jpg', '-292129091', 'Viktor', 'Tymoshenko', '@_tymoshen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('5bbbccbb5e380673139e8b743583a007e87838bf', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/rondejong2.jpg', '-417345303', 'Ron', 'De Jong', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('04adb85e1d09070b78823fa182d61147efcadfc3', 'https://media.licdn.com/dms/image/C5603AQHt9SBs0a-uug/profile-displayphoto-shrink_200_200/0?e=1543449600&v=beta&t=Thd2M4GRHGZUyuoNBxuUUGghrlosktT5mQFWxvMv7Jg', '206935829', 'Cyril', 'Thirion', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('4bbb7f2cae3ab37825a88d4292ca5b087162c07b', 'http://iteratrlearning.com/images/richard.png', '-1119757526', 'RIchard', 'Warburton', '@richardwarburto');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('031bf1e9597d4731ae8ab1511e2f07c3fe5d6fc9', 'https://lh6.googleusercontent.com/-ZOIy9n_-lEE/AAAAAAAAAAI/AAAAAAAAAAA/AB6qoq1zlTPzaJf1xnbWVe7HK7ngJJUjRQ/mo/photo.jpg', '1900940226', 'Sadiq', 'Jaffer', '@sadiqj');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1928a89ba300e807b77241f27963a56da08cae76', 'https://pbs.twimg.com/profile_images/877481998696280064/4xFRqHIq_400x400.jpg', '330950284', 'Ana-maria', 'Mihalceanu', '@ammbra1508');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d53e7337f20f97cbec513070e11f656a430a1686', 'https://media.licdn.com/dms/image/C5103AQEjXkn54OpW4g/profile-displayphoto-shrink_200_200/0?e=1544659200&v=beta&t=kHLE5fFE7Eie4mBUcRmG7UO67dMDqbHgMWmuudxFLWY', '180417737', 'Pim', 'Otte', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('de7dc423af712bbcf43bdf9089179c66becb786d', 'https://lh3.googleusercontent.com/-6_5waC7sSFs/VYHZS7YswjI/AAAAAAAAAAs/bcYIeyC-GcMHAaQ2mRP0S2b6i5aiq2DUQCEwYBhgL/w278-h280-p/PhotoProfilPro.jpg', '1006198439', 'Madou', 'Coulibaly', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('996af8485b077fbc3bb8fc027e689ff1b5d88a9a', 'https://lh4.googleusercontent.com/-l5aj1wUwNSM/AAAAAAAAAAI/AAAAAAAAAH8/iUDQdtUOg40/photo.jpg', '-349705760', 'S√©bastien', 'Deleuze', '@sdeleuze');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('426f96dcd58ede72af69149e199e356814fd7173', 'https://lh3.googleusercontent.com/-QgKxfsO5VXw/AAAAAAAAAAI/AAAAAAAAGwM/r-wNwJrEo_w/photo.jpg', '-1290534282', 'Juantomas', 'Garcia', '@juantomas');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6e1e9a41cadfbd26e5090836a9e014fdb23a011f', 'https://pbs.twimg.com/profile_images/714917430594768897/fQYxxlZl_400x400.jpg', '813697005', 'Sebasti√°n Jes√∫s', 'Blanes L√≥pez', '@vigasocosdl');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d6717e57a0254827b240950d9c69cf4c49c1cc43', 'https://www.gravatar.com/avatar/1335d0e53b310b0e77c9f374c03b2ce4', '-564998012', 'Jos', 'Dirksen', '@josdirksen');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2419e1d62fbb5a0604f662c768d03a9df78beb23', 'http://www.gravatar.com/avatar/f465a8eb2a03e6832a95354bf6dc1577', '-2124174335', 'Iv√°n', 'L√≥pez', '@ilopmar');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f2c5b63050098babd4e50b10bb1a5364ab000b63', 'https://avatars3.githubusercontent.com/u/891845?s=460', '467660711', 'Adam', 'Bien', '@AdamBien');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d4e2cd1586f3ca7fdac864cfa5bb231cfbe0a9f4', 'http://littlebluefrog.nl/JJH/Devoxx2018.jpg', '-1548385300', 'Johan', 'Hutting', '@fbascheper');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('05b697134798104ef19ab9ddd698c6ee770e0bf4', 'https://lh3.googleusercontent.com/-zj00NmYykTc/AAAAAAAAAAI/AAAAAAAADm8/h9LWvgSvMRc/photo.jpg', '770385595', 'Pratik', 'Patel', '@prpatel');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('882609e1f2b7d0a575d9cd0aad7ec0d0d4265a0b', 'http://www.gravatar.com/avatar/70633802ce502d2fa8b587c725227c06', '-2102607436', 'Doug', 'Sillars', '@dougsillars');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('11fa1c4b33e886d8bf2e0ff2f6df170ff1b1ea7b', 'https://www.gravatar.com/avatar/cb32049e633ea99d1c5a05dbde91c87e', '1520681708', 'Vincent', 'Kok', '@vincentkok');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e5e33035a476a76fcbb80a645b55a9cc524dcdbc', 'http://www.gravatar.com/avatar/98d0697142b0d75568acf12b2767b01c', '1513072931', 'Antoine', 'Sabot-Durand', '@antoine_sd');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('17ec2e4c9dbcdd0f5eabab51f3df4fcea7ff2336', 'https://sessionize.com/image?f=dc5b9b9d98bc2e170bc0adbf7cf923cc,200,200,True,False,b6-a362-412a-b855-4e1027cf54fd.004fec28-0200-41be-a816-04bf68df439d.png', '-1268266562', 'Konrad', 'Kami≈Ñski', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('43a8db41c5058ab3c67a26ee8055d8653ff31282', 'https://i.imgur.com/xCuPDQc.jpg', '1133743645', 'Ruben', 'Boumans', '@reb2punt0');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('0d7fffaa94fefcf89147e425b41ad75c3dad4738', 'https://avatars0.githubusercontent.com/u/1517153?s=400&u=f12991d66885d05a34b545cb33af3f61515703c9&v=4', '-355002810', 'Alex', 'Soto', '@alexsotob');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('718137d78eb52f6d38f3cbedc350fea9ae2a55e4', 'https://en.gravatar.com/userimage/3198072/e9bf46a7b9af34f649bdd72aa75ccf74.jpg?size=200', '-1929164819', 'Andres', 'Almiray', '@aalmiray');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d3ff621339c1c31cf3c02c9cf0dd313ee1d66ff4', 'http://www.gravatar.com/avatar/51dc9bae3a540e196733aed49c3cb860', '-791248911', 'Karl Heinz', 'Marbaise', '@khmarbaise');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('dbf4782a4a5e5d73f7ee907a83afeb4f67b49453', 'http://www.gravatar.com/avatar/35b0cc47b5e6d602734c636082d630df', '1718832320', 'Herv√©', 'Boutemy', '@hboutemy');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('06664f19ef5e14174e3f4cf8a85ef9be9122348e', 'https://lh5.googleusercontent.com/-KTwP0PpJcdQ/AAAAAAAAAAI/AAAAAAAAAHk/cEHIn4F48Vo/photo.jpg', '-1911804597', 'Karl', 'Brodowsky', '@bk1_168');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2bd0c59e013b298412bec2dea29a5e7871fd8b35', 'https://www.gravatar.com/avatar/a0afa201916ee3e69ffcf92f12ed2b91', '248527309', 'Hanno', 'Embregts', '@hannotify');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7fcfbb6e81e94d9f44ba94a57273dab71d279d07', 'https://lh5.googleusercontent.com/-W6WOZQGndVk/AAAAAAAAAAI/AAAAAAAABH4/fHMmS8uIGjw/photo.jpg', '1010130600', 'Edwin', 'Derks', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2c5a6361c9396d7a0df624d828e06fd86abc5435', 'http://blog.xebia.fr/images/devoxxuk-2014-logo.png', '-970987725', 'Jeroen', 'Horemans', '@Hypernations');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c1d4cb023f318be8e9f8356301104fddb7528458', 'https://pbs.twimg.com/profile_images/829647036630839297/NTrpUQ9F_400x400.jpg', '-1804176669', 'Nick', 'Vanderhoven', '@nickvdh');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6474d6c1ad9cd22c652613af6555b6bcebe4a0ab', 'https://lh4.googleusercontent.com/-Y5ypf4CTH2Q/AAAAAAAAAAI/AAAAAAAAAIs/WYNWIILBui8/photo.jpg', '-1357054254', 'Simon', 'Basl√©', '@simonbasle');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9c4e10457a0950fc9300795c9e18924f873b5360', 'http://www.gravatar.com/avatar/33d0963a20138828608f3f61927545b8', '1193158449', 'St√©phane', 'Nicoll', '@snicoll');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('677aeb6f664940b25267abbcba0ceb41722b670d', 'https://lh3.googleusercontent.com/-Vpj7Ofr9TnM/AAAAAAAAAAI/AAAAAAAAGDQ/7yLaqB4F328/photo.jpg', '-1944822426', 'Sven', 'Reimers', '@svennb');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b2a04e177ea96711ae329acc22c030d07870ec21', 'https://www.gravatar.com/avatar/bcff709c30e19de83842bcd168fdaa80', '-554546191', 'Martin', 'Kl√§hn', '@Martin_NB');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('fe9f9d97f7c0a959e1f94f2020726e31e8cecc5e', 'https://www.gravatar.com/avatar/ae8d52c1928f48b98282bf69950aaeec', '-1668202469', 'Tim', 'Prijn', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ea94b8f9411d49e58a8175199d1197856e291f99', 'https://lh3.googleusercontent.com/-HoihC9Usc54/AAAAAAAAAAI/AAAAAAAAAA4/onf0LoMBEMw/photo.jpg', '-103649407', 'Peter', 'Hendriks', '@PeterHendriks80');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('0b1260573cfc163d9313ddb11ea5a54b3ab7193f', 'https://pbs.twimg.com/profile_images/757178511996153857/0p1uZbfu_400x400.jpg', '1994605125', 'Ramon', 'Wieleman', '@r_wieleman');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('fc86ee0245cc9db1a0f8dfa10375055bddeaca0d', 'http://www.gravatar.com/avatar/0f67064dabeaf03ac03fc54d7f7a770a', '-254004226', 'Richard', 'Kettelerij', '@rkettelerij');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1332a3a83d0b572b701f0f5f30fe8a2310b5f030', 'https://www.azul.com/files/SimonRitter-512x512.jpg', '261629803', 'Simon', 'Ritter', '@speakjava');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('151d03570697cfee4f4a6ef69c2fb907377f49b8', 'https://lh5.googleusercontent.com/-AFlpF3GrGmc/AAAAAAAAAAI/AAAAAAAAFm8/72GcYhS1pcA/photo.jpg', '-309433520', 'Nilay', 'Yener', '@nlycskn');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('6a635bdc45a8266a5fb300f214f9207c4f399f6d', 'http://www.gravatar.com/avatar/137d3908243acfc30e126615d59d4e6d', '-576212862', 'Guillaume', 'Laforge', '@glaforge');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f3a48bb49697608a0ccd8f8fa1bb08b0f606296b', 'http://www.gravatar.com/avatar/0b17060fd5b56172e81e4bfbbcb438e0', '1796555040', 'Vincent', 'Massol', '@vmassol');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('44637da87c19cc989783b834193f940a7db2f366', 'https://lh4.googleusercontent.com/-lhM21yfjURo/AAAAAAAAAAI/AAAAAAAAU44/ZvWlMXFvwpc/photo.jpg', '-1597630300', 'Alexis', 'Moussine-Pouchkine', '@alexismp');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7c55cebea3d51ecdce70d3ae5af047f1177c6f6c', 'https://www.gravatar.com/avatar/3f9ebfb254c56d281d91bbee960219a8', '811653400', 'Gautam', 'Korlam', '@kageiit');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('b045e3abfee76eb6cac924a4469b572318b0fc1c', 'http://www.gravatar.com/avatar/b7a9019a4a2ff2b370331fed12abb790', '1537564104', 'Harshit', 'Dwivedi', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('1c67d2de8e86b5e360bc67885d55a91d8f54f4f1', 'https://pbs.twimg.com/profile_images/810508344825933824/lLJWIKSh_400x400.jpg', '-1277836826', 'Fedi', 'Salah', '@fedysalah');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('485043925eca47dd66470b801e45380eb5f816a5', 'https://www.gravatar.com/avatar/de855e8f68be21aaab4541345ae0380d', '1237630559', 'Joakim', 'Lehn', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ea52c775d6049c9d5e3e327dee8d647e20799a30', 'https://lh3.googleusercontent.com/f8YC8CsDIqKbNV5jJc1blHZRQr-WBUJMwP8bFGvwjkjjMlH7ohnwOOLwGRFiwcrD1ot3t3JBG2b3mDSKdcrhBJdrex8kekfWcKCWx9b-hZlV8A49vJ4bcpmNuhecIJoHlEkAazc37kcHyiZmb2HIQe_s1v0L8IXITmkZ1xpbj_84xa6HcuCkoDcDXbgvSTGtbvHT_GDmeKZuCcKdKxaavTb6SRdbp5X4xNMvq6YCVE6vBt3R6q3cAtMnKWxTSOmVLGT2obckA40Qi4mD-KTBEqfS1eX5oVSg2zUlavnvprYpH5_T3dFPh6xyYBZ_3fcnj7ctxEUVAqV8E8QatC7SjfP-NIT2YDmQ0GWPsMIZ_v1sO6FCsi2VSJTtaL5RXw7Bv8PY3uJzIc7xeBu3VBSeNNzozTcO-4f2I8Q4fyCRN5HJzTCd2mDAMyqO42PZ7alaEVHZQD5DW-zDlhMgSc20CN_3DtyMBrptneHIKeXmHY2Qu_6zP9NGwDwRUnt_KUlkRJcMJ-oIbq1mdVgXwZyko_EJcbn4XXUEmRzfq5h9EvZY3e13U38cDrObdBmmAL2ouh3_06ZASo19U15qu6j4cG8OIreQQ1Wxj37YqlnwrCWOZNp5fP9vhg1zs94Hic8=w1441-h1537-no', '1210404579', 'Manu', 'Gopinathan', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('27d1a35d487d530572154257ce4e08de4d3cb870', 'https://lh6.googleusercontent.com/-9OjTZqDUcOc/AAAAAAAAAAI/AAAAAAAAAAA/AAnnY7qrUZPLrXM-XhEbDVmQqb9NtyoHEw/mo/photo.jpg', '1565014822', 'Malte', 'Loller-Andersen', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('627b7409dd42d9c3e3ef9fa4a2cd846ee7511693', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/AndreyFalko.jpg', '1962331879', 'Andrey', 'Falko', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('3a43de36b97f10207c9b22efa2227b0bf912575e', 'https://pbs.twimg.com/profile_images/1052662381187358720/zwpaMMhZ_400x400.jpg', '177281510', 'Alexandros', 'Zotos', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('3d10363c133f1fdfc57f353a7311a736fd20ab4f', 'https://www.elucidator.nl/content/images/2015/01/pieter-van-der-meer-2.jpg', '11382625', 'Pieter', 'Van Der Meer', '@Pieni_NL');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e396c2baaa0a21fcebd8c801ead0f069b1b77b5d', 'https://pbs.twimg.com/profile_images/1056424292382961664/-AzeTndR_400x400.jpg', '-1914589452', 'Scott', 'Mitchell', '@Scott_mitch_');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f52b2b1edecb0fe4358703c4d6506e76c7f2c4a0', 'https://eu.scaladays.org/common/images/numbers/6909_1.jpg', '-909228715', 'Alessandro', 'Vermeulen', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c7880e3011bac082f53cc2d7bd15cf54224da213', 'https://svensuniverse.files.wordpress.com/2011/02/sven_peters_bio.jpg', '1134247245', 'Sven', 'Peters', '@svenpet');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('8ed4f680bfebed370dde93a7dd5954fafd733be9', 'https://lh5.googleusercontent.com/-kJRsInglGGY/AAAAAAAAAAI/AAAAAAAAAEA/lvx_PBCcDnc/photo.jpg', '-1110049256', 'Michel', 'Drenthe', '@The_MiXeD');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('9136a18c007e3aff9efd4ce9b21bfb5906a89533', 'https://lh3.googleusercontent.com/-8nseoHuypMg/AAAAAAAAAAI/AAAAAAAAAAc/XXir2hiPj8w/photo.jpg', '-2132953865', 'Ivor', 'Boers', '@ivorboers');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('ca40289712cebf526b73a6a05cf72030d907b8fb', 'https://www.kuleuven.be/wieiswie/en/person/00041139/photo', '-1504631044', 'Stefaan', 'Haspeslagh', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('2172f94ba3e3cef5e533958379002a7095467ddc', 'https://avatars0.githubusercontent.com/u/6785037?s=460&v=4', '956314778', 'Kasper', 'Cools', null);
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('e7a0ff8b08e1941ae25541c393dfd255c665d027', 'https://i1.wp.com/www.iloug.org/wp-content/uploads/2017/11/Gerald-Venzl-400x400.png?fit=400%2C400&ssl=1', '538305071', 'Gerald', 'Venzl', '@GeraldVenzl');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('0e208f129cb120b4926c982a43fabe1138c7b816', 'https://lh6.googleusercontent.com/-VSsjzcs6Dz8/AAAAAAAAAAI/AAAAAAAAtzI/qawb-nOdS_k/photo.jpg', '702839696', 'Bruno', 'Borges', '@brunoborges');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('d38a0b2d49fec7f66ace5d5817a9359de138a3fa', 'http://www.gravatar.com/avatar/e39a60b31c52b4dc8e93badaa598c0a0', '1623474112', 'Jeff', 'Hollan', '@jeffhollan');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('c199a16d57aaee4d986c65d118d86e1beae5d363', 'https://secure.gravatar.com/avatar/04f202879fdfca1e105d32545de7accb?size=750', '-1726814981', 'Roy', 'van Rijn', '@royvanrijn');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('44a79797e2acb1d1b5e87ecb342788b1642f32f8', 'https://pbs.twimg.com/profile_images/725883849004044288/oB82Mxf-_400x400.jpg', '-1683309516', 'Ben', 'Stopford', '@benstopford');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('7189f4a2dfb7199ed684a781cce2d82f99e6e596', 'https://s3-eu-west-1.amazonaws.com/cfpdevoxx/belgium/speakers/DavyVanRoyV2.jpg', '30491798', 'Davy', 'Van Roy', '@DavyVanRoy');
INSERT INTO PUBLIC.SPEAKER (UUID, AVATAR_URL, ETAG, FIRST_NAME, LAST_NAME, TWITTER) VALUES ('f6be30c224fa250ab01c56d11b043036b51f4599', 'https://lh4.googleusercontent.com/--cVUuQ5h2lY/AAAAAAAAAAI/AAAAAAAAAAA/AB6qoq37ojnAaPAOb8ecDqdg496Nz8LBuA/mo/photo.jpg', '-682704277', 'Eric', 'Loots', '@lootser');INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CFL-7665', '2018-11-12 12:30:00.000000000', '09:30', '2018-11-12 09:30:00.000000000', 'What is the state of lambda expressions in Java 11? Lambda expressions are the major feature of Java 8, having an impact on most of the API, including the Streams and Collections API. We are now living the Java 11 days; new features have been added and new patterns have emerged. This highly technical Deep Dive session will visit all these patterns, the well-known ones and the new ones, in an interactive hybrid of lecture and laboratory. We present a technique and show how it helps solve a problem. We then present another problem, and give you some time to solve it yourself. Finally, we present a solution, and open for questions, comments, and discussion. Bring your laptop set up with JDK 11 and your favorite IDE, and be prepared to think!

This session is part 1 of 2 parts. In part 1 we will cover lambdas, functional interfaces, default methods, higher-order functions, and comparators.', 'Lambdas and Streams Master Class Part 1', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HJU-1325', '2018-11-12 16:30:00.000000000', '13:30', '2018-11-12 13:30:00.000000000', 'Java 8 introduced Streams and Java 9 now has Reactive API. Which one should we choose, when should we choose them, why, and how to use one vs. the other. This session will answer all those questions, by diving deep into the APIs using live code examples.', 'Java Streams vs. Reactive Streams: Which, When, How, and Why?', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WDP-2014', '2018-11-12 17:15:00.000000000', '16:45', '2018-11-12 16:45:00.000000000', 'Exception handling in Java is often considered cumbersome and not very aesthetically appealing. In this session, we''ll have a look at how functional languages deal with error handling and how we can adapt those approaches in the world of Java with Vavr.

Simply put, we''ll see how can we avoid ‚Äúthrows‚Äù by using Optional, Try, Either and by leveraging type-driven-development in general.
', 'Functional Exception Handling in Java with Vavr', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EJC-1239', '2018-11-12 18:00:00.000000000', '17:30', '2018-11-12 17:30:00.000000000', 'Your brain is a ruthless despot. It just doesn‚Äôt want to let your ideas and thoughts out. But it has a weak spot. It‚Äôs susceptible to brain hacks. Let‚Äôs set your ingenuity free by coercing your brain to cast the creative flood gates wide open.

I‚Äôm back to share with you a dozen hacks I use to get my brain to write fluently. Centered around the AsciiDoc markup language, we‚Äôll explore tricks such as starting with the action, zen writing mode, the WORKLOG, the content fly trap, communicating with links, collaborative editing, and more!

These tricks you play on your brain helps keeps you in writing flow and the cursor racing across the screen. After attending this session, the blank page will be your oyster instead of your nemesis.', 'A Dozen Ways to Hack Your Brain to Write Fluently', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EHE-0587', '2018-11-12 18:45:00.000000000', '18:15', '2018-11-12 18:15:00.000000000', 'Is functional programming useful or just a hype? Why should I even care? What good is it to me? Used correctly, functional programming concepts make code easier to read, understand and change. Used incorrectly, they will make a mess of your code. Let‚Äôs use them correctly, shall we?

For a while now, functional programming has been a hot topic in the Java community - though for many people it means stuff like ‚Äúuse Streams‚Äù and ‚Äúwrite X as a lambda‚Äù. Functional programming is however so much more. In this session I‚Äôll discuss some of the main concepts from functional programming that are relevant for Java developers. I‚Äôll talk about when you want to use it - and when you probably don‚Äôt. Then I‚Äôll show you ways to create useful functional code using a both core Java and a few helpful libraries.', 'Functional Programming in Java - When, Why and How?', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('BLI-5468', '2018-11-13 12:30:00.000000000', '09:30', '2018-11-13 09:30:00.000000000', 'What is the state of lambda expressions in Java 11? Lambda expressions are the major feature of Java 8, having an impact on most of the API, including the Streams and Collections API. We are now living the Java 11 days; new features have been added and new patterns have emerged. This highly technical Deep Dive session will visit all these patterns, the well-known ones and the new ones, in an interactive hybrid of lecture and laboratory. We present a technique and show how it helps solve a problem. We then present another problem, and give you some time to solve it yourself. Finally, we present a solution, and open for questions, comments, and discussion. Bring your laptop set up with JDK 11 and your favorite IDE, and be prepared to think!

This session is part 2 of 2 parts. In part 2 we will cover techniques for using streams, Optional, and Collectors.', 'Lambdas and Streams Master Class Part 2', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('MTM-6628', '2018-11-13 16:30:00.000000000', '13:30', '2018-11-13 13:30:00.000000000', 'Teams that have built monoliths for years are used to certain patterns of interaction between different parts of the code base. Simply replicating those patterns when splitting up a system into a distributed one usually introduces a lot of complexity and drawbacks that often totally subvert the desired effects of a split up of the system in the first place.

The talk takes a look at a concrete sample of monolithic module interactions and identifies the problems that arise if that approach is transferred as-is into a distributed system. We then discuss an alternative variant of the monolithic implementation and how that approach improves the system''s modularity for the monolith and how it minimizes the cost and problems when splitting up the monolith or even starting with a system of systems in the first place.', 'Refactoring to a System of Systems', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('LJT-6211', '2018-11-13 17:15:00.000000000', '16:45', '2018-11-13 16:45:00.000000000', 'Spring Boot is awesome. Docker is awesome. Together you can do great things. But, are you doing it the right way? We''ll walk you through, in detail, the optimal way to structure Docker images for Spring Boot applications for iterative development. Structuring your Docker images correctly is really important for teams doing continuous integration and continuous delivery. Using Docker best practices, we''ll show you the code and the technologies used to optimize Docker images for Spring Boot apps!
', 'Optimizing Spring Boot apps for Docker', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('BVD-3316', '2018-11-13 18:00:00.000000000', '17:30', '2018-11-13 17:30:00.000000000', 'Have you ever thought that you needed to be a programmer to do stream processing and build streaming data pipelines? Think again! Apache Kafka is a distributed, scalable, and fault-tolerant streaming platform, providing low-latency pub-sub messaging coupled with native storage and stream processing capabilities. Integrating Kafka with RDBMS, NoSQL, and object stores is simple with Kafka Connect, which is part of Apache Kafka. KSQL is the open-source SQL streaming engine for Apache Kafka, and makes it possible to build stream processing applications at scale, written using a familiar SQL interface.

In this talk we‚Äôll explain the architectural reasoning for Apache Kafka and the benefits of real-time integration, and we‚Äôll build a streaming data pipeline using nothing but our bare hands, Kafka Connect, and KSQL.

Gasp as we filter events in real time! Be amazed at how we can enrich streams of data with data from RDBMS! Be astonished at the power of streaming aggregates for anomaly detection!', 'Apache Kafka and KSQL in Action : Let‚Äôs Build a Streaming Data Pipeline!', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FSN-9751', '2018-11-13 18:45:00.000000000', '18:15', '2018-11-13 18:15:00.000000000', '44% of applications contain critical vulnerabilities in an open source component* 
and this although good practices like OWASP Top 10 have become widespread.



Do not let these vulnerabilities incubate warm in the belly of your app! With this talk you''ll learn how those vulnerabilities are indexed  (NVD, CVE) and how their severity is scored (CVSS).

You''ll see how to create your first Continuous Security pipeline using Jenkins and OWASP DependencyCheck which detects vulnerabilities and track them using OWASP DependencyTrack (open-source softwares)

Do you first step in the DevSecOps philosophy !!!

*https://www.veracode.com/products/software-composition-analysis', 'Find and Track the hidden vulnerabilities inside your dependencies', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HRI-0501', '2018-11-14 10:00:00.000000000', '09:30', '2018-11-14 09:30:00.000000000', 'Welcome to the 17th edition of Devoxx Belgium.  In this welcome presentation we''ll highlight several applications we''re using to run Devoxx Belgium.', 'Welcome', '10:00', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CCV-1306', '2018-11-14 10:30:00.000000000', '10:00', '2018-11-14 10:00:00.000000000', 'In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases.  These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores.  They are disruptive, but they‚Äôre not as scary as you may think, and many developers have already adjusted to them.', 'Java in 2018: Change is the Only Constant', '10:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('XAZ-6526', '2018-11-14 11:30:00.000000000', '10:30', '2018-11-14 10:30:00.000000000', 'We''ve, as humans, been programming only for the past few decades. We''ve come a long way in some ways, yet we''ve advanced only marginally on other fronts. We hear folks tell us, ''oh, things change so fast'' and yet we''ve changed only a little in the way we develop software. Imagine where we''d be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We''re poised for the next big change. In this presentation we''ll learn about the perfect storms that''s influencing that change and the directions that the programming field is evolving in.', 'Spearheading the future of programming', '11:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NUP-3481', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'I''m sure you''ve heard about compatibility issues with upgrading to Java 9 and beyond, but did you try it yourself yet? This live coding session starts with a typical Java 8 application and runs up against and eventually overcomes the common hurdles:

* build system configuration
* dependency analysis with `jdeps`
* dependencies on internal APIs and Java EE modules
* split packages

To get the most out of this talk, you should have a good understanding of the module system basics - afterwards you will know how to approach *your* application''s migration to Java 9 and the module system.
', 'To JAR Hell And Back - A Live Migration to Java 11', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('AVV-0576', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'As we all know, estimating is both difficult and expensive and how often your tasks have taken longer than expected? Estimation is today one of the preferred methods for decision-making as well as the evaluation of the release dates of our projects ... but today there is an alternative: no longer estimating our tasks!

This talk is feedback on the implementation of #noEstimates on a development team for over a year. You will see what are the keys as well as the tools needed to set it up.', 'Developers, you should stop estimating your tasks! #noEstimates', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WZW-2858', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', 'Monolith to Microservices is a move from the complexity of one block into the runtime environment. Companies make a common mistake to think that they can implement microservices without upskilling efficiently their developers and getting them on an appropriate learning curve. Another mistake is that the IT department is often working on their own when the involvement of other departments is a key to success in this migration. Additionally, IT usually lacks clear roadmaps and a real incremental and iterative approach.
Most of the time, companies develop a Hype Driven Development syndrome with often only superficial knowledge and without having defined the right segregation of concerns in an environment ( monitoring, service discovering, circuit breaker, containers, etc. ). They give in to mature in-vogue architectures without solid prerequisites leading them early on to a complex architecture system (agnosticity, etc.) and decisions over the architecture set without a clear definition of boundaries and real needs (where, when, how to‚Äôs).
We will see how my customers managed to get out of their migration nightmare successfully by changing their approach.', 'Monolith 2 MicroServices - Houston we''ve got a problem !', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IZL-6493', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'What‚Äôs new in Java today, and what‚Äôs coming to Java tomorrow?  We‚Äôll start with a review some of the recent additions to the language and the platform.  We‚Äôll then look ahead at some of the features in development that will continue to improve both developer productivity and program performance while retaining Java‚Äôs core values of readability, generality, and compatibility.', 'Java, Today and Tomorrow', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NDV-3586', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'We have traditionally built robust software systems by trying to avoid mistakes and by dodging failures when they occur in production or by testing parts of the system in isolation from one another. Modern methods take a very different approach based on resiliency, which promotes embracing failure instead of trying to avoid it. Resilient architectures improve observability and leverage well-known patterns such as graceful degradation, timeouts, circuit breakers and embrace chaos engineering, a discipline that promotes breaking things on purpose in order to make them more resilient to failure. In this session, will review the most useful patterns for building resilient software systems and I will introduce chaos engineering methodology and especially show the audience how they can benefit from breaking things on purpose.', 'Patterns for building resilient software systems', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RMO-3587', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'Spring Framework 5.1 refines Spring''s functional and reactive API style on a JDK 8 baseline and embraces JDK 11 for a smooth upgrade to the next long-term support generation of the JVM.

This talk illustrates the benefits of a JDK 8 baseline and the compatibility challenges on JDK 11, providing upgrade advice for Spring applications on the classpath and the module path.', 'Spring Framework 5.1 on JDK 8 & 11', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CMU-6611', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'Deploying your Java application in a Kubernetes cluster could feel like Alice in Wonderland. You keep going down the rabbit hole and don‚Äôt know how to make that ride comfortable. This no-slide and code-only session will explain how a Java application can be deployed in a Kubernetes cluster. Specifically, it will explain the following:

- Package the application as Docker image
- Create Kubernetes manifests
- Create Helm charts and hosted in a repository
- Test in a local environment
- Debug pod using IntelliJ
- Install Istio service mesh
- Distributed tracing across microservices
- Metrics using Prometheus/Grafana
- Setup deployment pipeline
- Migrate application from a dev to prod in Cloud
- Change application, show Canary and A/B ', 'Java developer‚Äôs journey in Kubernetes land', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SOK-9080', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'You''ve seen big data breaches in the news. But as a developer who doesn''t specialize in security you might find it hard to protect yourself from becoming the next victim. In this talk, you''ll learn the most common reasons that some systems get hacked and what practical measures you can take as a developer to keep your apps safe.', '10 Mistakes Hackers Want You to Make', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('URM-8627', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'In September 2017 the long-awaited release of Java 9 gave us a new module system in Java. It also kick-started the release-train of frequent Java releases, with Java 11 being the first long-term supported Java version poised to take modules into the mainstream. So what has happened since the introduction of the module system?

This talk will provide an overview adoption of modules in open-source libraries, IDEs, build tools, and so on. It will also feature tools that have emerged to make working with modules easier. Expect an honest overview of the current state of modules in Java, with lots of demos to show what''s possible. After this talk you can start developing your own modular Java application without hesitation!', 'Java Modularity: the Year After', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JEV-7759', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', 'Most APIs built today are considered REST APIs these days, when in fact they merely exchange data via HTTP and JSON. At the same time, systems almost never act autonomously but rather live alongside others. In that context, being able to evolve an API becomes a crucial aspect in its design and the only knee-jerk, but often problematic reaction usually is: versioning.

The talk takes a step back and looks at the architectural context APIs live in and outlines the drawbacks that result from ignoring crucial parts of REST. It discusses internal VS. external APIs, whether that distinction is useful in the first place, the impact of Domain-Driven Design and how to design and specify APIs and their clients to optimize for evolvability so that changes in an API don‚Äôt break clients.', 'REST beyond the obvious  - API design for ever evolving systems', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FEF-2774', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'Do you ever find yourself being "just another coding machine"? Pre-written user stories, pizzas and fizzy drinks in, code out - but the truth is that every single one of us has so much more to offer than this. Escaping this mentality, and bringing our full set of talents and creativity to the table, can make a great impact, be immensely fulfilling, and really launch us to new possibilities in our careers.

There are also very real opportunities and threats in the modern job market - if all we offer is code, then there are ever more people who will do this for less and less money. We need to get ahead of the game, and go beyond this minimum, or risk obsolescence.

This will mean going outside your comfort zone, and thinking differently - but the pay-off can be huge! I want to share some my experiences from making this transition, and some ideas for how to make the first steps in breaking down the preconceptions and barriers, and starting the journey. ', 'Programmers: Be more than your code!', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YNH-3520', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'As developers we are committed to a life of learning. With all the new technologies and paradigms changing so fast, more conferences and meetups than you can attend, other people doing cool stuff, you can feel overwhelmed and have a fear of missing out. You are not alone! We''ll dive into what motivates us and walk through ways of dealing with this and give direction to expanding our knowledge and skills.', '4 Ways to deal with Fear Of Missing Out', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('LPH-4584', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'Reactive programming offers Java developers a way to build message-driven, elastic, resilient, and responsive services‚Ä¶‚Äãyet many Java developers don‚Äôt know where to begin. The Reactive Streams initiative provides a baseline and Project Reactor provides a great way to become immediately productive, leveraging reactive capabilities from end to end. Whether you‚Äôre coming from a Spring MVC environment or a functional perspective, Reactor empowers you to spin up fully reactive Spring Boot 2 applications quickly and efficiently.

In this talk, the presenter dives into the net-new Netty-based web runtime and shows you how to:

* integrate easily with existing Spring-stack technologies
* easily transition from blocking to reactive applications & systems
* define your API in an imperative style and functionally, reaping all benefits both ways
* leverage powerful new testing mechanisms to make code better and life easier

The presenter will code all examples live and in real time. This is not an abstract discussion, come to gain real, practical knowledge!', 'Full-stack Reactive Java with Project Reactor & Spring Boot 2', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZQM-8903', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'Most of the Java applications are written in Java 8 nowadays and people are looking around to upgrade to Java 11 or even migrating to Kotlin.  Both are promoted as the new way to go and both have their own strengths. Upgrading to Java 11 might be an obvious next safe step to do and probably the most used frameworks will be Java 11 compliant soon. But what if you could migrate to Kotlin with the same effort? This would bring you additional advantages like: data class, very concise list manipulations, extension functions and even more to get you‚Äôre code more readable and maintainable.
Considering the Kotlin migration, the first questions that pop up are: What are the wise steps to take and where to start? Some experiences and thoughts answering these questions will be shared during this live coding session.', 'From Java to Kotlin: the adventures of a smooth migration', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HGA-5787', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'Any country that has "Democratic" in its official name ISN''T democratic. Any organisation that tells you that it is "doing Agile" ISN''T doing Agile. I noticed the first as I was growing up during the Cold War. The second truth I''ve discovered in the last few years working as a consultant for ThoughtWorks.

How do you teach Agile to a group of people who think they are already doing Agile? How do you explain to a business that thinks that "Agile doesn''t work" that the reason why it isn''t working is because IT has to change as well as the technology group? How do you even begin to do this when everybody you meet thinks that they''ve "tried this all before, it just doesn''t work here!"

We''ve worked under these conditions and we''ve had success in effecting real change both at ground level and throughout the wider business. In this talk I''ll share some techniques that we''ve successfully used.', 'Agile is a Dirty Word', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YZA-8319', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', 'When Java 8 was first introduced, it revolutionized the way Java applications were written by providing the core constructs for asynchronous programming and handling data streams. With Java 9, 10, and 11, these capabilities were extended to the level that allows us to write truly modern, reactive applications with the JDK.

In this live-coding session, we explore JDK 9-11 features enabling all the aspects of reactive programming - updates to the Stream and CompletableFuture APIs, Reactive Streams publish-subscribe framework, HTTP/2 client, and more.', 'Exploring reactive programming in Java', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YRA-9715', '2018-11-16 10:20:00.000000000', '09:30', '2018-11-16 09:30:00.000000000', 'Bring your favorite questions about the Java Platform and the Java Development Kit ‚Äî past, present, or future ‚Äî to this open Q&A session with key architects from Oracle''s Java team.', 'Ask the Java Architects', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('BOZ-9681', '2018-11-16 11:25:00.000000000', '10:35', '2018-11-16 10:35:00.000000000', 'After leading 2 projects making heavy use of Lambdas and Streams, counseling many others at IBM, and teaching **hundreds** of developers at University and as an Independent Trainer, Victor will prove several best practices, patterns and anti-patterns he distilled over the years. All via a series of live coding exercises, like you''ve probably never saw in your life!

You will hear about: Bloated Lambdas, A Happy Predicate, Stream Wrecks, How to Kill The Biggest Bug, Monads, Passing-a-block, The Loan Pattern, and 5 Ways to Implement Type-Specific Logic.
Of course, as a **Clean Code Maniac**, Victor will always strive for maintainable, readable, elegant code. So you''ll see a lot of refactoring.

PS: You know, some Joe will maintain your Java8 code at some point. So let''s just hope Joe would be a nice safe guy...
', 'Functional Programming Patterns with Java8', '11:25', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CFW-9146', '2018-11-16 12:30:00.000000000', '11:40', '2018-11-16 11:40:00.000000000', 'Since last Devoxx, we''ve seen two more major versions of the  JDK!  What''s changed in the last year, and what''s coming down the road? 
Join Java Language Architect Brian Goetz in a whirlwind tour of just some of the features coming to Java next.', 'Java Futures, Devoxx 2018 Edition', '12:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HTS-1046', '2018-11-12 12:30:00.000000000', '09:30', '2018-11-12 09:30:00.000000000', 'Everybody seems to be rocking with Kubernetes! Even your favorite repos at GitHub are running on top of it. Don''t be the last developer/architect to board this bullet train. Come and learn a LOT in this session about Kubernetes - from getting started to staying productive.

We will provide numerous practical tips & techniques that will take you from cloud newbie to cloud native.

- Installation & Getting Started
- Building & Running Linux container Images 
- Your JVM goes boom - OOMKilled in Kubernetes
- Peering inside your container
- Streaming logs
- IDEs and Debugging
- Load-balancing and service discovery 
- Configuration management
- Blue/green and Canary deployments
- Istio Service Mesh for advanced microservices architecture
', '9 Steps to Awesome with Kubernetes', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ASZ-5494', '2018-11-12 16:30:00.000000000', '13:30', '2018-11-12 13:30:00.000000000', 'From function source code to running in Kubernetes in 5 minutes. That''s the power some of the latest open source projects can bring to your fingertips. This perceived simplicity actually hides layers of abstractions underneath. In this deep dive, we''ll explore all the technology behind the scenes, from Kubernetes, Istio, Knative, to riff and Spring Cloud function.

We''ll explore how Istio and Knative extend Kubernetes via Custom Resource Definitions to provide support for higher level developer concerns such as microservices autoscaling, routing across revisions of an application, and a unified eventing bus to compose event-driven workloads. Building on top of this, we''ll take a look at how riff has been replatformed to run on top of Knative, while preserving its scale-on-demand Function as a Service ease of use. Finally, to tie the platform from top to bottom, we''ll dive into Spring Cloud Function to see how to use Function interface to create a function that can process both synchronous HTTP requests as well as event-based messages using riff and Knative.', 'Beyond Kubernetes - Managing Applications and Functions with Knative, riff, and Spring Cloud Functions', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('UVN-2568', '2018-11-12 17:15:00.000000000', '16:45', '2018-11-12 16:45:00.000000000', 'With great distribution comes also great responsibility. The usage of multiple (micro-)services increases the risk of losing the overview of traceability of errors and lagging performance. A well-setup ELK stack comes in handy to keep more specific track of issues occurring to your services.

But what if we want to find a specific trace concerning several services and want to know the performance of each service? With the help of Sleuth and Zipkin, we have some helpful instrumentation tools which can provide a helping hand in tracing down slow performance issues.
In this session, we will explore how we can setup Sleuth into your Spring Boot services and use it into your logging monitoring to add some extra overview in your services. Next, we will use Zipkin to find the culprit which is slowing down our services.

Further, we will find out where we can add extra settings in our setup, to improve the combination of logging & monitoring even more and make it even possibly useful for complex integration tests.
After this session you will know how to use Sleuth and Zipkin to enhance your insights in the performance of your services.', 'Tracing performance of your service calls with some help of Sleuth, Zipkin & ELK', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RYF-0932', '2018-11-12 18:00:00.000000000', '17:30', '2018-11-12 17:30:00.000000000', 'Server-less architectures where as a developer you deploy functions that are fully managed by the Cloud environment and are executed in ephemeral processes require a unique approach.

Traditional frameworks like Grails and Spring are not really suitable since low memory consumption and fast startup time are critical and the Function as a Service (FaaS) server will typically spin up your function for a period using a cold start and then keep it warm.

This session introduces Micronaut‚Äôs compile-time approach: fast startup time and low-memory footprint which make it a great candidate for using as a framework for developing functions. In fact, Micronaut features dedicated support for developing and deploying functions to AWS Lambda and any FaaS system that supports running functions as containers (such as OpenFaaS, Rift, or Fn).
', 'Server-less functions with Micronaut', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GVB-7806', '2018-11-12 18:45:00.000000000', '18:15', '2018-11-12 18:15:00.000000000', 'Memory leaks are not always simple or easy to find. Heap dumps from production systems are often gigantic (4+ gigs) with millions of objects in memory. Simple spot checking with traditional tools is woefully inadequate in these situations, especially with real data. Leaks can be entire object graphs with enormous amounts of noise. This session will show you how to build custom tools using the Apache NetBeans Profiler/Heapwalker APIs. Using these APIs, you can read and analyze Java heaps programmatically to ask really hard questions. This gives you the power to analyze complex object graphs with tens of thousands of objects in seconds. ', 'Exploring Java Heap Dumps', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CNS-4429', '2018-11-13 12:30:00.000000000', '09:30', '2018-11-13 09:30:00.000000000', 'Building secure microservices requires mastering a variety of patterns, protocols, frameworks, and technologies. This deep dive provides a holistic end-to-end view of how to secure microservices using industry standard protocols and Spring. The goal is to present how standards such as JWT, JWA, JWS, JWE, JWK, OAuth2, OpenID Connect, TLS can be combined to make writing secure microservices easy.

The deep dive will alternate between slides that explain the security standards and protocols and code walkthroughs/live coding showing how to apply the patterns and standards using Spring Security 5.1. We will demonstrate the following patterns and their implementations.

-   Web SSO Login   
-   Implementing OAuth2 resource servers
-   Implementing edge service gateways
-   Token Exchange in a microservice call chain
-   Token Relay in a microservice call chain
-   Integration with OpenID Connect / OAuth2 Servers
-   Features of Spring Security 5.1 that make it easier to secure microservices

We assume no prior experience with security standards or Spring Security. However, we assume that you are comfortable reading Java code and web development.', 'Implementing Microservices Security Patterns & Protocols with Spring Deep Dive', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VND-4382', '2018-11-13 16:30:00.000000000', '13:30', '2018-11-13 13:30:00.000000000', 'When moving to client-side technologies, TypeScript is a natural fit for everyone coming from strongly typed languages. 
Being a true superset of JavaScript, TypeScript adds a powerful type system and language features to help developers from other languages stay alert in a world where "undefined is not a function". 
In this three hour deep dive session, you will learn TypeScript from the ground up.

The course covers in depth language features, tooling and real world examples. After this deep dive course you will be able to do the following:

* Use TypeScript in your regular JavaScript files, without any new syntax at all
* Apply TypeScript''s language features, from simple string types to Decorators and Generics
* Set up TypeScript with Webpack
* Set up tooling to check your code for errors
* Set up the perfect TypeScript IDE/Editor
* Create union, intersection, index, mapped and conditional types for advanced type checks and tooling support
* Use TypeScript''s type inference for React and Angular

Join us to make the web world a (type-) safer place!', 'TypeScript: Complete', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PWQ-4888', '2018-11-13 17:15:00.000000000', '16:45', '2018-11-13 16:45:00.000000000', 'The release train of Java is now a fact: we can expect a new release every six month. This also implies there will be a moment you have to migrate from Java 8 to a newer version to keep up with the security patches. How does this effect your Maven projects?
One year after the release of Java 9 we''ve seen quite a lot of projects being able to move to a more recent version of Java. This session will guide you through the basics of such a migration.', 'Keeping up with Java made easy with Apache Maven', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QXC-3597', '2018-11-13 18:00:00.000000000', '17:30', '2018-11-13 17:30:00.000000000', 'Oracle Java Mission Control with Java Flight Recorder is a tool to continuously collect low level and detailed runtime information directly from JVM. JMC delivers advanced unobtrusive Java monitoring and management, suitable for use both in development and production environments. This presentation gives an introduction to main components in the toolchain, how to use JMC and JFR to monitor, manage, profile and diagnose your applications with given and your custom build functionalities. Main focus of this presentation will be new features that came with version 6.0 (first one for Java 9) as well as what came new for Java 10 and Java 11.', 'Java Mission Control 6.0+', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('XXT-8012', '2018-11-13 18:45:00.000000000', '18:15', '2018-11-13 18:15:00.000000000', 'Want to give your users a great mobile app, but you can‚Äôt hire developers for 3 platforms? Or you have a native app, but can‚Äôt seem to  convince enough of your userbase to install your app? With the latest web platform features, the web is becoming a realistic alternative to native apps. A Progressive Web App lives on the homescreen, works offline and can access most of the device‚Äôs capabilities.

This live coding session demonstrates that building a Progressive Web App does not have to take much time. Dealing with service workers, offline browsing and cache invalidation might seem intimidating at first, but with right tooling, you can get a first iteration released in a day. Next iterations can provide more functionality.', 'Turn your site into a Progressive Web App in a day', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('BGE-3228', '2018-11-14 10:00:00.000000000', '09:30', '2018-11-14 09:30:00.000000000', 'Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we''ll highlight several applications we''re using to run Devoxx Belgium.', 'Welcome - Overflow', '10:00', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VOS-4455', '2018-11-14 10:30:00.000000000', '10:00', '2018-11-14 10:00:00.000000000', 'In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they‚Äôre not as scary as you may think, and many developers have already adjusted to them.', 'Java in 2018: Change is the Only Constant - Overflow', '10:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZRG-7073', '2018-11-14 11:30:00.000000000', '10:30', '2018-11-14 10:30:00.000000000', 'We''ve, as humans, been programming only for the past few decades. We''ve come a long way in some ways, yet we''ve advanced only marginally on other fronts. We hear folks tell us, ''oh, things change so fast'' and yet we''ve changed only a little in the way we develop software. Imagine where we''d be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We''re poised for the next big change. In this presentation we''ll learn about the perfect storms that''s influencing that change and the directions that the programming field is evolving in.', 'Spearheading the future of programming - Overflow', '11:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SAN-6621', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'Building a flexible, scalable, real-time data architecture for the enterprise is no simple matter. Rarely does one single technology suit for all requirements, and frequently many different teams are involved which drives solutions with varying levels of [dis-]integration.

Apache Kafka is a streaming platform that acts as the ''data backbone'' for the enterprise. By streaming events into Kafka as they occur, they can be used in any dependent system, in real time or batch. Search replicas, NoSQL stores, caches, graph databases - these all have their place in solving specific requirements, and all need to be fed with data! Kafka is the enabling platform that supports the event-driven, high performance, scalable integration of data throughout the enterprise, whilst also providing the messaging capabilities to drive applications directly.

This talk will discuss the role and benefits of Kafka in an architecture, the Kafka ecosystem, and several design patterns used to address specific challenges that organisations face with managing their flows and availability of data.', 'Embrace the Anarchy : Apache Kafka‚Äôs Role in Modern Data Architectures', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('LND-1450', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'The Spring Framework originated from a book in 2002, becoming the most widely used application framework in the entire Java ecosystem within a few years... and holding that position to this day. This talk illustrates Spring''s evolution over 15 years, adapting not only to five new JDK generations but also to ever-changing requirements in modern enterprise architectures.', '15 Years of Spring (in 15 Minutes)', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('DBF-1594', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', 'by automating the versioning of your project using [jgitver](https://github.com/jgitver/jgitver) you can gain:  

- automatic versioning from git history
- clean history with no unnecessary commit (zero _pom.xml_ or _build.gradle_ modifications for changing project version)
- explicit versioning in branches
- compatibility with CI environments

say _''bye-bye''_ to maven-release and the like and just keep things as simple as `tag & deploy`

Use now [jgitver](https://github.com/jgitver/jgitver) integrated to your build using the [maven](https://github.com/jgitver/jgitver-maven-plugin) or [gradle](https://github.com/jgitver/gradle-jgitver-plugin) plugin.', 'project versioning like a git', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RUG-3889', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'IntelliJ IDEA is designed to help developers to be really productive.  It aims to help you "stay in the flow", to automatically do as much as possible while also staying out of your way.  To learn how to make the most of this, sometimes we need to see how others use the tool to understand what is possible and how it helps.

In this session, Trisha will demonstrate how key features of IntelliJ IDEA help you to develop code more effectively.  We''ll look at some simple navigation tricks to help us to get around the IDE faster; we''ll use code generation and live templates to create code more easily; we''ll see how inspections and intentions, refactoring and code analysis can help to improve the code we''ve written; and we''ll step through some testing and debugging scenarios to understand how these tools help us to create quality code.', 'Be More Productive With IntelliJ IDEA', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IUH-5593', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'How to secure microservices? Eclipse MicroProfile JWT (https://microprofile.io/) is the answer. MicroProfile JWT designed a mechanism to propagate the security state from clients to services or event services to services by using security tokens. This session will give you a quick overview on the MicroProfile JWT design, followed by a live demo of microservices communication by passing on the JSON web token, running on Open Liberty (https://openliberty.io/). Come to this session to understand the technology and learn how to use it.', 'Secure microservices made easy with MicroProfile JWT', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('UNX-4400', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'Micro-services are the new black; everyone is using them. Alas, when your system is composed of many micro-services, testing becomes more challenging. The straight-forward approach for E2E testing no longer suffices and for integration tests it doesn‚Äôt even exist. A better way to test in this kind of an environment would be to work with a test kit of the micro-service you are interacting with.
By the end of this talk, you will learn how to create a test-kit that covers your micro-service. Testing this way will grant you a much higher level of confidence, and will portray a more accurate picture of your assumptions vs. reality. Overall it will make any integration between micro-services easier, thus benefit your colleagues and make your company progress faster.', 'A Better Approach for Testing Micro-Services ‚Äì Introducing: Test Kits in Practice', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('DOW-5149', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'Object Oriented Programming dominated the software development landscape in the last decade of XX century and in the first of XXI. In more recent years, even as a consequence of the advent of multicore CPUs, Functional Programming and its principles started attracting more interest, becoming at least equally relevant in our industry. The biggest mistake made by programmers nowadays is considering OOP and FP as two mutually exclusive paradigms. This misconception is also the product of a misunderstanding about what OOP actually means and its founding principles. The biggest pros of OOP are polymorphism and encapsulation while FP strengths are immutabilty and its declarative style, but these features are orthogonal and there''s no reason why they cannot coexist in the same program. The final purpose of this talk is twofold: debunking the misconceptions on OOP and showing that OOP and FP are actually complementary techniques that can happily coexist in the same codebase. It is the duty of experienced developers to fill their toolbox with both OOP and FP tools and to know from time to time how to choose and employ the tool that is the best fit for the problem at hand.', 'OOP vÃ∂sÃ∂ and FP', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GBL-3820', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'Java 10 introduced a feature called Local Variable Type Inference, which lets programmers declare local variables using ''var'' instead of using an explicit type. This feature enables one to write code that is more concise and more readable. However, it''s also possible for this feature to be misused, obfuscating code instead of making it more readable. The Java Team has published a set of style guidelines that help direct programmers toward uses of ''var'' that improve code quality and that help them avoid uses that detract from code quality. This session gives an overview of the new ''var'' feature and describes these style rules. The presentation is liberally supplemented with code examples of both good uses and misuses of ''var''.', 'Var with Style: Local Variable Type Inference in Java 10', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RIK-1487', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'In the Java ecosystem, we have historically been enamored by the concept of the "Application Server," the runtime engine that not only gave us portable APIs (e.g. JMS, JAX-RS, JSF, EJB) but also gave us critical runtime infrastructure for things like farm deployments, configuration, load-balancing, fail-over, distributed management and monitoring.  

In this session, we are going to demonstrate how Kubernetes and OpenShift give you the critical runtime infrastructure you need for JVM-based applications whether they be Java EE, Spring, MicroProfile, Vert.x, Kotlin, etc. because in a cloud-native world, your APIs can be whatever best fit your project''s requirements.', 'Kubernetes: Your Next Java Application Server', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OAT-4417', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', 'Many JVM languages promote "less boilerplate code" as one of their selling points. Even updates to Java in recent years have removed unnecessary syntax. While this is clearly meant to be a Good Thing, many of us - particularly if we''ve been writing Java for a long time - think "so what?". Our IDEs can generate code, and our brains get used to ignoring the stuff that doesn''t matter. 

Is the removal of extraneous code from the syntax of a language necessary, or just a gimmick? How does it impact our ability to write and read code? 

In this talk, Trisha will explore common coding scenarios using Java and Kotlin. We''ll see what''s important for developers to write (and, more importantly, read) and what can be removed. We''ll also see how Java has evolved to improve our productivity as producers and consumers of code, and why understanding new languages and staying up to date with the features of Java can ultimately make your life easier.', 'Is boilerplate code really so bad?', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('DCX-1230', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'In this session I would like to show how to run a Spring Boot application in a jshell console. We take a full advantage that Spring Boot contains all its dependencies. Not only that, with a little modification, Jshell become a powerful testing tool for Spring boot .', 'How to run Spring Boot with Jshell (and take advantage on it)', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WOD-6376', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'In this talk, we''ll see how Spring WebFlux can be combined with modern HTML APIs to build reactive applications. We''ll also have a quick look into the eventing service of Couchbase, and see how it can fit into the picture.', 'Reactive Web applications with Spring WebFlux & Couchbase', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SRU-1991', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'You built your system, you deployed it, you rolled it up in production. Is it the end? No, it‚Äôs just a beginning. The life of your system just started. Just like a baby it will grow, evolve and wake you up in the middle of the night. 

Usually at this point you start thinking about fault tolerance and error handling. Fault-tolerance concepts sound simple: modern frameworks promise to effortlessly solve it for you. But what is hiding behind the simplicity? Is there anything else that may hurt you? Let‚Äôs take a peek, and find out how to design and build truly fault tolerant Java systems. 

Let‚Äôs make it real by trying failure scenarios against a live system, watching it recover in real-time - and then review the recipes (with gRPC and REST examples) that you can use right away to make YOUR code more resilient and YOUR system more robust.', 'Break me if you can: practical guide to building fault-tolerant systems (with examples from REST and gRPC polyglot stacks)', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('UNS-7465', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'We all want to consistently ship quality software. One of the best ways to do that is by end-to-end (E2E) testing our code as it simulates the real actions of our beloved users. Let‚Äôs be frank though, E2E testing is notoriously time-consuming, expensive, slow, and often flaky. Unfortunately, these issues lead to developers doing very little to no E2E testing, and taking solace in a plethora of unit-tests that cannot fully test the intended experience of users.

We can do better. We should do better. We will do better.

We‚Äôll explore modern tools and libraries, such as Cypress, that enable us to easily and beautifully write flake-free, reliable, deterministic E2E tests for our web applications. E2E tests will give us confidence in the software we ship down the wire.', 'Next-Generation Web Application End-to-End Testing', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EHM-4720', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'Kubernetes and Istio provide a great foundation for orchestrating, monitoring, and scaling your apps. They''re open source and work great in your data center or in any major cloud. Meanwhile, the serverless development model has empowered devs to build software faster than ever by eliminating concerns like scaling, networking, load balancing, OS patching, etc.

Come learn how you can combine the power of Kubernetes with the ease of use of serverless to create new, powerful and flexible development experiences.
', 'Bring serverless to Kubernetes with new open source tools', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ANX-9706', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', '_"Every microservice get''s its own database and then use Kafka"_ is a typical and naive advise, when reading about eventsourcing. If you approach this architectural style this way, you will probably have a really awful time ahead.

Eventsourcing and CQRS are two very useful and popular patterns when dealing with data and microservices. We often find in our customer''s projects, that both have a severe impact on your future options and the maintainability of your architecture. Presentations and articles on both topics are often superficial and do not tackle real world problems like security and compliance requirements.

This combination of half-knowledge and technical confusion leads to many projects that either refactor back to a ''non-eventsourced'' architecture or reduce eventsourcing to a message queue.

In this talk, I will summarize our experience while applying eventsourcing and CQRS accros multiple large financial and insurance companies over the last 5 years. We will cover the _Good_, the _Not so Good_, and the _''oh my god...all abandon ships!''_ when doing eventsourcing in the real world...and see how we solved these issues.', 'Event Sourcing - You are doing it wrong', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZLX-5595', '2018-11-15 19:50:00.000000000', '18:50', '2018-11-15 18:50:00.000000000', 'This talk is about the fictitious divisions we invent, and how they harm the progress of our industry.  In particular, we''ll look at the supposed tension between Functional Programming and Object-Oriented Programming, and hopefully see that the tension is all in our heads.', 'FP vs OOP: Choose Two', '19:50', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RSV-7655', '2018-11-16 10:20:00.000000000', '09:30', '2018-11-16 09:30:00.000000000', 'If WhatsApp can do it, why not you? 
In this talk, we present a practical architecture for end-to-end encrypted (E2EE) apps, its benefits, consequences and the main pitfalls to avoid. We will use the open source DataPeps SDK to automate the implementation of cryptography and apply DataPeps to secure a sample note-taking app with the implementation of E2EE. In doing so, we will not change  the user experience the slightest. The Note app we chose has a backend implemented in Go and a frontend implemented in JavaScript, but similar code can be used with other programming languages. Fifty minutes is all we need to detail how to create a secure session in which data is automatically encrypted and decrypted on the client-side, and use that session to protect individual notes and share notes between different users.
', 'Implement End-to-End Encryption in Your App in Just 50 Minutes', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('MVM-1794', '2018-11-16 11:25:00.000000000', '10:35', '2018-11-16 10:35:00.000000000', 'Working with complex systems means that even well written code can behave in unexpected ways, leading to outages and critical issues. Kubernetes allows you to easily rollout new code and quickly revert to safe, stable releases when issues are identified. But often the damage done in the short period between deploy and rollback is significant.

In this session, we‚Äôll show you how to limit the effect of unforeseen issues using canary deploys with Istio. We‚Äôll also cover ways to better monitor your applications in Kubernetes to help you spot potential problems before they affect your entire customer base.
', 'Better Canary Deploys with Kubernetes and Istio', '11:25', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('DPN-3235', '2018-11-16 12:30:00.000000000', '11:40', '2018-11-16 11:40:00.000000000', 'The Z Garbage Collector (ZGC) is a new JDK garbage collector designed for low latency and high scalability.  For an industry-standard latency-sensitive benchmark it achieves throughput over 36% higher than the existing JDK collectors while never exceeding a maximum pause time of two milliseconds.  In this session we‚Äôll explain how ZGC achieves this performance, and show how to use it.', 'The Z Garbage Collector', '12:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RSA-5914', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'Let Pivotal and AxonIQ take you on a journey into Axon Trader. Axon Trader is a new open-source reference architecture that demonstrates how to use Spring, Axon and Pivotal Cloud Foundry to deliver evolutionary microservice applications to prod in minutes.', 'Pivotal and AxonIQ - Quickstart your Event Driven Architecture', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZVY-0180', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'Your documentation gives users a first impression of your software; its ‚Äúcurb appeal‚Äù. How do you create it? How do you manage it? How do you publish it? What about versions?

Despite there being countless site generators to choose from, few are well-suited for large-scale documentation sites, and none designed exclusively for AsciiDoc. Writers need the ability to create and manage documentation sites without needing deep knowledge of the web stack. Software teams need a workflow to collaborate on multiple versions of documentation that span departments. By creating Antora, we set out to fill these gaps. I‚Äôll explain how we architected Antora and how it changes the way we think about producing documentation.

Antora aggregates versioned content from a variety of repositories and branches that adhere to a standard project structure. It then converts that content and feeds it to a UI, which is provided by a separate software component. Out comes an offline-first site that can be published and viewed anywhere, even locally.

This talk will give you an understanding of how Antora enables software teams to effectively create, manage, and publish multi-version documentation sites.', 'Antora: Documentation Sites for Software Teams', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HGK-0737', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', 'Riff is for functions. A new and upcoming *Function as a Service* offering, created and developed by Pivotal, and completely open source.
It builds on Kubernetes, Zookeeper and Kafka and provides an easy way to write functions, in any language, and execute, auto-scale and chain functions together.
One of the elegant and most beautiful example of a function is the Mandelbrot fractal, which can generate stunning images with incredible detail.
This quickie consists of an introduction of Riff in combination with Spring Cloud Function and ends with a cool demo of infinite detail.', 'Visualizing Mandelbrot fractals using Riff and Spring Cloud Function', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IDN-0435', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'The Internet of Drums is a magical device that translates 1''s and 0''s to BADUMs and TISHes. IoT has never been so loud and exciting.

During this talk, the audience can control the drum machine  with their smartphone, while they explore its design and execution in detail. What''s in the box? What''s in the cloud? How do they communicate? How do I make one myself?

Because that''s the best part: you can build the whole thing yourself! The Internet of Drums is totally open source: from laser-cut case design to backend software. Instructions included, pull requests welcome.', 'The Internet of Drums', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WAA-7208', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'Vaadin Flow is a next-generation web framework on the JVM. It lets you build UIs out of Web Components and HTML tags in plain Java or other JVM languages or use HTML templates to define your UI. Flow handles routing, data binding, and validation. It syncronizes your data model automatically using a WebSocket channel between your server and the browser. Together with Spring Boot and Project Reactor it provides probably the easiest way to build a web based chat application.

In this presentation, you''ll get an introduction to the core concepts in Vaadin through a live coding demo. We''ll build a small Vaadin app from scratch using Spring Boot. ', 'WebSocket based chat app in 10 minutes using Spring Boot, Reactor and Vaadin', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('LWB-1541', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'Hardness at work is defined by marked physical constraints, an aggressive environment and the rhythms of work.

We decided to make objective measurements of these factors via different types of sensors (accelerometer, gyroscope, temperature, ...) in order to obtain an image of the gestures and the environment of the worker by means of a data vizualisation tools.

We will begin by presenting the selected sensors then technologies (Arduino, MQTT, Node-Red) implemented for the collection of data on the environment but also on the positioning of the worker.

In a second part, we will discuss the exploitation of these measures using a TimeSeries InfluxDB database and Dashboard Grafana to visualize and analyze the physical conditions of work as well as the type and repetitiveness of gestures related to this work.
', 'Connected sensors and data visualization to measure hardness at work', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IRG-2483', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'Integrating your Android app with the Google Assistant platform is a way to differentiate it from the other 3 millions apps that are available on Google Play Store.

Build a companion Action on Google is a fast and simple way to increase your Android app''s reach by supporting the different surfaces covered by Google Assistant, allowing your app to offer a new entry point without the users needing to install it. Also is possible to deliver premium content the user bought in your app to all surfaces covered by the Google Assistant.

On this talk we will see:
‚ãÖ‚ãÖ* How to add the app actions to your Android app
‚ãÖ‚ãÖ* Ways to send the user from Google Assistant to your app, increasing the engagement
‚ãÖ‚ãÖ* Honor user''s purchases on all Google Assistant surfaces', 'Integrating your Android app with Actions on Google for the Google Assistant', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZOL-0451', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'This is a breakdown of how the open source VoxxedDays app works: networking, local storage, and UI. It touches on which parts of the app were straightforward to build with Flutter, which aspects presented challenges, and the rationale for important design decisions such as which state management approach to take and how to handle deserialization of data from the VoxxedDays API.', 'Building the VoxxedDays App with Flutter ', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PKK-6948', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'When we look at the world our brain instantly turns the images we see into information, intuition and feeling. It does so with an enormous computational effort, using a network with overwhelming, unexplored architecture. We are not even close to create a machine of comparable cababilities, but step by step, improving both the hardware and algorithmic approach, we can make machine understand images they see. 
In this talk you will learn how to design and develop such a network. We will go from the basic machine learning concepts, through the advanced practical tips, up to using the most-recent state-of-the art architectures in practice. You will see examples on how insanely complicated problems can be solved using a portable computer. And in the meanwhile you will understand what is going on, why new layers are added and why new concept have to be introduced.
While this presentation briefly introduces all the basic concepts, as we move on it quickly touches advanced and expert areas of the field.', 'Deep Learning in Computer Vision', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SUF-5823', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', 'Serverless Functions are hot and developer and corporate interest is exploding! But let‚Äôs face it, although Java is one of the most popular programming languages in the world it isn‚Äôt the most popular language for writing functions‚Äîat least not yet. According to James Governor, ‚ÄúWhen Web Companies Grow Up They Turn into Java shops‚Äù so as functions become mainstream will Java become the dominant language for authoring functions? Can it be?

In this session we‚Äôll examine the challenges to using Java for functions and the latest features provided by the Java platform that address them. We‚Äôll also dig into the open source Fn Project‚Äôs unparalleled Java support which makes it possible to build, test, and scale out Java-based functions applications.', 'Serverless Java: Challenges and Triumphs', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OHH-8000', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'Have you ever wondered why your presentation looks exactly the same as every sleep-inducing one you have ever seen? Most speakers wish to deliver a presentation that keeps the audience engaged from beginning to end. The key to accomplishing this resides outside of whichever tool you use. In this talk, we‚Äôll look at five things you can do to improve your next presentation. 

The ideas we will present are tool-agnostic. Every great presentation you have ever seen incorporates these five ideas. You will walk away from the talk with a new way to look at presentations and new tools in your presenter arsenal. 
', 'Presentation 2.0: Five ways to engage your audience!', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NUM-1584', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'This session will explore how Java development has been brought into the open over the past decade. Several Java developer efforts have brought open source development processes and new levels of transparency and participation into their communities. The Java Community Process (JCP) program celebrates twenty years of Java standards development in 2018. Since the initiation of efforts to expand the developer participation in the Java community, Java standards development is more open that it ever has been.', 'Bringing Java Into the Open', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OBY-2356', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'Building an Android library in the current times is way different than what it used to be earlier. Things have changed considerably and keeping up to date with them is a now a necessity than just some acquirable knowledge.

This session in a second part to the last year‚Äôs talk at Droidcon Berlin 2017 with the same title. In this session we will dive deeper into best practices and ways of architecting android libraries. You will get to learn about the common pitfalls and how to overcome them by using the right approach such as leveraging architecture components and making your android libraries lifecycle aware. We will also be covering how one can leverage Kotlin language when developing android libraries as well as information around API design and exploring the path to becoming a better Android Library Developer.

By the end of this session, you will be all set to build android libraries that scale and have API which contributes to developer happiness.', 'Things I wish I knew when I started building Android Libraries - Vol 2', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('KCR-4786', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'Together with other Java EE leaders, Oracle announced in 2017 that they will open source Java EE at the Eclipse Foundation under the name of Jakarta EE. With the creation of both Eclipse MicroProfile, Eclipse OpenJ9, and more projects, the Eclipse Foundation has become the place to be for Enterprise Java technologies.

It will really be a landscape change for you whether you''re a Java developer or architect, using Java EE full profile or the web profile or even Spring(Boot). All the Java EE technologies and processes become truly open source, including: 

* the reference implementations (Glassfish will be released as Eclipse GlassFish, Jersey as Eclipse Jersey...), 
* the Technology Compatibility Kits (TCK) and Compatibility Test Suites (CTS) will certify compliance of implementations (WildFly, OpenLiberty, TomEE, ...) against future Jakarta EE releases, 
* and the 40+ specifications will now be managed in the open, according to the Eclipse Specification Process.

Come and learn how you can join the community building the future of Cloud Native Java. ', 'Jakarta EE: The Future of Cloud Native Java is Open!', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VFH-6802', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'We all know a fast build makes for a happy developer. Unfortunately, as your project grows larger and more complex, its build will become slower if left unchecked. You‚Äôve updated to the latest Android Plugin, but you‚Äôre still waiting more than you like, what can you do? Recent Gradle releases give you new capabilities to greatly improve your build speed. This session discusses how you can : 

- Identify performance bottlenecks with build scans 
- Fix common problems, like slow configuration time, tasks running when they shouldn‚Äôt, and builds that don‚Äôt parallelize well
- Benefit from incremental annotation processing', 'Improving Android Build Performance', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QKC-0204', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', 'We use Scalable Vector Graphics (SVGs) every day, but how well do we really understand it? More often than not, we are merely scratching the surface of a large and complicated discipline. Most developers and designers don‚Äôt realize how powerful and useful SVGs are, you will be surprised at how deep the rabbit hole goes.', 'Down the SVG Rabbit Hole: Advanced SVG Effects & Optimized Workflow', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('UAH-5130', '2018-11-12 12:30:00.000000000', '09:30', '2018-11-12 09:30:00.000000000', 'You''ve heard about Gradle for a long time. Now you''re curious, but don''t know where to start. It is worth switching?

The objective of this session is to give you a strong introduction to Gradle, demonstrating that it''s both a modern and mature build tool. 

First and foremost: user interactions: any developer will have interaction with the build tool. We will show how to take advantage of the task based model of Gradle and how to get feedback from your builds as fast as possible.

We will then demonstrate the major advantages of Gradle:

* Conventions and base plugins
* Incrementality (tasks, builds)
* Advanced configuration
* Dependency management
* IDE integration

Last but not least, we will show how to setup a *distributed cache*, which allows to dramatically reduce build durations, both on CI and locally!

After this session, you will have all the prerequisites to understand what Gradle can provide to you, how its model differs from other build tool, how to improve your build times, or simply improve the quality of your software by defining a build and release process with high quality standards.', 'Switching to Gradle: maturity, performance, and pleasure!', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YFG-1152', '2018-11-12 16:30:00.000000000', '13:30', '2018-11-12 13:30:00.000000000', 'Today in our tutorial session using a case study technique we will have a brief description of Hyperledger Composer, its capabilities, and its role in the modeling and implementing a Blockchain application. Then a closer look at Hyperledger Fabric and a typical Blockchain solution Architecture. After that a description of the elements of a business network, role of channels, and how world state is maintained. Exploring An explanation of how consensus works, endorsement, and ordering work in Hyperledger Fabric operates. Then touch Hyperledger Composer and Hyperledger Fabric security. A description of the different possible deployment options of Blockchain solutions including local, on IBM Container Service, and IBM Blockchain Platform.', 'A journey to Build a Distributed Blockchain Application', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('MQB-9462', '2018-11-12 17:15:00.000000000', '16:45', '2018-11-12 16:45:00.000000000', 'How could we use **ElasticSearch**, Facebook''s machine learning framework **Prophet** and custom Python data mining framework to get rich ?
Let''s try to optimize crypto currency portfolio for long term investment using the biggest possible number of buzzword !', 'Crypto currency, data mining and machine learning, wining combo ?', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('AGU-8136', '2018-11-12 18:00:00.000000000', '17:30', '2018-11-12 17:30:00.000000000', 'Many times the task of a test automation person is to check that the content displayed on a web page is the expected one. That can mean either just the text, but also image attributes (like the source or the size), link attributes (like: label, URL it points to, whether it opens in a new tab), and so on. The classic approach testers use for such a task is to get these properties from the page with Selenium, then check them by using an assertion for each property. This leads to way too many assertions, and difficult to understand tests, without a clear meaning.
In this talk i will show a different approach for checking the contents of web pages, by modelling all the needed properties into Java objects. This way, comparison will be done between expected and actual objects, not each property one by one. This will lead to more meaningful and shorter tests, while also adding reusability and easy maintenance. ', 'Selenium Tests the Object Oriented Way', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ROJ-4211', '2018-11-12 18:45:00.000000000', '18:15', '2018-11-12 18:15:00.000000000', 'GraphQL SPQR is a simple-to-use library for rapid development of GraphQL APIs in Java. It does away with the model duplication and the ceremony inherent in the traditional approaches, and promises the fastest route to GraphQL, for both the new and legacy apps.', 'GraphQL SPQR: The fastest route to GraphQL', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SUV-8791', '2018-11-13 12:30:00.000000000', '09:30', '2018-11-13 09:30:00.000000000', 'JavaScript has come a long way in the past few years. If you''ve looked at JavaScript in the past and hated or feared it, you will learn from this session how JavaScript has transformed into an elegant and highly tolerable language with ES 6, ES 7, and ES 8 versions. You will learn about some of the amazing features of JavaScript that leads to elegant and fluent syntax to create concise code.', 'Rediscovering JavaScript', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PXQ-6368', '2018-11-13 16:30:00.000000000', '13:30', '2018-11-13 13:30:00.000000000', 'Neural Networks, Deep Learning: there''s not a week without a thunderous announcement claiming that Artificial Intelligence limits are once again pushed further.

Doesn''t that make you wonder what''s actually behind all that? Would you like to know how this all works and how we''ll end up having all of our jobs stolen by soulless machines?

Sure, but you''ve heard that this implies tons of matrix calculus, algebra that doesn''t always seem to be that linear, partial derivatives and, come on, if we chose programming rather than pursuing a PhD in Mathematics, we knew what we were doin''!

Okay, give me 3 hours and I will tell you, in very simple words, without any prior knowledge required, step by step baby, how neural networks work in real life, how we get them to learn very useful tricks such as how to differentiate (pun intended) cats from dogs or recognize traffic signs in real time, and how we use these networks in practice.

And we''ll see that, thanks to libraries such as TensorFlow or Keras, a few lines of code are enough to do wonders‚Ä¶

Ready?', 'From 0 to Deep Learning in 3 hours', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('BLA-3308', '2018-11-13 17:15:00.000000000', '16:45', '2018-11-13 16:45:00.000000000', 'Have you seen the latest updates for traditional RDBNS lately? It''s insane. They are all catching up and won''t be left out. While all NoSQL stores are proposing SQL, all RDMS are proposing top notch JSON support. And it does not stop there. 

Latest PostgreSQL version have added new scalability features like table partitioning, query parallelism, pub/sub framework, a new quorum system for data sync. They have also improved their window functions for better time series queryability.

And as it happens, we are using some of these new functionalities at Clever Cloud. In this talk I will showcase some of them to try to convince you that PostgreSQL is the new NoSQL.', 'PostgreSQL is the new NoSQL', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('MJD-6193', '2018-11-13 18:00:00.000000000', '17:30', '2018-11-13 17:30:00.000000000', 'Are you a hardware guru looking to build your connected device but not sure how to integrate them to Smart Home apis, or a code geek looking to integrate your software to existing hardware and smart home apis or you know nothing but still want to build an app running on Google Home.
This talk will cover all the APIs, live coding, all the tools to help your development and troubleshooting, as well as all the different ways to interact and integrate with Google Assistant! ', 'Home sÃ∂wÃ∂eÃ∂eÃ∂tÃ∂ Google Home: Build a smart(er) home!', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JHG-7125', '2018-11-13 18:45:00.000000000', '18:15', '2018-11-13 18:15:00.000000000', 'At its core, Helm was built to help with two things.

First, Helm wants to make it simple to share information about running apps and services inside of Kubernetes. When the community all share our charts, the Kubernetes community at large learns how best to work with Kubernetes. We share information and discover great ways of doing things. And we also make it easier for newcomers to get going. Helm is about growing Kubernetes.

Second, Helm wants to make it easier for teams to manage their Kubernetes manifest files. The Helm community created a tool that eases the process of collaborating on and keeping track of your team''s charts. Start with widely available charts, customize them to your team''s needs, and then store them in your own version control. Helm is about helping teams.

Kubernetes is a powerful platform. Helm was built to make it easy to manage the apps and services you deploy.

In this session, we''ll explore the history of Helm, how Helm is used today, share useful tips and tricks the community has developed, and how to get involved in the Helm community. We''ll also share some of the worst puns the Helm community has to offer.', 'Helm Yeah! - An Introduction to Helm', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GUV-9712', '2018-11-14 10:00:00.000000000', '09:30', '2018-11-14 09:30:00.000000000', 'Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we''ll highlight several applications we''re using to run Devoxx Belgium.', 'Welcome - Overflow', '10:00', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YEF-3619', '2018-11-14 10:30:00.000000000', '10:00', '2018-11-14 10:00:00.000000000', 'In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they‚Äôre not as scary as you may think, and many developers have already adjusted to them.', 'Java in 2018: Change is the Only Constant - Overflow', '10:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EBT-8493', '2018-11-14 11:30:00.000000000', '10:30', '2018-11-14 10:30:00.000000000', 'We''ve, as humans, been programming only for the past few decades. We''ve come a long way in some ways, yet we''ve advanced only marginally on other fronts. We hear folks tell us, ''oh, things change so fast'' and yet we''ve changed only a little in the way we develop software. Imagine where we''d be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We''re poised for the next big change. In this presentation we''ll learn about the perfect storms that''s influencing that change and the directions that the programming field is evolving in.', 'Spearheading the future of programming - Overflow', '11:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GOS-9302', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'Or why you should only write an eighth of the code.
You live and breathe http. Most of the things you do with a computer involve it. How many tiny little http-related utils have you already created? Is it time to stop? By no means, we all do it. I''d just like to encourage you to write the next one in Go. It''s a fun little language, which feels like a cross-breed between C (pointers!) and ruby (concise, powerful syntax). But how much?
Why, yet another language, but my perl/python/.. does all the things? Well, it does. But go has a few things that make it super sweet, is web-scale and real fun to use!
Or at least come and listen how did we get rid of 87% of our codebase in a day :-)', 'Go - one language you should try', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HIW-6563', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'Kubernetes is has become a very popular platform for running and managing your application in Docker containers. However, the basis Kubernetes YAML files are a bit cumbersome to work with. Helm is a tool which manages these deployments for you. It makes it easy to do versioning and templating of Kubernetes file. It also allows you to define dependencies between deployable components. This talk will give an introduction of Helm and discusses the most important features.', 'Optimising Kubernetes deployments with Helm', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EUU-0069', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', 'What do you think when somebody tells you they don''t know? Better stop wasting time? Not quite the expert you thought they were? Or perhaps you respect their honesty? Perhaps this opens the opportunity to explore the issue together and reach a better outcome without assumptions? 

What we can learn from those that admit they don''t know might surprise you. I''ll share some of the valuable insights I''ve gained from admitting there are things I didn''t know and being prepared to try things with an open mind. I have seen many newcomers excel because they''ve admitted they don''t know and many experienced people fall from refusing to admit the opposite. 

Having joined a team that had finally been given the much requested green light to restart a high budget high stakes project from the ground up, I saw first hand how fear of the unknown could stop a great team of great engineers dead in their tracks. I will share my experiences of how admitting we don''t know has freed us to try things without the fear of failure and, ultimately, delivered results we can all be proud of. ', 'Into the unknown: The power of admitting we don''t know... yet', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ASN-9274', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'Current application theory says that all responsibility for software should be pushed down to the actual DevOps-style team writing, delivering, and running the software. This leaves Enterprise Architect role in the dust, seemingly killing it off. In addition to this being disquieting to EAs out there who have steep mortgage payments and other expensive hobbies, it seems to drop out the original benefits of enterprise architecture, namely oversight of all IT-related activities to make sure things both don‚Äôt go wrong (e.g., with spending, poor tech choices, problematic integration, etc.) and that things, rather, go right.

I‚Äôve spoken with several EA teams over the past few years about the changing nature of how EAs can help in a DevOps- and cloud-native-driven culture. I‚Äôll share their experiences including what type of EA help is actually needed and helps organizations thrive.', 'Rethinking enterprise architecture for DevOps, agile, & cloud native organizations', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RUF-4827', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'Fast Data architectures provide an answer to the increasing need for the enterprise to process and analyze continuous streams of data, which helps accelerate decision making and enables faster responses to changing characteristics of their market. Apache Spark is a popular framework for data analytics. Its capabilities in the streaming domain are represented by two APIs: The low-level Spark Streaming and the more declarative Structured Streaming, which builds upon the recent advances in Spark SQL query optimization and code generation.

After a quick introduction to both APIs, we will discuss their virtues, capabilities and key differences:

- How to get started: ease of development.
- How to deal with time: both at the processing and event level
- How to deal with state: locally, distributed and its relation with time
- How to migrate: functional coding strategies
- How to do ML: machine learning capabilities

Using practical examples from actual applications, we will provide guidance on how to choose one or even combine both APIs to implement functional and resilient streaming pipelines.', 'Processing Fast Data with Apache Spark: The Tale of Two Streaming APIs', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WXO-3228', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'Project Loom‚Äôs mission is to make it easier to write, debug, profile and maintain concurrent applications under heavy load. Threads are a natural and convenient concurrency construct which is being supplanted by less convenient abstractions because their implementation as OS kernel threads is insufficient for meeting performance demands, and wasteful in computing resources that are particularly valuable in the cloud. Project Loom will introduce fibers as lightweight, efficient threads managed by the Java Virtual Machine, that let developers use the same simple abstraction but with significantly better performance and lower footprint. Fibers are implemented in the JDK libraries on top of continuations in the JVM. In this session we‚Äôll present the current status of the project, discuss implementation and design challenges, and show a demo.', 'Project Loom: Fibers and Continuations for Java', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GUL-0552', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'Microservices are everywhere. Everyone seems to be either going into that direction or is talking about doing so. But are they really the best choice for you?

Developers! Architects! Buckle up as we''re going to cut through the hype. Instead of going all-in on microservices or all-in on big ball of mud, we''ll introduce a third choice: the Majestic Modular Monolith! We''ll look at what it brings to the table, when it may be a good fit and how it compares to the other two approaches in terms of code organization, productivity, scalability and much more. We''ll look at how this can be designed and implemented in practice. Get ready. We won''t shy away from the hard questions.', 'Majestic Modular Monoliths', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QKX-9175', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'We all want to become high performing teams delivering real business value quickly! This talk will show you how you can go faster by automating:

* setting up your CI/CD so you can spin up new microservices in seconds
* packaging of your application as container images and helm charts so it can be deployed easily on any cluster
* automatic or manual promotion of your application through Testing, Staging and Production via GitOps
* using Preview environments to get fast feedback on code changes at Pull Request before you merge them and without blocking urgent bug fixes
* lots of feedback and metrics to help you improve

This talk will introduce you to the Jenkins X project which automates your CI/CD on any Kubernetes cluster. 

After this talk you should be able to develop at full speed with CI/CD in a cloud native way in any language on any cloud using kubernetes! Lets all go faster!
', 'Accelerate your CI/CD on Kubernetes with Jenkins X ', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('DTR-4199', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'Amazon Corretto is a no cost, multiplatform, production-ready distribution of the Open Java Development Kit (OpenJDK). Join Amazon engineers working closely on the project to learn more about the offering. After a brief introduction, we will open it up to questions from the audience.', 'Introducing Amazon Corretto', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HKL-0782', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', 'Kafka is an open-source distributed commit log addressing low latency, high throughput, scalability, fault-tolerance, and disk-based retention. It can be used to build tracking systems, messaging systems, high performance streaming platforms, real-time analysis, audit log‚Ä¶.you name it. In our case, it‚Äôs been used to build a scalable event-store and messaging platform that stores billions of messages.

In this talk, we‚Äôre taking a closer look at essential Kafka concepts such as partition rebalancing, offset management, replication, producer/broker request fetching, file segments, etc. to understand what makes Kafka so scalable, resilient, performant and fault tolerant. We will also touch upon Kafka transactions to know what they are and how to leverage them. Last but not the least we will highlight some potential pitfalls that one should watch out when going to production with Kafka.

', 'Demystifying Kafka', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('XCZ-7253', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'To embed a map and to interact with it, most developers think about GoogleMaps first. But there is a free alternative : Leaflet.

Leaflet is an open source JavaScript library that provides many capabilities.
During this talk, I will introduce this library to you and I will show its simplicity and usability with simple samples.', 'Leaflet: it‚Äôs time to leave GoogleMaps', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CON-1402', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'Coding just ''virtual'' software can get boring, it just lives ''inside the machine''. You start wondering how to let your code act on the real world (especially when your kids ask what the heck you are actually doing for a living). A smart home is nice for sure, but let''s think bigger and cooler: a digital adventure (escape) room for kids!

In this talk I will show you how I created a castle themed play room full of IoT and code that brings both me and my kids a lot of joy! I will go into the decoration of the room, the video and audio setup and how to combine it all into a scriptable interactive adventure. Come join me for fun and inspiration!', 'Create your own Digital Adventure Room', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ECS-4884', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'Behavioral Programming (BP) is a novel programming paradigm. Under BP, complex systems are composed of many simple threads of behavior, called b-threads. B-threads communicate with each other using a synchronized, event-based protocol. BP has many traits interesting for software engineers: it is highly modular, concurrent, and (after a while) intuitive. Unlike objects or functions, b-threads align well with business requirements. But most importantly, systems written in BP are *verifiable*. That is - it is possible to *formally prove they contain no bugs*.

The ability to formally verify critical parts of a system, rather than merely testing them, can transform the way we create software. Even a programs written in "scripting" languages, such as Javascript, can be proven reliable and be used in mission critical systems. In fact, we are currently building a satellite controller prototype using this paradigm. In Javascript.

This talk will introduce the principles of BP, and BPjs - an open-source toolset for running and verifying behavioral programs written in Javascript. Participants will learn about one possible future of Software Engineering, and how they can start using it today.', 'Rethinking Software Systems: A friendly introduction to Behavioral Programming', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PZF-7587', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'MicroProfile, RxJava, React.js - what else do you need to build lightweight but robust reactive systems efficiently with opensource tools? Maybe something for effective data processing and distributed persistence? You can have it too with Kafka and Hazelcast. Now let‚Äôs have a look at how to assemble all together in almost no time, using Payara Micro. You‚Äôll learn how to use a couple of simple tools to build a highly efficient, scalable and robust system that can be evolved continuously to meet rapidly changing needs and increasing loads.', 'Be reactive and micro with a MicroProfile stack', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SLG-9616', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'Kafka Streams is a flexible and powerful framework. The Domain Specific Language (DSL) is an obvious place from which to start, but not all requirements fit the DSL model.

Many people are unaware of the Processor API (PAPI) - or are intimidated by it because of sinks, sources, edges and stores - oh my! But most of the power of the PAPI can be leveraged, simply through the DSL `#process` method, which lets you attach the general building block `Processor` interface to your -easy to use- DSL topology, to combine the best of both worlds.

In this talk you‚Äôll get a look at the flexibility of the DSL‚Äôs process method and the possibilities it opens up. We‚Äôll use real world use-cases borne from extensive experience in the field with multiple customers to explore power of direct write access to the state stores and how to perform range sub-selects. We‚Äôll also see the options that punctuators bring to the table, as well as opportunities for major latency optimisations.

Key takeaways:

- Understanding of how to combine DSL and Processors
- Capabilities and benefits of Processors
- Real-world uses of Processors‚Ä®', 'Beyond the DSL‚ÄîUnlocking the power of Kafka Streams with the Processor API', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YXD-0794', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', 'While there are plenty of resources about writing awesome code, the same doesn''t quite exist for tests. So how do you write great unit tests? And how do you ensure failures are easy to fix? What are the best practices? And most importantly what are the pitfalls to look out for?

If you''re already comfortable writing tests, come level up your testing skills with deep insights into the "Why" and "How" of fundamental testing principles. You will learn:

- What three criteria make tests awesome
- What to test and what not to test
- Why you should optimise tests for failure
- How many tests you should write per method
- How to test literally everything
- What is code coverage and why it can be deceiving
- How to use AssertJ to make test super readable
- What TDD is and what its benefit is', 'Write awesome tests', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TXZ-1793', '2018-11-16 10:20:00.000000000', '09:30', '2018-11-16 09:30:00.000000000', '"Building products customers want is a lot like TDD - fail fast, in a controlled environment, then learn and adapt until the build is green"

In this talk we‚Äôll discuss how an experimental approach to product development will lead to the many small failures that are essential to achieving great outcomes. We‚Äôll share stories from our experience in startups and enterprises, the mistakes we made along the way and how we came to the realisation we needed to approach building products differently. 

We aim for you to leave knowing how to practically apply an experimental approach to your product development, how to create a culture of experimentation and to recognise the dangers of launching without learning first.', 'How to build products people care about', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JNV-1055', '2018-11-16 11:25:00.000000000', '10:35', '2018-11-16 10:35:00.000000000', 'An in-depth look at what makes software development a roller coaster where the highs of 0 compiler warnings are quickly cancelled out by the pain of long hours, bad requirements, endless configuration, clueless managers and a plethora of other issues which make death by a thousand cuts seem like a good idea‚Ä¶. They will answer questions such as: ‚ÄúWhy is programming often called an art despite having its underpinnings in formal logic?‚Äù ‚ÄúHow can I rediscover the delight I felt when I first started coding?‚Äù ‚ÄúWhat‚Äôs that rush I feel when my test passes? Am I addicted to TDD?‚Äù

Combining Psychology, Philosophy and Computer Science, Dr Holly Cummins will present a series of practical tips to help you rediscover the euphoria that you felt the very first time a metal box in front of you came to life and cried out ‚ÄúHello World‚Äù', 'The Importance of Fun in the Workplace', '11:25', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('AWN-2088', '2018-11-16 12:30:00.000000000', '11:40', '2018-11-16 11:40:00.000000000', 'As a developer in IBM''s Cloud Garage, I work with customers who are trying to get to cloud so everything becomes better. What''s getting in their way isn''t the technology - wrapping something in a docker container (usually) isn''t that hard. Instead, it''s the structures that have been put in place to manage risk and the relationships between teams that trip companies up. In this talk, I''ll share some stories of customers struggling to get cloud native, and how we applied our methodology to turn things around. I''ll cover the ideal team size, the ideal microservice size, what skills a team needs, the role of architects, how to know if something is ready to ship, and whose fault everything really is.', 'Cloud native is about culture, not containers', '12:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IDP-9797', '2018-11-12 12:30:00.000000000', '09:30', '2018-11-12 09:30:00.000000000', 'We all want to consistently ship quality software. One of the best ways to do that is by end-to-end (E2E) testing our code as it simulates the real actions of our beloved users. Let‚Äôs be frank though, E2E testing is notoriously time-consuming, expensive, slow, and often flaky. Unfortunately, these issues lead to developers doing very little to no E2E testing, and taking solace in a plethora of unit-tests that cannot fully test the intended experience of users.

We can do better.

In this hands-on session, we‚Äôll dive deep into using Cypress, an open-source tool that enables us to easily and beautifully write flake-free, reliable, deterministic E2E tests for our web applications. Like a good friend, E2E tests should be there to give us confidence in the software we ship down the wire.

Session Outline
---
1. Introduction & Overview
2. Cypress basics
3. Adding tests and configurations
4. Cypress Selector Playground
5. Reseting/cleanup between tests
6. Spying and stubbing XHR tequests
7. Accessing application code and data
8. Setting up E2E tests on CI
9. Setting up Cypress Dashboard

The session will be accompanied by exercises, demo app, and slides.', 'Next-Generation End-to-End Testing with Cypress.io', '12:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JCX-3863', '2018-11-12 16:30:00.000000000', '13:30', '2018-11-12 13:30:00.000000000', 'Android developers, we propose you to come experiment the MVP & MVVM Android architectures! From a simple Android app, we will work on why and how to implement architectures principles. We will see how to go from MVP to MVVM with Android Architecture Components.

At the agenda: Kotlin, RxJava, Unit Tests and Android Architecture Components & Koin.

Warm up your AndroidStudio!!!

Requirements: AndroidStudio 3.1+ & Kotlin plugin 
Some background knowledge on Kotlin and RxJava can be helpful', 'Hands-on Android Architecture & Architecture Components', '16:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PAZ-3181', '2018-11-12 20:00:00.000000000', '19:00', '2018-11-12 19:00:00.000000000', 'As of Java 11, the JavaFX modules are decoupled from the core JDK distribution. In this session, we talk about how developers can create and distribute applications leveraging the JavaFX Platform. We explain how the OpenJFX repository is organized, how builds are created, and how developers can influence the roadmap.', 'JavaFX.next', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WWU-4466', '2018-11-12 21:00:00.000000000', '20:00', '2018-11-12 20:00:00.000000000', 'Your style of code is on of the things that makes you unique on the other hand, wars are started over something simple as the layout of code. What kind of coder are you? Are you on the spaces or on the tabs side. Perhaps you don''t care about styles as long as it works, or do you refuse to read incorrectly styled code. Do we need style guidelines or don''t we, lets decide together and see what kind of flavour Devoxx Belgium has...', 'Code style: what kind of coder are you', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WXY-5778', '2018-11-13 12:30:00.000000000', '09:30', '2018-11-13 09:30:00.000000000', 'Your life is a mess, you keep dropping important subjects, you procrastinate like there is no tomorrow and you feel overwhelmed. Not only professionally. Your personal life is even worse. This has happened to us too. But we have found techniques to get back in control. And we would like to share what we have learned. We are not gurus nor productivity experts, but like you information age professionals and hackers. We just hacked our life.

Getting Things Done, Personal Kanban, Inbox Zero, these techniques all share a common foundation. Let‚Äôs use this lab to let you experience what these techniques are about, and maybe your first step towards a more zen organized life.', 'Personal productivity lab: optimizing made personal', '12:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('UWC-9994', '2018-11-13 16:30:00.000000000', '13:30', '2018-11-13 13:30:00.000000000', 'Microservices are here to stay. When applied properly, microservices techniques and culture ultimately help us continuously improve business at a faster pace than traditional architecture.  However, microservices architecture itself can be complex to configure. All of a sudden, we are faced with the need for a service discovery server, how do we store service metadata, make decisions on whether to use client side load balancing or server side load balancing, deal with network resiliency, think how do we enforce service policies and audit, trace nested services calls.... The list goes on.

Sure, it''s easy to have a single stack that makes everything work provided there are good microservices support - but what if you have a polyglot environment? How would you make sure all of the stack can address the same concerns in a consistent way?  This is where a service mesh comes in.

In this lab, we''ll introduce Istio, an open source service mesh framework created by Google, IBM, and Lyft. deploy it into Kubernetes cluster, then deploy Spring Boot applications into the service mesh. Finally, we''ll use Istio to manage, control & monitor traffic.', 'Making Microservices Micro with Istio Service Mesh', '16:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('DIP-6064', '2018-11-13 20:00:00.000000000', '19:00', '2018-11-13 19:00:00.000000000', 'Technology has had a bumpy year.

In recent times, a sudden explosion of unethical technology seems to have hit the headlines. We are seeing questionable tech affect real lives.

How can we prevent unethical technology being made and put into the public realm? It‚Äôs a tough question, but something we need to face now.

While there is no easy solution, I‚Äôll demonstrate my methodology for preventing the growth of unethical software.

From using the gift of technology to create great services for all people, to encouraging diversity in our development teams, everyone can make an impact for good. All contributions to ethical tech build up to create local networks of careers, eventually funnelling into a global community to tackle large-scale problems.

By ensuring a people-first approach to making technology, it can not only prevent harm but actually benefit humanity. The world looks towards technology as a way to enhance our lives. For us to continue in this trend, we must focus on accessible and widely available ethical tech.

Together, we can all help in the fight against guns-for-hire software developers.', 'Morality and Ethics - Caring is Everything', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('LHF-2794', '2018-11-13 21:00:00.000000000', '20:00', '2018-11-13 20:00:00.000000000', 'Building Face detection & recognition in every day applications are becoming more and more accessible to any developer. In this session we will discuss how Google Vision API, existing face recognition models and Tensorflow-Keras can be used together to group the pictures of the speakers in the Devoxx Flickr albums. 

As a last year student in Applied Informatics, Lien will focus on the usability and application of existing frameworks to build a production-ready solution in the Cloud. Alex will explain the role of a mentor in order to complete a project successfully.

Jan Kees will discuss how he used the API to visualize this on the website.', 'Grouping the Devoxx/Voxxed speaker via Machine Learning, a students tale', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZGJ-4385', '2018-11-14 20:00:00.000000000', '19:00', '2018-11-14 19:00:00.000000000', '"Imagine Everyone Naked"... that''s the worst advice any public speaker can ever get. And that''s not something we would like to talk about here, either.
In this session, we aspire to make public speaking less frightening. With people involved in both technical and non-technical performances, we aim to cover three critical aspects of public speaking: up-front preparation, mitigating stress during the actual performance and actual "speaking mechanics" - with some basic tricks and tips how to sound good, breath normally etc.

If you are stressed out, whenever you think about saying anything in public, no matter if that''s a conference talk or a presentation in front of a group of colleagues - this is a session for you. First-hand experience how others prepare themselves for any public appearance.
', 'Speakers'' BOF', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZPI-8083', '2018-11-14 21:00:00.000000000', '20:00', '2018-11-14 20:00:00.000000000', 'The informal Jakarta EE community gathering of like minded developers, spec. leads and Jakarta EE representatives from different companies.

PLEASE NOTE: the @JakartaEE Community BOF has moved from the BOF 2 room to [Kelly''s Irish Pub](https://www.kellysantwerp.be/contact/) downtown Antwerp. 
Register here: [ibm.biz/JAKARTAEEBOF](ibm.biz/JAKARTAEEBOF)


', 'The Jakarta EE Community BOF - RELOCATED', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HCZ-9162', '2018-11-15 20:00:00.000000000', '19:00', '2018-11-15 19:00:00.000000000', 'In this informal BOF session, ask questions and learn how leaders from the community working on Java standards‚Äî Spec Leads, Expert Group members, Adoption Group leads, and JCP members collaborate to evolve Java technology and grow their careers at the same time. Learn tips for becoming a Java expert, meet people working to gain more developer involvement in Java standards as well as the language and the platform itself. All levels of experience are welcome. ', 'Java Community and Developer Careers BoF', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YFV-9396', '2018-11-15 21:00:00.000000000', '20:00', '2018-11-15 20:00:00.000000000', 'The integration of event streams is becoming increasingly complex in the world of sensors, media streams and the Internet of Things. In this session I will discuss how `Apache Kafka` and `TensorFlow` can be used to process real time video events and send alerts when a potential burglary is detected. 

Specifically, I''ll discuss how `Kafka Connect` and `Kafka Streams` can be used to read images from a media stream and how this can be integrated with TensorFlow to analyse the resulting event streams.

Although the use case presented is based on home security, the same technology used to analyse event streams can be applied to other use cases, as I will demonstrate during this session.', 'Bust the burglars: Machine Learning with TensorFlow and Apache Kafka', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CMV-7114', '2018-11-12 12:30:00.000000000', '09:30', '2018-11-12 09:30:00.000000000', 'GraalVM is a high-performance embeddable polyglot virtual machine capable of running different languages well:  Java, Scala, Kotlin, JavaScript, Ruby, Python and everything with an LLVM backend like C and C++. 

This session explores GraalVM and its uses for typical Java applications: getting the best peak performance on various workloads, creating native images for instant startup, 
mixing JavaScript and Python, or Ruby, or R into your code. You''ll learn how to understand what the JIT compiler is doing with your code, how to collect the necessary debug information for further profiling, what are the limitations of GraalVM''s native images and how to overcome most frequent of them. 

We''ll look at the polyglot applications and how they impact the code you''re writing, learn the polyglot API you need to use to effectively mix different programming languages in one program. 
We''ll explore using the common tooling like VisualVM and Chrome debugger for languages supported by GraalVM, even when you''re running JavaScript as stored procedures in the database.

The session is based on a series of demos you can follow along and try yourself later, and the insight you can directly use.', 'Deep dive into using GraalVM for Java and JavaScript developers', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OLG-3924', '2018-11-12 16:30:00.000000000', '13:30', '2018-11-12 13:30:00.000000000', 'Istio is a service mesh for Kubernetes that offers advanced networking features. It provides intelligent routing, resiliency, and security features, so that service authors don''t have to keep re-implementing them. Istio is rapidly taking off and there are great introductory talks everywhere. However in this session, we will dive deep to explore precisely how it does what it does, following one brave little packet in from the internet and back out again. At each point we‚Äôll see how to configure the features of that component to exploit istio‚Äôs full potential. This will give a great insight into Istio''s full power, and its fascinating architecture.

Over the course of the session, we will look at the following components and features, as our packet encounters them: 

* cloud / kubernetes networking
* pod construction, namespaces, envoy interception
* Pilot
* Mixer
* canaries
* traffic splitting
* circuit breaking
* traffic mirroring
* mTLS
* istio ingress
* istio egress
* telemetry', 'Life of a packet through Istio', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ORO-6131', '2018-11-12 17:15:00.000000000', '16:45', '2018-11-12 16:45:00.000000000', 'This talk will introduce Traefik the open source reverse-proxy/load-balancer which can be used as an Ingress Controller in your container infrastructure. Traefik can interface to backends such as Kubernetes, Docker, Mesos, Consul allowing to dynamically update the routing configuration without service loss.

We will look at what is a reverse-proxy, an Ingress Controller and Traefik, a state of the art reverse-proxy. We will dig even deeper and show how we made Traefik distributed, scalable and fault tolerant.

Demonstration of the use of Traefik as scalable Ingress Controller on Kubernetes.', 'Traefik: A Scalable and Highly Available Edge Router', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QIF-9171', '2018-11-12 18:00:00.000000000', '17:30', '2018-11-12 17:30:00.000000000', 'This session discusses concepts and integrates DevOps enabler tools to inspect source code of our Java application and its packaged binaries (Docker images) as part of a holistic Jenkins-based Continuous Delivery pipeline, largely run on and staged toward Oracle Cloud. We examine how SonarQube (with SonarLint) as well as Twistlock help to deliver software fast and in good quality. After the session you better understand Continuous Delivery concepts and tools, particularly how to inject security-related quality gates. The live demo is derived from couple of real-world success stories.
', 'The Silence of the Lambs: Inspecting Source Code and Binaries, in Continuous Delivery Pipelines ', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TOW-7592', '2018-11-12 18:45:00.000000000', '18:15', '2018-11-12 18:15:00.000000000', 'In one hand Kubernetes became the standard for the deployment of microservices and we started to see people stating that you can also take advantage of Kubernetes to deploy your legacy applications in the cloud. In the other hand GitLab and its integrated GitLab CI get always more attention and it can now perfectly integrate with Kubernetes clusters.

Based on our experience we''ll show you how Kubernetes (with a touch of GitLab CI magic) may be your best friend to take your existing development workflow to the next level. This presentation will not be about continuous delivery and Kubernetes in production. It will be about Kubernetes for the ordinary developer in the room.

We developed a few utilities and created a powerful workflow that is now enabled on projects in our company. We''ll be speaking about enabling dynamic environments for feature branches, easy update of existing Kubernetes deployments, some heresy like embedding an application server into a Pod, having fun as a developer and much more.', 'Power of cloud dev environments for your legacy projects', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QCM-9359', '2018-11-13 12:30:00.000000000', '09:30', '2018-11-13 09:30:00.000000000', 'Kotlin is a statically typed programming language for modern multiplatform applications language. 

We start with the basics, the introduction into the language. We discuss language features in deep and cover DSLs. You‚Äôll see how static typed DSLs are created and you will be able to understand the magic behind it.

Next, we switch to coroutines in Kotlin and explain how a suspend functions help. You‚Äôll learn how ‚Äòsuspend‚Äô functions and Kotlin coroutines are used to simplify callback driven programming and help to turn callback-style code it to a linear looking code.

With Kotlin you can compile your code for JVM, Android, iOS, Mac, and JS. With multiplatform projects, you may easily reuse Kotlin code between platforms. You‚Äôll see how same Kotlin code is used in JS, JVM, Android, and iOS. ', 'Kotlin Deep Dive', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HAO-1908', '2018-11-13 16:30:00.000000000', '13:30', '2018-11-13 13:30:00.000000000', '3 Belgian companies will present their move to the Cloud on 3 different Cloud providers. War stories means not only the success stories, but also the struggles and learnings along the way.

Tim Bogaert  and Gert Leenders represent "De Persgroup" and the move to Lambda in AWS. Alex Van Boxel will represent "Vente-Exclusive.com" on Google Cloud and their focus on data and Micha√´l Hompus will cover his Azure experience.', 'Cloud - War Stories', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TXS-3593', '2018-11-13 17:15:00.000000000', '16:45', '2018-11-13 16:45:00.000000000', 'Tools are not all you need to take on a new methodolgy such as DevOps or DevSecOps. Team Culture and process changes at the core of the organization are required as well as tooling that supports and automates boring but important tasks, while fitting in with the development pipeline. We''ll use at how the free Snyk edition can integrate throughout the development lifecycle, testing for known vulnerabilities in the Open Source Snyk database.', 'Switching on DevSecOps', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HLB-1428', '2018-11-13 18:00:00.000000000', '17:30', '2018-11-13 17:30:00.000000000', 'Microservices are so hype they have their own Voxxed event, and perhaps you‚Äôve already fall for them and replace your good old monolith for new shiny microservices on the back-end. 

But have you ever consider doing the same on the front-end? Even hype-r (or crazy-er, I let you judge), have you tried mixing different JavaScript frameworks (let‚Äôs say AngularJS, Angular and React for example) in a Single Page Application? 

That‚Äôs what Micro Frontend is and that‚Äôs what we‚Äôve done this year at Saagie. In this talk I‚Äôd like to give you a feedback on the different architectures we‚Äôve tried, their pros and cons and help you find which one would be the best for you, just in case you‚Äôd like to opt for the dark and crazy side of front-end.', 'Micro Frontend: the microservice puzzle extended to frontend.', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZCZ-7641', '2018-11-13 18:45:00.000000000', '18:15', '2018-11-13 18:15:00.000000000', 'The artificial vision spectrum ranges from fully automated generic Image Content Analysis (just give a picture and get answers, no configuration needed!) to fine-tuned neural network frameworks.

In-between, AutoML techniques let you build high-accuracy prediction systems focused on your use case, discovering and learning the topology of your data of interest, without writing any line of code at all. For image classification, this typically involves providing hundreds of known photos to a platform to train a model, and then use this model to infer characteristics of new pictures. Supervised learning at its simplest: just show labeled samples, and you get a model.

I will demo several recent tools that help build a model from a collection of pictures and a list of labels, and compare the quality of the results. Each may have its own answer to this fundamental question: Is it easier to detect Wallace or to detect Gromit?', 'Computer vision: British clay', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EBQ-9546', '2018-11-14 10:00:00.000000000', '09:30', '2018-11-14 09:30:00.000000000', 'Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we''ll highlight several applications we''re using to run Devoxx Belgium.', 'Welcome - Overflow', '10:00', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FGE-5982', '2018-11-14 10:30:00.000000000', '10:00', '2018-11-14 10:00:00.000000000', 'In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they‚Äôre not as scary as you may think, and many developers have already adjusted to them.', 'Java in 2018: Change is the Only Constant - Overflow', '10:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HGP-1715', '2018-11-14 11:30:00.000000000', '10:30', '2018-11-14 10:30:00.000000000', 'We''ve, as humans, been programming only for the past few decades. We''ve come a long way in some ways, yet we''ve advanced only marginally on other fronts. We hear folks tell us, ''oh, things change so fast'' and yet we''ve changed only a little in the way we develop software. Imagine where we''d be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We''re poised for the next big change. In this presentation we''ll learn about the perfect storms that''s influencing that change and the directions that the programming field is evolving in.', 'Spearheading the future of programming - Overflow', '11:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TWL-3859', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'The Machine Learning field has seen so much progress lately that all developers can now build real-life smart ML-integrating applications, not only data scientists and ML researchers.

With pre-trained models and just a few lines of code, ML APIs can analyze or transform our data. Moreover, thanks to meta-learning techniques, Cloud AutoML can customize these models, solve more specific problems, and provide insights tailored to our own needs.

We''ll explore what any developer can do today and we''ll even try to build a custom model altogether in a live demo. Don''t put your smartphone in airplane mode!', 'AutoML + ML APIs = machine learning for all developers', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VUM-5564', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'The Coding Dojo was invented to spread TDD in the development community. It turns out that coding dojos can be used to learn almost any programming technique, and not only TDD. Its Randori flavor, where everyone collaborates through the same keyboard, is less known but features many benefits. Practiced regularly, it strengthens teamwork skills like active listening, egoless programming, code review, pair programming, mob programming and coding conventions.

I‚Äôll quickly explain how to setup your own Randori in order to improve your team on all these aspects.', 'Boost your teamwork with Randoris', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GBB-7040', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', '> In the beginning verbosity and complexity reigned. Then came Kotlin

This pretty much sums up many presentations about Kotlin in the past two years. And it is a pretty reasonable opinion.

But let''s not forget something: Kotlin is a programming language. In the end it is us who decide which code we are creating. And most of the time we seek what we envision as "good" code - clean, concise and understandable.

These 15 minutes will explore the darker parts. They will be dedicated to deliver "evil" intentions, possibilities to misuse even an appreciated language like Kotlin. So prepare for a discussion about obscurity, code injection and a little bit of ethics as spice.

You will like this talk if you...

+ ...want to do some "unproductive" but creative thinking
+ ...like jumbling with language features
+ ...simply love everything about Kotlin, even the questionable parts
+ ...never knew anything questionable about Kotlin and are eager to learn more about it', 'Evil Inspiration for Kotlin', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NME-5763', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'Istio, we have a problem! We''ve just deployed a shiny new set of micro-services and it behaves in a strange manner. Hard to say why with so many moving parts...

Let''s leverage the newly installed service mesh to understand what we''ve deployed. Find the root problem. Fix it. And then do a proper, non trivial, blue-green deployment of the updated version.

That will involve the Service Graph, Prometheus monitoring, Grafana Dashboards, Traffic mirroring, all orchestrated in a simple manner by Istio.', 'Istio, we have a problem! Understanding and fixing bugs with a service-mesh', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('XCM-6395', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'All you need to know about JHipster 5 from its lead developers. Create Web applications using Spring Boot + Angular/React and deploy it to all major cloud platforms like Heroku/AWS/GAE. Model your applications and entities using JDL v3.', 'JHipster 5 - What''s new and noteworthy', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('XSD-5283', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'Kubernetes has become the orchestrator of choice to deploy applications. But what about developer''s day to day job?
The more they leverage the platform, the more difficult it is to develop outside of the platform.
And developing inside containers is not always easy nor enjoyable.

Google has launched multiple Open-Source projects that focus on Developer User Experience in a Container World.

* Skaffold facilitates iterative development.
* Distroless images offer small and secure base images.
* Bazel and Jib quickly build images without Docker installed.
* Kaniko securely builds images on a cluster.

Come learn how those tools combined together, make a great CI/CD story for those developing for Kubernetes.
', 'Google Open-Source Container Tools: Life of a happy developer in a container world', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GVB-9579', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'It seem that more and more enterprise technology is emerging that is based on Java EE. There are a lot of options to choose from, between Java EE, what is now Jakarta EE, MicroProfile, and combinations of their APIs. If we look at available application containers the number of possibilities are even higher. Which platforms, particular standards and runtimes should enterprise developers base their applications on in year 2018?

This session shows the difference between Java EE, Jakarta EE, MicroProfile and their individual specifications. We‚Äôll how their APIs complement each other and enable us to develop applications with focus on high productivity using well-known APIs Especially cloud native applications require a few additional technical concerns, such as telemetry and resiliency that are added by the recent MicroProfile specifications. We will also see a comparison of Java Enterprise runtimes, which containers support MicroProfile, which deployment models are there, and what choice makes sense for different technology stacks.', 'Java EE, Jakarta EE, MicroProfile, Or Maybe All Of Them?', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RMB-6935', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'When evaluation different implementation approaches for a set of bounded contexts, a modular, monolithic application constitutes a pragmatic alternative to a microservices architecture that comes with challenges and complexities of a distributed system. Still, in the course of their life time, modularity and maintainability of monolithic applications very often degrade significantly. This is usually caused by the gap between architectural concepts and the codebase implementing those.

The talk briefly identifies the commonly observed issues in unstructured monoliths and discusses approaches to code organization and component structure, package design, transactions and the usage of events to implement bounded context interaction. We also take a look at supporting technologies and features of the Spring (Boot) eco-system to easily test individual bounded contexts and detect architectural violations. Attendees will learn how to easily implement architectural concepts into modular, monolithic applications, how to preserve the architecture over time and to prepare a potential split into multiple systems at a later point in time.', 'Building better monoliths ‚Äì Implementing modulithic applications with Spring', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FNS-6849', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'GraalVM project enhances the Java ecosystem with an integrated, polyglot, high-performance execution environment for dynamic, static, and native languages. GraalVM supports Java, Scala, Kotlin, Groovy, and other JVM-based languages. At the same time, it can run the dynamic scripting languages JavaScript including node.js, Ruby, R, and Python. 

In this session you''ll see demos and learn what you can do with GraalVM, from using it as the JVM JIT compiler, enhancing the JIT, running native and polyglot programs, compiling them ahead of time for faster startup and lower runtime overhead, debugging your polyglot code using exact same tools for any language, to profiling performance and memory of your application and embedding GraalVM in a native application for portability. 

GraalVM offers you the opportunity to write the code in the language you want, which suits the problem the best, and run the resulting program really fast wherever you like: JVM, native code, even inside a database. ', 'GraalVM: Run Programs Faster Anywhere', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('BIP-8983', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', 'Integrating microservices and taming distributed systems is hard. In this talk I will present three challenges I''ve observed in real-life projects and discuss how to avoid them.

1. Communication is complex. With everything being distributed failures are normal so you need sophisticated failure handling strategies (e.g. stateful retry).

2. Asynchronicity requires you to handle timeouts. This is not only about milliseconds, systems get much more resilient when you can wait for minutes, hours or even longer.

3. Distributed transactions cannot simply be delegated to protocols like XA. So you need to solve the requirement to retain consistency in case of failures.

I will not only use slides but also demonstrate concrete source code examples available on GitHub.', '3 common pitfalls in microservice integration and how to avoid them', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZWW-0582', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'Do you practice TDD? What about BDD? What about H (Hypothesis) DD?

Did you know that SDD (Stackoverflow Driven Development) is a thing? What about Fowler Driven Development or Beer Driven Development?

I spent some time working with some colleagues on the A to Z of *DD. The result was a full alphabet of things that at least one of us had experienced during our careers. Some serious, some less so, some good, some undeniably indifferent to bad to plain stupid.

But out of all of this I wondered what should REALLY drive our development? In this lightning trip around the alphabet of absurdity I will tell you the one guiding principal that we should all stick to when deciding what should drive our development.', 'What Drives your Development?', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GMH-7709', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'One of the challenges in engineering a software product today is to minimize the amount of code that needs to be duplicated to support the app on multiple platforms. This challenge is partly due to APIs that expose data as opposed to business content. With data-driven APIs the app must embed large chunks of the business logic. First, it must transform the data into content to display. Second, it must transform it back into data to be processed by the API. While solutions exist to share this transformation logic between multiple app platforms, we decided to host this logic on the server. 

This is achieved by exposing a presentation API containing use case specific endpoints. Its responses have the content matching the needs of what is displayed by the app. This decision of building the product around a presentation API has served us well in this project. Throughout the life of our project, we have had the opportunity to exploit the presentation layer in the backend. This allowed us to iterate faster with the product by displaying different things without having to ship any new code to the front end, while reducing the apps development time.', 'Centralizing Business Logic on the Server: How We Designed Presentation APIs', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('BZV-3566', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'In this session, the creator of Micronaut and Grails introduces the newly released Micronaut framework and demonstrates how Micronaut‚Äôs unique compile-time approach enables the development of ultra-lightweight microservices for Java. Compelling aspects of the Micronaut framework include

* Subsecond startup time
* Small processes that can run in as little as 10 MB of JVM heap
* No runtime reflection
* Dependency injection and AOP ‚Ä¢ Cloud Native

Graeme will also demonstrate how you can take your Microservices to the next level by using Micronaut''s Ahead of Time Compilation (AOT) support and Oracle''s GraalVM to achieve instant startup and ultra-low memory footprint.', 'Introduction to Micronaut: Lightweight Microservices with Ahead of Time Compilation', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QZY-5499', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'Having a self-service based infrastructure platform is crucial for the adoption of DevOps culture and capabilities. Within Nationale Nederlanden, a large international insurance company, we offer a compliant and easy to use platform across more than 50 AWS accounts, to be used by over 200 teams worldwide. Providing an enterprise scale, highly regulated, cloud platform and a range of CI/CD tools at this scale is not without challenges. We will take you on our journey that we started 2 years ago. We will share the problems and pitfalls we experienced as a team and explain how we tackled them. We will also teach how we kept ourselves from drowning in operations work and achieved to deliver more, while worrying less. Our journey will include lessons on:
 
* Setting up infrastructure as code in a scalable way
* Running and deploying many pipelines over numerous AWS accounts
* Providing your customers with tools that they can consume in a self-service way across accounts.
 
During the talk we hope to inspire you to achieve full automation and leave the session with a unique take on solving CI/CD at scale.', 'Managing CI/CD on AWS at scale', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JME-2806', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'HTTP cookies are everyhere. Not a single day without having to approve a cookie banner consent. Not so much projects without them and yet, we often don‚Äôt really get how they work.

We mix-up the rules they have to follow in the browsers. We‚Äôre confusing them with server side sessions. Those holes, in the giant skillset any modern developer should have, sometimes have non negligible impacts on the security of our apps and on our privacy as simple users of the Web.

In this session, we‚Äôll have a (re)discovery of HTTP cookies through examples and live demos. We‚Äôll go back to the very basics: their origins and their behaviour inside our browsers. We‚Äôll finish by talking about more recent news around cookies (SameSite, cookie prefix) and how they‚Äôre used by modern Web APIs like fetch(). This talk will also be a good opportunity to talk about security, tracking and privacy in general.', '#BackToBasics : üç™ HTTP cookies', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NAR-5215', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', 'So, you‚Äôve fully embraced the container revolution, and you are now deploying all of the Java applications packaged in Docker containers, but are you taking appropriate caution with the new security issues container technology can bring? Join Steve and Daniel for an overview of the current threat landscape, with a focus on container technology and Java applications, and learn how to mitigate the risks. Hear about the impact of security throughout the software creation and delivery lifecycle, how container technology changes and adds to the security requirements of modern software and learn about the important open source tools for code scanning and dependency verification etc and guidelines on when to use them', 'Are You Deploying and Operating with Security in Mind? Cloud, Containers and Collateral Damage', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('KRD-3778', '2018-11-16 10:20:00.000000000', '09:30', '2018-11-16 09:30:00.000000000', 'A typical interaction with a device or interface involves touching it. Either you''re pressing buttons on a controller, swiping on a touchscreen or clicking on your laptop''s trackpad. But what if you could control things without the use of your hands? What if you could use... your thoughts?

I have been tinkering with a brain sensor and developed an open source JavaScript framework for it to allow me (or anyone else) to control interfaces or robots using facial expressions and mental commands.', 'Mind control in JavaScript and experimenting with evolving interactions', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('KQX-4133', '2018-11-16 11:25:00.000000000', '10:35', '2018-11-16 10:35:00.000000000', 'It is widely accepted that AI is the future of testing. However, because a fault lies in the eye of the beholder, it is pretty unclear _how_ to apply AI to testing‚Äîcalled the Oracle problem.

There are literally thousands of UI test automation tools. But due to high efforts for creation and maintenance, together with the brittleness and unreliability of the resulting tests, testing often remains a manual task (confirming the testing pyramid). Meanwhile Software testing accounts for 30%-40% of the budget of a typical software project.

However, there is a way to circumvent the oracle problem and use AI to not only find technical errors (i.e. crashes), but to generate tests for business functionality‚Äîautonomous automation. See how AI can be trained to generate tests that are optimized towards several goals and are even better than manually created ones.

Visit the future of testing and see how AI can help us create better software!', 'How to apply AI to testing', '11:25', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VKZ-5277', '2018-11-16 12:30:00.000000000', '11:40', '2018-11-16 11:40:00.000000000', 'Jakarta EE is taking over the relay baton from Java EE as a community effort in the Eclipse Foundation with the focus on enabling community-driven collaboration and open innovation for the cloud. The transfer of the Java EE technologies to Eclipse Foundation also opens up for very interesting synergies and collaboration with the Eclipse MicroProfile projects. This session will give you an update on the current state of Jakarta EE and look ahead at how the continued development of the platform will look like.

In this session, you will be able to ask questions to a panel consisting of a number of participants in the Jakarta EE Working Group.', 'JakartaEE - The New Home of Cloud Native Java', '12:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('XEV-9701', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'What if Virtual Reality glasses could transform your environment into a three-dimensional work of art in realtime? What if every detail of the world would be shown in the style of a painting from Van Gogh? 

One of the many interesting developments in the field of Deep Learning is the so called "Style Transfer". It describes a possibility to create a patchwork (or pastiche) from two images. While one of these images defines the the artistic style of the result picture, the other one is used for extracting the image content. The Hardware Hacking Team from TNG Technology Consulting managed to build an application using OpenCV and Tensorflow to realize such goggles. When you see the world through these glasses, your environment will be displayed in the styles of famous painters like Claude Monet or Pablo Picasso. 

Within this talk you will be introduced into the scientific field of Realtime Style Transfer. It will also cover and explain in detail the Deep Learning techniques used for this application.', 'Stereoscopic Style Transfer AI - Art is not what you see?', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IPW-2169', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'At developer conferences we talk about inclusivity, yet for the last 5 years, women hold less than 20% of all technology positions in the work force, and attendance at developer conferences is even less in most cases (the numbers are even fewer for minority groups). In order to create technologies that serve the society as a whole, we need more diversity, and beyond including women in technology. In this session you will learn how to make conferences more inclusive and diverse - for women, minorities, LGBTQ and non binary individuals. Learn simple ways to support and include a more diverse community in the office, at conferences, and online. ', 'Diversity and Inclusion - Beyond Women in Tech', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FNP-7703', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', 'Do you also wake up sweating during those hot summer nights, but you are too lazy to get out of bed to turn a fan on?

Using serverless with Firebase Cloud Functions, Google Assistant, a Raspberry Pi and a bit of wiring I turned my old fan in a state of the art fan with voice control and automatic temperature regulation.
Now I enjoy the luxury of no longer having to get up to turn it on/off when it''s too hot, cold or noisy.

In this talk I will show you how easy it is to give your fan a second life while you are living a more luxurious life.', 'Keeping your head cool with a serverless voice controlled fan', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ENF-9465', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'The Angular team is constantly working to improve the performance and decrease the code size of applications built with our framework. Most of the time, these improvements come about gradually as the result of many small optimizations. Once in a while, though, a radical redesign of the framework''s internals will bring about a major leap, often without changing a single line of application code.

This is the goal of the Angular Ivy project - to build a new rendering architecture for one of the web''s largest frameworks. At its core is an instruction set for rendering Angular templates, integrated into the framework using set of techniques and design patterns that leverage the capabilities of the modern ES6 ecosystem, taking full advantage of transpilers, bundlers, and tree-shakers. Ivy is a way of thinking about application design that''s applicable to any application, large or small.

This talk covers the design and philosophy of Angular Ivy from its instructions on up. It will illustrate exactly how the new architecture achieves major gains in performance and code size, and show you how to apply these same techniques to your own applications.', 'An instruction set for the web', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CUL-8526', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'Project Panama re-imagines the way in which Java applications speak to foreign functions and data structures. With Panama, developers translate existing native headers into suitable Java interfaces using a tool called ‚Äújextract‚Äù.  These interfaces can then be bound to the corresponding native methods and data structures on the fly, with no need to write platform-specific code in C or C++. Allowing platform-specific idioms to be coded directly in Java not only improves developer productivity, but it also makes the platform more secure and efficient. This talk takes a peek under the hood of Panama with a particular focus on the challenges of providing foreign interoperability support which is as expressive as is efficient.', 'Panama: A Foreign Policy for Java', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WQH-2475', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'I assume your well-being is quite important to you, but do you do anything to take care of your health? Maybe you regularly go for a run or visit a gym? Practice yoga? Play squash? The thing is, it does not matter as much as you might think it does. Even if you exercise in leisure time on a regular basis, you spend most of your workday on your buttocks and that, as it turns out, is very unhealthy.

There is now 3 decades worth of research linking sedentary lifestyle to myriad health problems. What is even worse, you can not completely mitigate the risks by just exercising because prolonged sitting still wreaks havoc in your body. The solution to this problem is quite simple and yet very difficult to implement due to a combination of factors like our cultural upbringing, psychosocial barriers as well as all the technological advancements of the last century.

In this talk I will show you the first step to getting out of your chair, but you are the one that has to take it.', 'Sitting Considered Deadly', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YFD-2317', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'Many AngularJS apps can install ngUpgrade and begin rewriting components, but it''s not so easy when those components make up a library that is used by several teams to power their production apps. Instead of rewriting everything at once, this talk shares how we first created a common interface with custom elements, and then upgraded one component at a time to Angular Elements all while expanding the number of teams we integrate with.

', 'Upgrading to Angular without ngUpgrade', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RGG-9998', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'Columnar data formats such as Parquet and ORC are designed to optimize both query performance and costs for analytics scenarios. On the other hand, serverless computing platforms such as AWS Lambda allow you to run highly scalable applications without provisioning or managing servers. The combination of columnar storage and serverless computing can drastically simplify many of the pain points related to big data analytics, data collection, and ETL orchestration, while at the same time reducing the total cost of ownership.', 'Columnar data formats enabling serverless data analysis at scale', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IIE-9549', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'Have you ever wondered how teams and individuals form a product vision? What soft skills do people with product vision have, and can these skills be nurtured and developed? Does company culture affect the personal qualities and values ‚Äãof its employees? Do our mindset and personal qualities affect our level of happiness?

I have analyzed how various teams at JetBrains work and come up with a list of common qualities and values shared by all of our teams. Based on this experience, I will try to prove that the key factor in our products‚Äô success is the mindset of the people who create these products.

I will describe the special qualities that our people, teams, and the company as a whole exemplify, and how these talents can be cultivated and nurtured. I will also touch upon the dark side of such a flexible and informal process and illustrate the concept of a meaningful life as a part of happiness at work.

At my session you will discover:

- a set of practices that you can apply to your team;
- a set of personal soft skills that team members need to have product vision; and
- a recipe for nurturing these skills on the individual, team and company levels.', 'Developing Native Product Vision in Teams and Individuals', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('MOC-8655', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', '- Introduction to the motorcycle CAN bus and OBDII and connecting to it
- rigging a 2009 Triumph Speed Triple with readily available development boards
- extracting data and interacting with the onboard ECU
- adding external sensors and sending the data feed to the cloud
- practical applications for vehicle tracking, performance, usage, safety..
- connecting with a custom dash or HUD', 'Hack your ride', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('CCM-5193', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'In the daily drag of requirements and deadlines we often forget to take the time for the fun stuff. Yet it''s these "just for fun" projects that drive us towards greater knowledge and inspire us at our jobs. But... how do you find an interesting topic for a project?

I will share the paths I have taken to inspire myself in the quest for new pet projects. Join me as I show you my attempts at: 

- Unraveling the inner workings of a certain Pocket Monster mobile game;

- Creating a mobile game using only vanilla Java (no extra libraries);

- Creating an autonomous infra-red battle tank;

- Driving a Lego Boost robot using Java;

I will show you the code I wrote, the hurdles I faced and, most importantly, the lessons I learned, and how those insights help me in my daily developer life.

If you want to do a pet project but have no idea where to start or what to do, this is the talk for you.', 'Learning Through Tinkering: The Need for Pet Projects', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HDU-1733', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'Whether you''re developing an app for smartphones or an IoT, connectivity is a key element. Ideally, we would like to minimize both the latency and the energy consumption. Actually, it is difficult to do. Sweeping a bunch of technologies, from WiFi to LTE-M, through 2,3,4,5G, we will see the mechanisms that are put in place to preserve the autonomy of a device and which inevitably induce latency.', 'Energy, latency: I love you, me neither', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OZS-8242', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'Coding software can get very interesting when you try running it on physical machine
instead of deploying it in a cloud for once.

So how did we build a fully automated cocktail mixer prototype using:

* Raspberry pi
* Peristaltic pumps
* Python
* Web technologies
* Maker beams
* 3D printing
* Lot‚Äôs of wires

This talk will take you on a journey of cutting maker beams, problem solving electronics
and drinking screwdrivers‚Ä¶.', 'Moe Szyslak vs The Balmer peak', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FWX-0478', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'Each conference talk has a timeslot and room. These aren‚Äôt assigned randomly. Ideally, a rock star speaker gets a big room. And if a speaker is still flying in on the first day, his/her talk must be on a later day. An introductory session should be before the advanced session on the same topic. These are all constraints. And there are many more of them. Some are soft (we can break them), but others - for example a speaker cannot have 2 talks at the same time - are hard, because no person can be in 2 places at the same time under the laws of this universe.

As you can image, scheduling those talks optimally is hard. So let‚Äôs automate it. Two separate projects use advanced A.I. algorithms to tackle this problem for Devoxx Belgium.

**In one corner we have OptaPlanner**, the general purpose open source constraint solver in Java, lead by Geoffrey. **In the other corner we have NoConf**, a dedicated algorithm in Scala, lead by Piotr and Viktor. Which one delivered the best result according to Stephan Janssen?

**Let‚Äôs get ready to rumble!**', 'The battle of 2 automated conference talk scheduling algorithms for Devoxx', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('KBS-3133', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'Organisations increasingly rely on open source software from their supply chain partners and outsourcers to power the products and technology they deliver to the marketplace.

Whether you‚Äôre an automotive company or a medical device manufacturer, use of open source software accelerates development schedules, and reduces costs, but how do you minimise security risks?

One way some DevOps organisations are facing this challenge is by deploying their applications in containers.

In this presentation we explore this new era of large scale container deployments and how to manage and secure them.

This session will arm you with the information to:

‚Ä¢ Explain the importance of open source security to your organisation
‚Ä¢ Why container environments present new application security challenges
‚Ä¢ Best practices and methodologies for deploying secure containers with trust', 'Open Source Supply Chains and Consumption Risk - Governance, Containers & Trust', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OUJ-2379', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', 'How does DocuSign incorporate blockchain into its eSignature solution? Find out why we chose to use the blockchain, how it works under the hood, and how DocuSign utilizes the blockchain and stay GDPR compliant.', 'Digital Signatures and Blockchain: How DocuSign Does It', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ZSJ-3068', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'Everyone wants to understand what their application is really doing in production, but this information is normally invisible to developers. Profilers tell you what code your application is running but few developers profile and mostly on their development environments. Thankfully production profiling is now a practical reality that can help you solve and avoid performance problems.

Profiling in development can be problematic because it‚Äôs rare that you have a realistic workload or performance test for your system. Even if you‚Äôve got accurate perf tests maintaining these and validating that they represent production systems is hugely time consuming and hard. Not only that but often the hardware and operating system that you run in production are different from your development environment.

This pragmatic talk will help you understand the ins and outs of profiling in a production system. You‚Äôll learn about different techniques and approaches that help you understand what‚Äôs really happening with your system. This helps you to solve new performance problems, regressions and undertake capacity planning exercises.', 'Production Profiling: What, Why and How', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('MTP-5918', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'Is Java9''s Project Jigsaw enough for a microkernel architecture? OSGI can still help us, developers?

In my presentation I will detail when and why microkernel architecture is useful, how Java 9 and OSGI satisfy those scenarios by comparing their impact on: incremental change, testing, appropriate coupling.', 'Project Jigsaw and OSGI: Microkernel architecture in the spotlight', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RBO-9456', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', 'While sometimes blockchains are presented as the end-all solution to every technical problem and world hunger. However, in the end, they are just another component for you to use in solutions. When should you be using a blockchain? (spoiler: often not)  Which design-patterns are applicable?

These questions will be answered in general, and examples from Bitcoin, Ethereum and Sovrin will be used to illustrate.', 'Architecting with blockchain for dummies', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WQH-8604', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'Microservices are great, problems arise when you start to have two of them and when you want to deal with data :)

Pun aside, data and state is a big subject that is largely ignored when discussing Microservices.

* Conundrum #1 : What is the aimed data architecture in a perfect Microservices architecture?
* Conundrum #2 : How do you share state between instances of a given Microservice in a stateless 12 factor approach?
* Conundrum #3 : how to echange state between Microservices that must remain independent?
* Conundrum #4 : how do I go from my brownfield database to a fleet of Microservices IRL without a Big Bang?
Conundrum #5 : with many Microservices touching many data sets, how do I guarantee uniformed security (GDPR anyone)?

And the list goes on. This presentation is an opinionated answer to these questions. And yes we do demo these concepts.', 'Data in a Microservices world: from conundrum to options', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TZU-3777', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'In this talk, I will live code a Spring Boot application with no annotation that will run as a native executable compiled with [GraalVM](https://www.graalvm.org/). This application will leverage [Kofu configuration](https://github.com/spring-projects/spring-fu/tree/master/kofu), a Kotlin DSL designed to configure your application in a functional way.

I will also present various features currently incubated in [Spring Fu](https://github.com/spring-projects/spring-fu) project:

- Kofu (Kotlin DSL) and Jafu (Java DSL) configuration for Spring Boot
- Minimal set of features enabled by default
- No classpath scanning, no feature enabled based on classpath detection
- Both declarative (via the DSL) and programmatic (code auto-complete, allow any kind of if, for statements)
- Functional configuration based on pure lambdas
- Minimal reflection usage, no CGLIB proxy, no annotation processing
- Faster startup and lower memory consumption
- GraalVM native images support
- Reactive SQL via [R2DBC](https://r2dbc.io/)
- Coroutines web and persistence API

I will explain where we are, what we learnt, and what''s coming next in term of new Spring Framework and Spring Boot features.', 'Spring Boot with Kotlin, functional configuration and GraalVM', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YOK-9868', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'Learn about the new and awesome features of Typescript.
See how Typescript can help with both React and Angular.
Make your React coding experience even better with static Types.
See what are the practical benefits while not being a ''type'' nazi.', 'Why you should love TypeScript - A practical guide', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JLW-7651', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'Do you know the Abbey of Crime game?
The abbey is an 8-bit game (for spectrum and CPC) that became the first RPG game in 3D (2.5D) in 1987. The solution of the game is so hard (5**1000) that we don''t know any human that passed it without help.

The challenge is design an AI that play and solve the game. We used Reinforcement Learning as the main Deep Learning.

Building a project like this take a lots of big challenges like: lots of resources for training the model (GPUs/TPUs), executing games , storing lots of information, analyzing data,  etc. 

When you need to afford it, you will need a lot of products/tools no just AI tools like tensorflow/keras. We will show you how Google Cloud is your perfect ally and you will have the right tools to leverage a near impossible problem like this one.  
', 'Solving a complex game with AI and all the Google Cloud power', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HTB-7213', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'Modern browsers have high performance JavaScript engines and great WebGL support for creating 3D scenes, animations, games and visualisations and with upcoming standards like WebVR, WebAR and WebXR, it becomes much easier to use your frontend skills to add 3D, VR and AR capabilities to your applications.

Creating 3D scenes from scratch, however is difficult using just the standard JavaScript APIs and WebGL. You need to know a lot of math, understand how to write shaders  and integrate the well known JavaScript world with the WebGL concepts, just to get started, or commit yourself to a 3D framework (e.g Unity).

Three.js is a library which wraps all the WebGL concepts in a simple API, so you can program in JavaScript, and easily create great looking 3D scenes. Three.js comes with a large set of lights and materials, supports animations, and can load most 3D formats. It even has supports for VR and AR.

In this session we''ll walk you through the main concepts of Three.js, and show you how easy it is to create great looking and complex 3D scenes, which work in mobile and desktop browers,  react-native and even support ArCore and ArKit. All through a couple  lines of JavaScript.', 'Three.js, easy 3D in your browser for when two dimensions just aren''t enough', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SMW-4629', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'Micronaut is a new JVM-based, full-stack framework for building modular, easily testable microservice applications with Java, Kotlin, and Groovy.

In this live-coding session, you will see how fast you can start developing "natively" cloud-native microservices with Micronaut. You will learn about the reactive support, testing, http-client, service discovery, fallback, and GraalVM support.', 'Micronaut in Action!', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EVU-2342', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', 'No dependencies, no code generators, no plugins. Lets create a full stack application with WebStandards frontend without any frameworks and discuss the design decisions on-the-go. #slideless #nomigrations #usetheplatform', 'Jakarta EE / MicroProfile + WebStandards, On Stage Hacking  #noslides', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('UQE-1794', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'The story, how we made 365 deployments in 365 days.

In the talk, I share my experience from creating and maintaining two regions in-house production service.  We started with a set of Ansible scripts and Docker containers. To simplify it we use TeamCity build configurations with many parameters. It took several hours to roll a new build or maintain the system. No matter green-blue deployment was used. 

It was timely to maintain. And I decided to make it faster. Now all deployments run by itself automatically in the night, the versions are stored in Consul. The system is resilient.

Join me to know more of easy steps we did to reduce the toil', 'Opsless DevOps', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TUR-0907', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'Wish to improve your or your teams Agile skillset and don''t want to participate in the standard games and exercises your Agile coaches supply you? This talk offers a fun alternative in the form of game jams such as [Ludum Dare](http://ldjam.com/) where you develop a complete game in a weekend. Whether you participate on your own or wish to work on the collaboration in your team, the jams offer many opportunities to train and improve your skillset.

Come by to learn more about game jams, how the similar challenges apply to your sprint and acquire inspiration to create and share your own games while improving your skills.', 'Improve your Agile skills by participating in gamejams', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('THX-2097', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'Vue.js is described as a "progressive web framework" - this means you can get started easily for building browser based web applications, then add in advanced features of the framework as your app grows in time. In this session, we''ll start with the basics and discuss this wonderful web framework.', 'Vue.js: power and flexiblity', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YHN-7922', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'Cloud-native. It''s a great term, one that promises significant benefits for Java developers and Java applications. However there are traps for the unwary traveler undertaking this journey. It''s best to be prepared and forewarned. In this talk hear more about what cloud-native Java looks like, and how it can differ from what you might be expecting.‚Ä® From application to JVM to hosting environment, there are challenges to face and obstacles to overcome before you''ve reached your goal. This talk will educate and remind you of the important points to be aware of, and will offer an opinionated view of the open technologies you should be including in your travel bag.
¬†
Whether a new starter or an old hand, this session will leave you thinking differently about cloud-native Java!', 'Are you ready for Cloud Native Java', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('AST-3167', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'The average mobile website page weight is ~50% images. Toss in the complication of thousands of differently sized screens, and it might appear that efficient delivery of images to every device is an impossible task. But all is not lost! In this talk, we‚Äôll examine strategies to send the perfect image to every device, ensuring a fast, beautiful rendering of your content. We‚Äôll look at progressive images, placeholder images, lazy loading and other techniques and real world examples that will improve the usability of your site or app. Attendees will come away with an understand of the current ‚Äòstate of the art‚Äô for optimizing visual content on the web.', 'Fast and Beautiful: Modern Image Delivery Techniques', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TKI-5901', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', 'Remote work is a hot topic and for good reasons! It has many benefits, but it also introduces new challenges. In this talk, we will look at how the Trello team embraced remote and made it work for its growing team. We will discuss why remote work can be good for your team and how to continue to get sh*t done and grow a remote culture. After this talk you will have a clear overview on why remote work can help your organisation, the challenges involved, and many pointers for getting it right.', 'Why you''re failing your remote workers', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FCN-7579', '2018-11-12 12:30:00.000000000', '09:30', '2018-11-12 09:30:00.000000000', 'TensorFlow is an awesome library. But for the average developer fiddling with linear algebra is far to complicated. In this talk we''ll give you a fast track recipe to master DeepLearning challenges using the Keras framework on top of TensorFlow. We''ll start with basic image classification, show how you can implement a chat- bot and end with a Cryptocurrency price predictor. At the end of this talk you''ll know how Convolutional Neural Networks, Long-Short-Term Memory Networks and Autoencoders work and how you can apply them using Keras and TensorFlow.', 'DeepLearning for Developers - Introduction to DeepLearning with Keras and TensorFlow', '12:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('DTX-6550', '2018-11-12 16:30:00.000000000', '13:30', '2018-11-12 13:30:00.000000000', 'Micronaut is a modern, JVM-based, full stack microservices framework designed for building modular, easily testable Micro Service applications in Java, Kotlin or Groovy. Micronaut is developed by the creators of Grails and takes inspiration from lessons learnt over the years building real-world applications from monoliths to microservices using Spring, Spring Boot and Grails.

This workshop covers the current features of Micronaut for building microservices, such as:

Dependency Injection and Inversion of Control (IoC).
Configuration system.
HTTP services.
Cloud and serverless deployments.
Management & Monitoring.', 'Learn Micronaut: a reactive microservices framework for the JVM', '16:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HHU-4629', '2018-11-12 20:00:00.000000000', '19:00', '2018-11-12 19:00:00.000000000', 'In this interactive DevOps BOF, we want to discuss the past, the presence and the future of software development and delivery across functions, commonly known as DevOps. This is the platform to meet DevOps experts, upcoming DevOps experts, and the community in order to exchange experience and learn from others. Discussed topics are up to the group, but will surely again be a charming mixture of both concepts and tools.', 'DevOps: State of the Union', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WJT-1250', '2018-11-12 21:00:00.000000000', '20:00', '2018-11-12 20:00:00.000000000', 'This BOF is a discussion with Eclipse MicroProfile community member about the recent release of this project, such as MicroProfile 2.1, based on Java EE 8 specifications; the future vision, including the relationship of MicroProfile to Jakarta EE; and the current in-progress specifications. These include reactive support, concurrency, service mesh, among others. Come hear first-hand from those in the community what has been going on, what‚Äôs going on, and what‚Äôs coming up. Get your voice and opinions heard! ', 'MicroProfile: Past, Present and Future ', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PZF-8039', '2018-11-13 12:30:00.000000000', '09:30', '2018-11-13 09:30:00.000000000', 'This hands-on lab is focused on learning asynchronous programming with Kotlin coroutines. Specifically we will learn about:

* basic idea of Kotlin coroutines, suspending functions and suspending lambdas,
* how to create, launch and manage coroutines,
* internals of suspending functions and Kotlin compiler,
* CoroutineContext - its role and programming patterns,
* sharing state with Mutexes,
* concurrent programming with channels/actors and select expressions,
* interoperability with existing libraries (CompletableFuture, reactive programming libraries).', 'Creating asynchronous applications with Kotlin coroutines', '12:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RYY-1356', '2018-11-13 16:30:00.000000000', '13:30', '2018-11-13 13:30:00.000000000', 'Designed as a language that can solve hard problems, Rust released their 1.0 in 2015. Subsequently it was voted the Most Loved Language in 2016, 2017 and 2018 on the developer''s survey of StackOverflow. Firefox Quantum made Firefox over twice as fast by rebuilding the core engine in Rust. It compiles to everything from WebAssembly to Arduino Nano. In this workshop you''ll start to understand why Rust can promise thread safety without segfaults while keeping higher levels of abstraction and blazingly fast execution.

#### Topics covered
In this workshop we''ll go from installing Rust to working with some Rust concepts. The idea is to inspire further experimentation and give an idea of what Rust can do for you.

- rustup & cargo
- Rust compiler
- Struct
- Trait
- Option
- Result

Be sure to bring your own laptop!', 'Meet Rust: The speed of C, the comforts of Kotlin', '16:30', 'Hands-on Lab');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QDR-7433', '2018-11-13 20:00:00.000000000', '19:00', '2018-11-13 19:00:00.000000000', 'People often say documentation is boring. But not us!

Let''s talk about documentation. How do you write it? How do you publish it? What tools do you use? What are the current trends? How do you encourage other people to participate? How can we make documentation more approachable?

Let‚Äôs share ways to improve our documentation and to encourage others to love, appreciate, and value documentation as much as we do.', 'Writers Write! The Documentation BOF', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('EVC-1727', '2018-11-13 21:00:00.000000000', '20:00', '2018-11-13 20:00:00.000000000', 'Get the chance to meet the developers working on Apache Maven in person. Share your ideas, get proper answers to your questions and learn more about Maven. Discover unknown features or hear about the planned improvements for future releases of Maven.', 'Apache Maven BOF', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('HTY-2542', '2018-11-14 13:05:00.000000000', '13:00', '2018-11-14 13:00:00.000000000', 'As a habit I usually come to Devoxx by bicycle, sometimes as far as from Switzerland.
And this is already the seventh time.
So I have each time seen a bit more than the Devoxx-location.
This is a nice bonus to the annual visit of Devoxx and the country is quite diverse, in terms of landscape and languages...', 'Visiting Belgium: A cyclists perspective', '13:05', 'Ignite');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GMA-9130', '2018-11-14 13:10:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'Besides being useful, comments in source code can also be fun! [This legendary StackOverflow post](https://stackoverflow.com/a/482129) tells me that sometimes a well-chosen joke put into source code can lighten the mood at work and make your developer life just a bit better.

Now, because I am both a developer and a musician, I tend to use song lyrics to lighten up my code. So in this Ignite talk, I''ll demonstrate this by showing a few typical code fragments that could use some musical quality. And of course I''ll perform bits of the songs that go with it.

So are you in for a light-hearted talk on code comments - slash - a mini-concert featuring songs by Coldplay, Oasis, Adam Lambert, Imagine Dragons and many more? Please join in and feel free to sing along!', 'These Songs Would Make Some Great Code Comments', '13:10', 'Ignite');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WCH-0839', '2018-11-14 13:15:00.000000000', '13:10', '2018-11-14 13:10:00.000000000', 'Cloud environments provide everything you need to develop a conventional application as a Service, completely obscuring the underlying infrastructure. This style of software development is called ‚ÄôServerless‚Äô development.

This could be the holy grail that saves development teams from maintenance and platform/server dependence. Many development teams are in the process of maintaining a monolithic application and are planning to migrate this application to a Serverless solution for this particular reason. But is this a valid reason in the context of the monolith?

In this talk we will go through a brief history of how we got here, and look at the steps that need to be taken when you are considering such a migration. I will provide the insights from my own experience so far. Building a Serverless solution is completely different from conventional application development, which raises a ton of questions about whether this is a suitable replacement for the monolith. Development teams need to be aware of both the technical and cultural impact on their team and even the company itself before initiating the migration.', 'Thinking twice about migrating to Serverless', '13:15', 'Ignite');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QQY-4830', '2018-11-14 13:20:00.000000000', '13:15', '2018-11-14 13:15:00.000000000', 'It may be taking months to move Java EE to Eclipse, but I will get you up-to-speed with the latest Jakarta EE developments in five minutes!', 'Speed Dating with Jakarta EE', '13:20', 'Ignite');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VGW-0187', '2018-11-14 13:25:00.000000000', '13:20', '2018-11-14 13:20:00.000000000', 'In a world in motion, where developers have to crawl out of their basements and have to start communicating with SM''s, PO''s and even business people, where 360''s, retro''s and feedback workshops are no longer the future, but the now(). 
There is still one taboo left to break: talking about code flaws, smells and flavour. 
Thats where PAAF comes in.  

The Passive Aggressive Annotation Framework provides a set of type safe annotations that developers can use to express passive-aggressive statements; the framework is provided as a type safe alternative to comments.

https://github.com/nvdh/paaf/

In this talk we will walk you through the basics, do''s, don''ts, tips and tricks. 
So your team can grow, so you can grow. ', 'PAAF : The passive aggressive annotation framework', '13:25', 'Ignite');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JRS-5586', '2018-11-14 20:00:00.000000000', '19:00', '2018-11-14 19:00:00.000000000', 'An opportunity for discussing Spring Framework 5, Spring Boot 2, Spring Cloud, Project Reactor and everything around.', 'The Spring BOF', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OBJ-5334', '2018-11-14 21:00:00.000000000', '20:00', '2018-11-14 20:00:00.000000000', 'A get together of enthusiasts who are interested into running a Tweetwall for their own events - how all this began, what is new in the current edition, where the project is currently heading. ', 'TweetWalls@Devoxx - Today, Tomorrow and Beyond - A Community Get Together''', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('LSP-5748', '2018-11-15 13:45:00.000000000', '12:45', '2018-11-15 12:45:00.000000000', 'Test your knowledge about the programming language we all love: Java! With fun and interesting questions presented in a fast-paced pub quiz style which cover a wide range of Java related subjects. Bring a friend or just join up. We''ve got beer for everyone and prizes for the winning team.

We''ve got room for about 60 people, first-come first-served. We''ll make teams on the spot.', 'The Java Pub Quiz', '13:45', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QVG-0019', '2018-11-15 20:00:00.000000000', '19:00', '2018-11-15 19:00:00.000000000', 'Local variable type inference was introduced as a new Java language feature in Java SE 10.  Gone are the days of explicitly having to define the type of a variable; let the compiler do it for you with the magic of var.

At first sight, this looks like a small change that will eliminate unnecessary boiler-plate code and reduce how much typing (on the keyboard) is required to maintain strong typing (of the language).  However, as with many features, there are some unexpected nuances as well as both good and bad use cases.

In this BoF, Stuart and Simon will take a series of examples of the use of var and discuss their technical merits.  We‚Äôll involve the audience to provide different perspectives on why developers would or would not use var in these ways.

Time will be made available for attendees to provide examples they may have encountered, enabling discussion of their merits.', 'Local Variable Type Inference: Threat or Menace', '20:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WPM-1500', '2018-11-15 21:00:00.000000000', '20:00', '2018-11-15 20:00:00.000000000', 'Getting girls interested, engaged and stay with STEAM has always been challenging. With recent increased focus towards this effort, there is more awareness but needs more concentrated effort to make an impact. Even though there may be a strong desire to get our girls started with STEAM, many of us struggle to determine from where to start, what tools and techniques to use to spark their interest.
 
In this talk, we will discuss the challenges to bring and keep girls in STEAM that we have seen at Devoxx4Kids USA events, and a proven model we have been following at Devoxx4Kids USA to get kids started with STEAM as early as 2nd Grade to High School. These kids start as participants and some of them become educators and developer a critical skill of public speaking and mentoring.
', 'How to be a Mentor to Bring More Girls to STEAM?', '21:00', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NKJ-9530', '2018-11-16 11:35:00.000000000', '10:35', '2018-11-16 10:35:00.000000000', 'Now if you don''t speak French, that''s going to be tough. But if you do understand French, come join the French speaking community for the live event of Les Cast Codeurs podcast.

Les Cast Codeurs is a podcast by not so young developers that discuss the state of the Java ecosystem and the development community in general. We give news, we give opinions, we joke, we use 4 spaces for indenting, we use vim, we like strongly coupled monoliths written in weakly statically compiled bash scripts, we like the programming motherfucker manifesto.', 'Les Cast Codeurs Podcast: (with|by|for|of) developers', '11:35', 'BOF');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PGM-5344', '2018-11-12 12:30:00.000000000', '09:30', '2018-11-12 09:30:00.000000000', 'Java EE was not advancing fast enough. Enterprise Java was being left in the dust in the microservices development environment. Customers were wondering when Java EE 8 was going to complete and what it was going to contain. And, what comes after Java EE?  The answer is the Eclipse MicroProfile and Eclipse Jakarta EE projects.

In this session we will discuss and demonstrate the MicroProfile programming model for developing microservice applications.  Although MicroProfile is currently based on Java EE technologies, the expectation is that this will evolve to using the corresponding Jakarta EE technologies.  Thus, the synergy between these two Eclipse projects is already starting.

We will also discuss the current state of the Jakarta EE effort.  Demonstrating the building and testing of various Jakarta EE (EE4J) projects is also on the agenda (the exact content to be determined based on the state of the transition efforts).', 'Implementing Microservices with Jakarta EE and MicroProfile', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('FLJ-4831', '2018-11-12 16:30:00.000000000', '13:30', '2018-11-12 13:30:00.000000000', 'Do you care about speed? 
Do your users care about latency?
When performance matters, theory and intuition are initially useful guides, but soon the rubber meets the road. Write benchmarks, try several approaches, optimize at different levels of abstraction, find the bottleneck, repeat!
The Go tooling makes performance exploration approachable and exciting.
Use Pprof to discover where the time is actually spent. It''s often not where you think!
Consider writing concurrent code, when the benefits exceed the costs.
Use Trace to peek at your CPU cores: Why are they sometimes idle? Where do all these context switches come from? Is the GC responsible for my slowdown?
Write good tests, to preserve semantics across incremental refactorings.
Learn about the benchmarking idioms of the testing package.
Run the Race detector, understand what it does and why it matters.
Examine test code coverage to discover dead code and hot paths.
What the hell is a Flame Graph?
Factor in the trade-offs of memory allocation, regexps, maps, random numbers, I/O, stdlib.
Also, consider when it is wise not to optimize!', 'MADPIG: Measure and deepen performance in Go', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GCS-2598', '2018-11-12 17:15:00.000000000', '16:45', '2018-11-12 16:45:00.000000000', 'Build microservices as apps and functions and stop worrying about infrastructure.
This session will describe and demonstrate an application''s microservices deployed across Google Cloud Functions and Google App Engine.
One application, multiple services, languages, and programming paradigms. Built-in operations.', 'Google Serverless: Cloud Functions and beyond...', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('ILW-5611', '2018-11-12 18:00:00.000000000', '17:30', '2018-11-12 17:30:00.000000000', 'A great CI system is essential to ship quality code, fast. CI for Android development is a problem that has been solved before, but it gets a lot more interesting to keep the same quality and speed with hundreds of changes a day and hundreds of developers working on the same project. In this talk, Gautam will walk through the history of Android CI at Uber, the UX improvements for developers interacting with it and how it evolved into delivering release builds on every change. You will also learn how to incorporate such processes into your CI and CD workflows.', 'Dude, Where''s My Build? Android CI/CD at Uber', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('YMX-5931', '2018-11-12 18:45:00.000000000', '18:15', '2018-11-12 18:15:00.000000000', 'At I/O 2018, Google released the Firebase ML Kit which creates various exciting opportunities for Android Developers aiming to build smart apps without having to worry about the nitty-gritties of Machine Learning. 

The Firebase ML Kit APIs offer features like face detection, text recognition, object detection, etc. 
Your apps can also label a provided image for special characteristics and identify popular landmarks in a picture.

In this talk, I will outline the usage of all the 5 APIs available in Firebase ML Kit
and I‚Äôll be doing so by using a sample app that utilizes these APIs.

I will be walking you through the working of each api and you will leave the talk having sufficient knowledge of the APIs to go ahead and implement them in your own apps.
', 'Firebase ML Kit : Machine Learning made easy', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('RUD-1687', '2018-11-13 12:30:00.000000000', '09:30', '2018-11-13 09:30:00.000000000', 'The way users access the internet has changed. With the huge improvement of smartphones and mobile devices, millions of people from around the world are now using internet a lot more on a mobile device than on a desktop. 

You have a web site and you want to reach more mobile users, so you planned to crate a mobile app for that, have you considered a Progressive Web App?

During this session, we''ll see why PWA in some cases should be considered as a serious alternative to native mobile apps.

Along live coding sessions, we are going to explain the baseline of a PWA and we are going to show how to combine existing HTML5 features to create a native-app-like user experiences (Service Worker, Cache, Push Notifications, Offline Storage, Background sync...).', 'Progressive Web Apps in action!', '12:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NQB-4188', '2018-11-13 16:30:00.000000000', '13:30', '2018-11-13 13:30:00.000000000', 'Have you ever wondered how Youtube and Spotify can possibly recommend new videos and songs to you? Having heard that machine learning plays an important role, you may be wondering what all the fuss is about. How does it work? How can you get started using it yourself?

This session serves as an introduction to machine learning, based on a practical use case. We will be utilizing Spotify''s API to extract features from music, before we visualize and cluster the data, and also train classifiers for discovering new music. We will give you an introduction to several algorithms used for clustering and classification of data. In addition to digging into some traditional machine learning algorithms, such as K-means and SVM, we will also take a look at artificial neural networks, which in recent years have produced remarkable results in various fields. For all of this, we will be using frameworks like Keras and Sklearn.

If machine learning has been a mysterious domain to you, this session will most likely leave you with a greater understanding of the process and aid you in how to set up projects of your own.', 'Create Your Own Music Recommendation System Using Machine Learning', '16:30', 'Deep Dive');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('XKV-0635', '2018-11-13 17:15:00.000000000', '16:45', '2018-11-13 16:45:00.000000000', 'Suppose all of your docker images have a security vulnerability, now how do you force a rebuild of these images? How do you deploy the new images without breaking things? In this talk, you‚Äôll learn how to push and audit cascading security updates to hundreds of docker images. All of the tooling we will use is open source so you can easily take advantage of it.You will also learn how to integrate the cascading updates into your CI/CD system which enables performing a verified cascade in the correct order.', 'Auto-Cascading Security Updates Through Docker Images', '17:15', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JJC-9386', '2018-11-13 18:00:00.000000000', '17:30', '2018-11-13 17:30:00.000000000', 'So you‚Äôve deployed your artifacts to a serverless runtime. But how much control have you actually given up? Can you monitor the user experience of your app? Can you still profile your app? Did you even discuss SLI/SLO/SLA in the first place?

DevOps isn‚Äôt going away with serverless, it‚Äôs actually becoming even more important with CI/CD and blue/green deployments remaining key best practices.

In this session we‚Äôll discuss the importance of proper DevOps principles (SRE at Google) and demonstrate Application Performance Monitoring (APM) tooling for serverless development.', 'DevOps in a serverless world - best practices and tools', '18:00', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IJL-5930', '2018-11-13 18:45:00.000000000', '18:15', '2018-11-13 18:15:00.000000000', 'This is a breakdown of how the open source VoxxedDays app works: networking, local storage, and UI. It touches on which parts of the app were straightforward to build with Flutter, which aspects presented challenges, and the rationale for important design decisions such as which state management approach to take and how to handle deserialization of data from the VoxxedDays API.', 'Building the VoxxedDays App with Flutter ', '18:45', 'Tools-in-Action');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NMJ-6152', '2018-11-14 10:00:00.000000000', '09:30', '2018-11-14 09:30:00.000000000', 'Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we''ll highlight several applications we''re using to run Devoxx Belgium.', 'Welcome - Overflow', '10:00', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VAA-3588', '2018-11-14 10:30:00.000000000', '10:00', '2018-11-14 10:00:00.000000000', 'In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they‚Äôre not as scary as you may think, and many developers have already adjusted to them.', ' Java in 2018: Change is the Only Constant - Overflow', '10:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('IZD-2481', '2018-11-14 11:30:00.000000000', '10:30', '2018-11-14 10:30:00.000000000', 'We''ve, as humans, been programming only for the past few decades. We''ve come a long way in some ways, yet we''ve advanced only marginally on other fronts. We hear folks tell us, ''oh, things change so fast'' and yet we''ve changed only a little in the way we develop software. Imagine where we''d be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We''re poised for the next big change. In this presentation we''ll learn about the perfect storms that''s influencing that change and the directions that the programming field is evolving in.', 'Spearheading the future of programming - Overflow', '11:30', 'Keynote');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NXW-2049', '2018-11-14 12:50:00.000000000', '12:00', '2018-11-14 12:00:00.000000000', 'Ever wondered how improvisation applies to work and life in general? Are you looking for techniques to increase your team‚Äôs creativity? How about more positive-attitude team meetings? How about saying ‚ÄúYes and‚Äù instead of ‚ÄúYes but‚Äù? Have you heard about the importance of plussing, a term introduced by Walt Disney?

Join me to this  interactive session. There will be plenty of interaction, games, fun and brainstorming. Duration is ~45 mins. Want to read more before the talk? I totally recommend Creativity, Inc, from Ed Catmull, president of Pixar and Disney animations.

Only "yes and" answers accepted!', 'Ways of improv-ing work and life [#DifferentKindOfTalk] ', '12:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('WBZ-0306', '2018-11-14 13:20:00.000000000', '13:05', '2018-11-14 13:05:00.000000000', 'Dyslexia is generally considered a disability, prejudices are always in place (they are slow and can not read or write). To be honest some of it is true but they have other qualities that make them excellent developers.

There A lot of misconceptions about dyslexia. Did you know that approximately 2 out of 10 persons are dyslexic? and 6 out of 10 do not even know it or are trying to hide it?

After a short introduction on what dyslexia actually is I will present you with some interesting facts that you probably did not know. From there on I take you on a ride into the mind of a dyslexic. His reading skills, the problems he faces and more important their perception of the world. 
The way that we perceive the world allows us to have a different look at anything we encounter. This different look is sometimes referred to as thinking outside the box. 

At the end of the presentation, I hope that I reframed this perceived weakness as being a powerful tool. And some pointers on how to interact with us, it is not that different from any other person.', 'The dyslexic programmer, creativity did not kill the cat', '13:20', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('KZM-9373', '2018-11-14 13:45:00.000000000', '13:30', '2018-11-14 13:30:00.000000000', 'Come learn about Jakarta EE. I will talk about what Jakarta EE is, how specification and developments processes are organized, what projects it consists of.', 'From Java EE to Jakarta EE', '13:45', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('UHZ-1226', '2018-11-14 14:50:00.000000000', '14:00', '2018-11-14 14:00:00.000000000', 'Server-side development at Apple involves a highly distributed set of heterogenous services that must communicate over the network. There is a wide variation of use cases, and each has unique operational requirements. The goals are to minimize latency and memory overhead while maximizing throughput. However, achieving these goals may introduce complexity in the application and increase maintenance costs. One mitigation technique to reduce complexity is to invest in commonly used networking frameworks and libraries. Apple‚Äôs strategy involves leveraging and contributing to open source projects as well as developing internal software. Come to this session to learn how Apple uses frameworks as a technique to address the challenges of server-side development.', 'Enabling Microservices @ Apple', '14:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('KIB-7932', '2018-11-14 16:00:00.000000000', '15:10', '2018-11-14 15:10:00.000000000', 'As a financial institution, security is of the outmost concern. At the same time we need to provide an always-on service to our customers. This means that we need to create resilient APIs and in addition we need to discover and connect to them in a secure way which exceeds standard service discovery. In addition we offer our internal developers the same promises as our 3rd party developers in terms of accessibility and backwards compatibility. Moreover, the platform needs to scale to support over 27 countries and thousands of engineers creating hundreds of services.

This talk takes us on a journey on how we manage, register, discover, expose and consume our APIs at ING in a secure and resilient manner.', 'Building a Resilient, Secure, and Maintainable API Platform (using Finagle)', '16:00', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SMQ-6460', '2018-11-14 17:30:00.000000000', '16:40', '2018-11-14 16:40:00.000000000', 'This is both a GraphQL crash-course for a busy Java developer, and a collection of practical recipes for implementing common features, optimizing performance and simply avoiding the usual pitfalls.
You''ll learn how to take full advantage of the current ecosystem, and be ready to add a powerful GraphQL API to your current Java project in no time.', 'Your GraphQL field guide', '17:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('QFG-1352', '2018-11-14 18:40:00.000000000', '17:50', '2018-11-14 17:50:00.000000000', 'Teams are different, projects are different, problems are different. Why are we still trying to squeeze teamwork into department processes, adding bureaucracy, and having organizational layers that makes it harder and much slower to get work done?

Join Sven Peters, former lead evangelist at Atlassian now K15t, as he talks about creating a Team Playbook by collecting practices from all teams in an organizations. No end-to-end process, no strict development rules, just some guidelines. You‚Äôll learn tons of plays like goal setting with OKRs, decision making with DACIs, team improvements with health monitors, finding risks with premortem‚Äôs, and many more. 

This talk will teach you how to utilize a playbook for more autonomy by providing teams with the freedom to pick what works in their environment.', 'Less Process, more Guidance with a Team Playbook', '18:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('OGX-2527', '2018-11-15 10:20:00.000000000', '09:30', '2018-11-15 09:30:00.000000000', 'Machine learning has a big impact on the world. In this presentation, we will look at advancements in robotic sailing and talk about our own plans to use machine learning to go sailing. Follow us on our journey to build an autonomous boat that can sail around the world. Starting with a standard RC boat on the local pond.', 'Adventures in autonomous sailing', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SXS-0514', '2018-11-15 11:30:00.000000000', '10:40', '2018-11-15 10:40:00.000000000', 'In Java 8 functional style programming was introduced in Java. Java 9 extended this with some nice new features. For many people it is hard to grasp the idea of functional style programming after so many years of purely working in the imperative OOP style. The opportunities Java gives us out of the box are massive on the other hand with great power comes great responsibility. Let me point out common mistakes that are made when integrating functional style programming in your every day Java project and how to prevent this. This way you can make better, cleaner and more readable code. But even more important, you will be able to utilize the functional code constructions in Java 9 to it''s full potential!.. and maybe, you even start to like it.', 'Common mistakes made in Functional Java', '11:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('JDV-5869', '2018-11-15 12:40:00.000000000', '11:50', '2018-11-15 11:50:00.000000000', '**Deep learning** is considered one of the major breakthroughs in modern AI research. In this talk we will give you an introduction to deep learning from a practical point of view. 

We will show you how to run your model on a *neural compute* stick and give you an insight into what possible pitfalls you might en*countr* when building your own deep learning solution. By comparing the different frameworks and languages that support deep learning we‚Äôll try to guide you in determining what framework best suits your needs. We will learn how you can leverage the predictive power of existing models such as VGGNet, ResNet, Inception, ... and train them for your specific problem.', 'Deep learning, Devoxx crowd counting in realtime', '12:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('GIM-3918', '2018-11-15 13:10:00.000000000', '12:55', '2018-11-15 12:55:00.000000000', 'When I started out exploring machine learning I often faced the problem of choosing the most appropriate algorithm for my specific problem. In this presentation I will try to explain basic concepts and give you an intuitive approach to using different algorithms for different tasks. By the end of this presentation you‚Äôll know which category of algorithms is most suited for your problem.', 'Machine learning algorithms, choosing the correct algorithm for your problem', '13:10', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('LGY-4956', '2018-11-15 13:35:00.000000000', '13:20', '2018-11-15 13:20:00.000000000', 'JSON, Graph, Relational, or just Key/Value? Which data model should you pick for your app to use? Does it matter? What are the benefits, what the trade-offs? So many choices and yet no good answers out there on the web. Look no further! In this talk you will learn the concepts of each of the popular data models, where they shine and where they shouldn''t be your first choice.', 'Polyglot Persistence - Which Data Model to pick for your Workload?', '13:35', 'Quickie');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('NXA-9877', '2018-11-15 14:40:00.000000000', '13:50', '2018-11-15 13:50:00.000000000', 'Serverless is ushering in a new way of building and shipping applications ‚Äì where applications and scaled and managedautomatically, allowing you to ship apps faster. Come learn with the builders of Azure Functions how the open-sourced runtime was built, the capabilities it brings, and how it enables hosting of serverless in any cloud or environment. Will cover how the runtime can be extended for new data sources and sinks, and Java patterns for building and shipping Java apps faster.', 'A peek behind the curtain of Serverless', '14:40', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('VGJ-4911', '2018-11-15 15:50:00.000000000', '15:00', '2018-11-15 15:00:00.000000000', 'How do quantum computers work? What is a qubit? What the hell happened to Schr√∂dinger''s cats? During this talk we''ll together unravel the mysteries of entangled qubits. We''ll explain the basics of quantum computing in simple and fun ways, including visual demonstrations with polarsation filters and a skippyball (known as Mr Qubit).

We''ll even build an actual working quantum computer.... tribute, a simulator, in Java! 

And I''ll explain how larger quantum algorithms work by explaining the quantum benefits in Shor''s Prime Factoring algorithm.

But beware, this talk isn''t for the faint hearted. We''ll keep away from all the unnecessary complicated math, but if Math.random() is unlucky we might kill some more cats.', 'Untangling the mysteries of qubits', '15:50', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('TZJ-2808', '2018-11-15 17:20:00.000000000', '16:30', '2018-11-15 16:30:00.000000000', 'If you''re familiar with the **Reactor** `Flux` API but have always wondered what
exactly was happening at runtime, look no further!

In this session, we''ll observe various instances of the majestic `Flux` and `Mono`
in their natural habitat, the JVM. We''ll look past the APIs and Reactive Stream
concepts, towards less abstract matters such as the Reactor execution model 
(is there even such a thing?).

What is the difference between assembly time and execution time? What is work
stealing? Why does nothing happen until we subscribe? What is operator fusion?
Magnets, how do they even work?

Come join us and we''ll try to answer all of these questions, and more!', 'Flight of the Flux: a look at Reactor''s execution model', '17:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('KEC-6864', '2018-11-15 18:30:00.000000000', '17:40', '2018-11-15 17:40:00.000000000', 'In this presentation, we''ll discuss the basics of machine learning, and learn how to use pre-built ML models - right in the web browser! We''ll use a pre-trained model, load it up in the browser, and build a Web application that allows us to query the IMDB dataset - all without going to a server. We''ll use Tensorflow.js, take a standard HD5 Tensorflow trained model, and use it right in the web browser!', 'Applied Machine Learning in the Browser with Tensorflow.js', '18:30', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('SXM-2997', '2018-11-16 10:20:00.000000000', '09:30', '2018-11-16 09:30:00.000000000', 'Microservices gave us fine-grained, replaceable components. Lambdas give us even finer event-driven functions. But both these paradigms have one common problem, handling data. One of the most interesting and provocative ideas to arise from the stream processing community is the use of streaming systems like Kafka as a storage layer that makes all types of data available to stream processors. 

In this talk we‚Äôll look at how events can be captured, streamed and processed on and across clouds. We''ll explore the relationship between event storage, event sourcing, stream processing and FaaS. Finally we''ll see how we can best manage the stateful operations that are necessary in all real-world systems, whether they''re based on microservices, functions or full-blown streaming systems.  ', 'Streaming Data for the Cloud Native Generation', '10:20', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('MKA-5385', '2018-11-16 11:25:00.000000000', '10:35', '2018-11-16 10:35:00.000000000', 'When developing FundRequest we noticed that building blockchain applications is not a trivial thing to do. The learning curve is steep and there are major pitfalls to make a (d)app scaleable, let alone user friendly. In short, end users should not be rocket scientists to use blockchain based applications. 

This is why we came up with Arkane Network. Arkane gives app developers the power to develop blockchain applications without needing the in-depth blockchain knowledge. This allows them to focus on the application, their users and optimising the str experience. Our APIs can be used by developers and businesses to make blockchain accessible to all.

We will explore how we can use these API''s to start building an application.', 'Building blockchain apps with zero knowledge', '11:25', 'Conference');
INSERT INTO PUBLIC.TALK (ID, END_TIME, FROM_TIME, START_TIME, SUMMARY, TITLE, TO_TIME, TYPE) VALUES ('PWG-7081', '2018-11-16 12:30:00.000000000', '11:40', '2018-11-16 11:40:00.000000000', 'Explaining how clustering works in general, and Akka Cluster specifically, is well worth the effort. Ask anyone who "gets it". As someone who has taught Akka Cluster courses many times over, I was always left unsatisfied after explaining the key concepts behind it in front of a white board. What I will explain and demonstrate live using a 5-node Raspberry-Pi based Akka Cluster, is how a powerful visualisation of the state of the nodes in a cluster can transform this complicated topic into one that is easy to grasp for anyone. Not only that: my personal experience has shown that it can actually transform a rather passive observer into someone who starts asking questions that demonstrate the fact that they fully grasp it. The fact that we use a physical cluster to demo and explain Akka Cluster is instrumental for this. I will conclude the talk by giving an overview how the Raspberry-Pi cluster is built along with the tooling that is used to put the demos together.', 'Understanding Akka Cluster Through Raspberry-Pi Cluster Visualization', '12:30', 'Conference');INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CFL-7665', 'e14ef4212ffd330e97f9a0ff3420fc27714d4b0d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CFL-7665', 'a733dc53923e5acd86780590978c563ce1e2582e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HJU-1325', 'af8a385bb3e6caef5337c94d51e0999994e120e5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WDP-2014', 'ff0eb37df830d5236a41d278f7d71c98461d775f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EJC-1239', '8551616e8ea37d9a0c962b022afc9f6b377790f6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EHE-0587', '5d72df99a9534dc88b752508970034f37b476ade');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BLI-5468', 'e14ef4212ffd330e97f9a0ff3420fc27714d4b0d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BLI-5468', 'a733dc53923e5acd86780590978c563ce1e2582e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MTM-6628', '7c3e49bf489644eeefdd3d85100b474c28c41086');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LJT-6211', '8107d6242333f09d50f5cabe954fa611c2215c31');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LJT-6211', 'ac63ccacfadd16102fe70327a20e2faa6933bca6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BVD-3316', '813877751b36813246ddf5336298adb8047ead5d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FSN-9751', 'f325eea5554d5773dbcb919b9e59b551571910be');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HRI-0501', '05b9d537f1895a60adc4dbc25b6af2d1ef458854');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CCV-1306', 'bd2f55b11bacf7aa2791921b48dd589c3567bc81');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XAZ-6526', 'af8a385bb3e6caef5337c94d51e0999994e120e5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NUP-3481', 'f004137d03b2687edb58d424b9ee99e2b14dbe56');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('AVV-0576', 'f325eea5554d5773dbcb919b9e59b551571910be');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WZW-2858', 'fd71b90351915730a22a0e5a1e48f1618ad2ff3d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IZL-6493', 'bd2f55b11bacf7aa2791921b48dd589c3567bc81');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NDV-3586', '1456a8892fff6e3a1313500064598e2e55e9107c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RMO-3587', '683566fa384c408462fd6d187a442889ecddccd5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CMU-6611', '21656e1a64ca2d0f0f05cc513442258bc8564d3b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SOK-9080', 'ff24d00a2dc5b5dd2700c009eb2aa82587667101');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('URM-8627', '202cc3276e3b7e3918623609feeef4d25d79a3ec');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JEV-7759', '7c3e49bf489644eeefdd3d85100b474c28c41086');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FEF-2774', 'dc8c4ba353342825dca80416b1e9176f24c7898c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YNH-3520', '2915ce1f84a7b90a7eec6fdf5cb209ccad724e48');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LPH-4584', '518923203253fdad79de57c07b162f72338b6397');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZQM-8903', 'd7fcff19b53bb354133bdc88eb77b720b39a5cbf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HGA-5787', '6abf170c2f14b452300d5b52df6818afcb6fcccf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YZA-8319', 'a8a78c50598038f7e98f0361822304bc7c858746');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YRA-9715', 'bd2f55b11bacf7aa2791921b48dd589c3567bc81');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YRA-9715', '6def69d07b56e2667ec3d3c296fbd35014e10841');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BOZ-9681', '911e2062352e61b9d4913c1b84540b698c014d24');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CFW-9146', '6def69d07b56e2667ec3d3c296fbd35014e10841');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HTS-1046', '70a37b119941970358f02ee9a30a18587550ff38');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ASZ-5494', '326f957b5bf291676606231592f9b91701075d89');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ASZ-5494', '55e2fb75fa1fd0270646a491cded06957368bb9f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UVN-2568', '3ec19fb70764bdafcd26de67c65b633be189cda5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RYF-0932', '1421cdc6da2d62b6476748ede71009cfaec49bcf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GVB-7806', 'ebc71affcab6b0cd8096485dcc252d04ee9b237e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CNS-4429', 'ce0e7c7bc221e512ab776802963ddea755f2d557');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CNS-4429', '14607f603130b340dddb453269fa5dbf4cb6761d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VND-4382', 'b6b49f4fb582f67512ac2f8aa540549c4845f843');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PWQ-4888', 'd1054b975ea621acd5b3c5e38f35ba94a9cf720f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QXC-3597', 'c36efd6e34dbfa7e4af7869ec4132248215cb717');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XXT-8012', '774d0f25362836375298c3a64a95f79195b203b7');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BGE-3228', '05b9d537f1895a60adc4dbc25b6af2d1ef458854');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VOS-4455', 'bd2f55b11bacf7aa2791921b48dd589c3567bc81');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZRG-7073', 'af8a385bb3e6caef5337c94d51e0999994e120e5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SAN-6621', '813877751b36813246ddf5336298adb8047ead5d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LND-1450', '683566fa384c408462fd6d187a442889ecddccd5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DBF-1594', '3f32ed33ec789dde464df47ea47240156e4d776d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RUG-3889', 'e0dfdaf80ce2454c3aec8a22cb16cae3f5b8a69c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IUH-5593', 'b32e73d3b070f325d520e8908113abf600da0e0a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UNX-4400', '90dd44bf81ebbf9f6181c7aab796f90f63738ff7');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DOW-5149', '5b4010d412ffa7885671b06b60ff3e2c2aeb1022');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GBL-3820', 'a733dc53923e5acd86780590978c563ce1e2582e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RIK-1487', '70a37b119941970358f02ee9a30a18587550ff38');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OAT-4417', 'e0dfdaf80ce2454c3aec8a22cb16cae3f5b8a69c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DCX-1230', '82be2dce61bcf52698dc682c175e2d9f63bf19df');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WOD-6376', '13eb124313d5f0750ea53e7882cb76e8d9925549');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SRU-1991', 'd04310f1a0277d2e0b129390c42dbd09174a2adf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SRU-1991', '1207f8e3d7f5b1acdfeedcf73a6389d3f7b79230');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UNS-7465', 'a5a5bae3854780fe1e053247e59535f5f8ce9f28');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EHM-4720', '9997ff47b162dcb9b5c582a5a1798571b0dccdab');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ANX-9706', '9cb2d39df72abda0f73bed7ae7f8b117e18acd66');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZLX-5595', '6def69d07b56e2667ec3d3c296fbd35014e10841');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RSV-7655', '14140d38392a8d13e9a6b956b3854c9fca117eb3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MVM-1794', 'b1852252dc6c0770967861a5f00482bc4e5d2444');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DPN-3235', '51bea6ea1f0db004b7ecebf43745df84424cac32');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RSA-5914', '82f7c66113c7ce4158be622212bfa2c6bff1ff83');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RSA-5914', '2796e347c7b1b17fe7fe16e514660f689e5cb355');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZVY-0180', '8551616e8ea37d9a0c962b022afc9f6b377790f6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HGK-0737', 'b392d0c94120fffc0b9d3097f70a7e6b4414ddee');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IDN-0435', 'a2907b567a0c6c152e166ac206dd80db2b6d6358');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WAA-7208', 'b90caa7c0917b501fda69e26c1e9291b1eb74c00');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WAA-7208', 'fe2be7434f576503529de8d7bee94babefa4cf4f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LWB-1541', 'bc8dc9b68fa3a1b307f3c390bb901e6a039bf9cc');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LWB-1541', 'a02192acb0341950ed3c5d275761fb0e3229eee9');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IRG-2483', '1c1de8212af21979420f98df30a48b5e2749d9d5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZOL-0451', '1a3f188524b0769c71f53c073d27e19ca2ac8872');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZOL-0451', '68b1cd23753859fa55674518f39c85ed44b75174');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PKK-6948', '8992d6c39bd902f947b65ea0fdfdaf106fa5835a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PKK-6948', '80262325062fa7c266f32af05720abe1c072a5b3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SUF-5823', 'c45aad1db09e2a310a9337c65883b8961283c0d3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OHH-8000', 'f780ca8757debe408df46e2a0d4431254dd4bc06');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NUM-1584', 'e2cc91133c04dfc7b519afc0a12059120b8eaeb1');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OBY-2356', '9d249681193d71fab73c83dd2f9b6563a01ac581');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('KCR-4786', 'd90442ecc8e0a932cd877f77c489da4c29236848');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VFH-6802', '9041552b955554c4fe4907f127e164d9395af163');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QKC-0204', '7600b5b536b12c53214ccccdb9ddc970af51aa36');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UAH-5130', '9041552b955554c4fe4907f127e164d9395af163');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UAH-5130', '82766acbc75e36c51b6151eac21e4ae0e7059f8c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YFG-1152', 'bce4acb236bd432f576479f6e6d2494c0bdd6e65');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MQB-9462', '6211aeda51006fb257c51b607c01155edfbccadf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MQB-9462', '2d5f0f508ec84fc3921c7f15a7c54a39f4f87b62');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('AGU-8136', 'bd4764498629afe21226d3c565bab675f587b6fa');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ROJ-4211', '81204e28f5a343c4f9812c91835b0ac8bffb763a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SUV-8791', 'af8a385bb3e6caef5337c94d51e0999994e120e5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PXQ-6368', '7809a48d936be76c784289605b00cecc051463eb');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BLA-3308', 'f8caf20b7f6f226bf0637bc8e077d95161561439');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MJD-6193', '6411091b413cbe292a892a0527f4d9086d421857');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JHG-7125', 'd235d137d2dae3e5ff511bc1b4d1fce34af0f8a7');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GUV-9712', '05b9d537f1895a60adc4dbc25b6af2d1ef458854');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YEF-3619', 'bd2f55b11bacf7aa2791921b48dd589c3567bc81');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EBT-8493', 'af8a385bb3e6caef5337c94d51e0999994e120e5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GOS-9302', '2a900c2cffc420a69e30499847f9b0d1a407c340');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HIW-6563', '0ecb72ee6d1bfa1b4ee7b4561a610bd53767e9de');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EUU-0069', '754d5324b56208c8c8bbc5c4947a1507037518ae');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ASN-9274', '61df4cf53c99dac155f52e52f1fcb5539dc8260b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RUF-4827', '48d3938acf24b622c1af8c6501857e393c4ff32d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WXO-3228', '299d1160a30e4518341169df2817be8c7d2cd5cf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GUL-0552', 'b93078d70c84549e34fcdccf357b5625a8d5361c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QKX-9175', '25bda30f3b8379886dcdb3229520375bb564f37a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DTR-4199', '21656e1a64ca2d0f0f05cc513442258bc8564d3b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DTR-4199', 'ee65e2019de49624e58688cf9459cea469a29687');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HKL-0782', 'e25388aa7339aae9d818086ade6e270a8bbd02d3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XCZ-7253', 'ec730bcb63b4b092743263fbd50be260c2a62437');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CON-1402', '4a65ac0ef5d538e6543827b982baacab9d343963');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ECS-4884', '5a73d74b13aa1aa44145faef290274229593baec');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PZF-7587', 'f67ea85f674b2d160e2d9d35f5f9c9888115568c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SLG-9616', 'b4630696dedf09d6da464d8301c3f31fd76225c0');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YXD-0794', '39589d3fb28398f13c05d7ea77e7496627274be4');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TXZ-1793', '6ecf0f052f036fefca9193ab827374c25381283e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TXZ-1793', '7e26b7145a391d532523afa4c2283647dc821a4b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JNV-1055', '89228e5ae40bb347e77d4c915499b10401ba5393');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('AWN-2088', '89228e5ae40bb347e77d4c915499b10401ba5393');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IDP-9797', 'a5a5bae3854780fe1e053247e59535f5f8ce9f28');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JCX-3863', '94d38a2c38639dd4c38727e62d3b125094244544');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JCX-3863', 'aad30e21bb11c3009996d5cf960b352240f2397c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PAZ-3181', 'a6998d75a88dfaed52aae5bbbe7f402b5515f85a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PAZ-3181', '4bd12c1233e3f991ddc936c8cac93e086f834a31');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WWU-4466', '6b986eacc127d88cd01978f0cbf853fa79708b71');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WXY-5778', '05afda51d686bab49c8687025d0b07b00ce45a0b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WXY-5778', 'f4d62663a544d0fbc01f78016838f5f411f2580a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UWC-9994', '326f957b5bf291676606231592f9b91701075d89');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DIP-6064', '5bb99432b2e4918ae33e5d01af1bbbb755b407d4');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LHF-2794', 'c8faf5b098667f2f6e685ac09f87b9dac1a00214');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LHF-2794', '474eaa09ec5e38ee9c71d1f4a5c73051cdaf7b02');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LHF-2794', '7a1ed3166072356dde9cbb5453540f0d02059921');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZGJ-4385', '8a840a35dc6946fe9d5eaf0c0910a53afadaf981');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZGJ-4385', 'fb3e59bad2df2b9ad64d276dd3841e7e7e2298ed');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZGJ-4385', 'f645e0482172e9950d2fd4942e9f7c2611c510c2');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZGJ-4385', '8551616e8ea37d9a0c962b022afc9f6b377790f6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZPI-8083', 'ab1e708d820405781cb1d99dc31b7d52800c749f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZPI-8083', '5fb1a718e0b8ca1b6b5f45a042ba32eaef27a0a3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZPI-8083', '3855dcd2b577d100a20e3f145ad8f0a165d5b371');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZPI-8083', '9efc4d746d8e6c4a58cdb8540be6229836705591');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HCZ-9162', 'e2cc91133c04dfc7b519afc0a12059120b8eaeb1');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YFV-9396', '694f8c83339b87ece72ccea8e9fa7588cd0dfe03');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CMV-7114', 'e43a02ca20691173da1dc75a12a7a030f72c13c0');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CMV-7114', '9d24c928e91ac666d17dca940a22448bc4b49eab');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OLG-3924', '93f8df2d142810c56d5a93269792ebdcf44a6171');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ORO-6131', '41fff4f5cd9c2959c24310d7a1c44cbe2cb19cb6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QIF-9171', '7dbca6c6316ec14fd7a30d99f5646e1aab680b8f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TOW-7592', 'd93e2531582a3f47de85f60b52dbd8aac04afb35');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TOW-7592', '5ff931f7cb9b9ddbda86b842319541e60203b55c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QCM-9359', '2bdeb54b47c914bbf0fdb00fe4a9c18ac28484a8');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HAO-1908', '96678a1719c019691241d937530700d7c0f58768');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HAO-1908', '7a1ed3166072356dde9cbb5453540f0d02059921');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HAO-1908', '4017188c2821621bd62e55f9035c7e48733b79c1');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HAO-1908', 'bb15ab5b46b4a1371708898c04565deec0549c26');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TXS-3593', 'c4a9f157fcf0e4f29df2d01d1b49fd24e12a0714');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HLB-1428', '8af78fa5cf9450329a3ecbceb4038823681de4a7');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZCZ-7641', 'd2fd0a69f8cbf47c3c05f33fc93ca59b4df47dc0');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EBQ-9546', '05b9d537f1895a60adc4dbc25b6af2d1ef458854');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FGE-5982', 'bd2f55b11bacf7aa2791921b48dd589c3567bc81');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HGP-1715', 'af8a385bb3e6caef5337c94d51e0999994e120e5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TWL-3859', '4c2cc06bee1eef61b5bc866fe1be1fc97af31945');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VUM-5564', '46b63372a59ac3b2924376a62ab13cd8a58eb65f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GBB-7040', 'fa17bb8246e76e8c9f8bc99c89673b069a0a508d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NME-5763', '7e5e21c2f5c83b30c6820362f100ca536c61a5de');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XCM-6395', 'b6b49f4fb582f67512ac2f8aa540549c4845f843');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XCM-6395', '68f9c9174f46a0a4e7300b299832604c1c973709');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XSD-5283', '7e5e21c2f5c83b30c6820362f100ca536c61a5de');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GVB-9579', 'c0e3e7970ba8146f48ac7f1357ca3e0c4dc08717');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RMB-6935', '7c3e49bf489644eeefdd3d85100b474c28c41086');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FNS-6849', 'e43a02ca20691173da1dc75a12a7a030f72c13c0');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FNS-6849', '9d24c928e91ac666d17dca940a22448bc4b49eab');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BIP-8983', '770d49323c90aafdad5c67c770ff25fba9102a42');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZWW-0582', '6abf170c2f14b452300d5b52df6818afcb6fcccf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GMH-7709', '5dd5aacbde402a87bc425d45db189d9ce7f2dd5d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GMH-7709', 'fff0c5b6085b5805cbba76d0de3e08fcbb384e5d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('BZV-3566', 'd0e5ed79b2bbac20686a75dfe162c459ab1998fd');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QZY-5499', '07162e8d688cbca41c7415ebea3164603f30dd08');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QZY-5499', '1fb4b36067019650b169a5514fb1908292305c35');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JME-2806', '8a840a35dc6946fe9d5eaf0c0910a53afadaf981');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NAR-5215', 'cdf458af94a18a9ad4553fab5ae89c87483cedc6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NAR-5215', '7054204a63b211dd9f47c9cb0a600da878c3b9ce');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('KRD-3778', '310c22bc883bdb4e264531c4863345d37ef5eaea');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('KQX-4133', '5099132faff5ad68c2b154110a7a6ab10098493f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VKZ-5277', '5fb1a718e0b8ca1b6b5f45a042ba32eaef27a0a3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VKZ-5277', 'ab1e708d820405781cb1d99dc31b7d52800c749f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VKZ-5277', '3855dcd2b577d100a20e3f145ad8f0a165d5b371');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VKZ-5277', 'd90442ecc8e0a932cd877f77c489da4c29236848');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VKZ-5277', '9efc4d746d8e6c4a58cdb8540be6229836705591');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VKZ-5277', '5e9c17ec90da31ab417f91096588f520dc40949c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VKZ-5277', 'f67ea85f674b2d160e2d9d35f5f9c9888115568c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XEV-9701', 'dd478b430a39baacd039f43c9afa192de87f9a64');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XEV-9701', 'f6b754ab8b25c55a64bf3c13eaa006764605d072');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IPW-2169', 'e2cc91133c04dfc7b519afc0a12059120b8eaeb1');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IPW-2169', '05c3cce3782f6e475908944e12c902d721c2cb4a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FNP-7703', '6a4bab44cd7903e054c5d6861a3c9aa9fcdf1826');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ENF-9465', '74f5131beed4f12319f2a40bb89cae9e07541cb3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CUL-8526', 'e6cebcbe4110635e97ac99e1d036f2de28f74a85');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WQH-2475', '8261870ee3c0a39bf4d487b4f5cc382f5808d128');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YFD-2317', 'd43a605b3a6dc64fab9bcc477db2425ef1e58adc');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RGG-9998', '0a13f99b2cca2bb7202e89490395af14e25f4270');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IIE-9549', '4f99dc6aaeb118b9779aa48d2fa9dd967c19956b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MOC-8655', '328c4f6e78329dac0b3a1bfcfecc77741e2d850b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('CCM-5193', '3c66d2e9ee9e74d799bb2b39b95db7e032904829');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HDU-1733', '8e7181a94d25fd5393989c0906bd430a2d2ee4ca');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OZS-8242', '1a2088264bf5334a99acc63cbfa1259811a86511');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FWX-0478', '34cdcd4373cfc16028ca3f54f5bd096370781754');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FWX-0478', 'a105b804e93174461454090a16790ca454bb5b7d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FWX-0478', '770ddde56d4781a265efd5cea062d59bc0d11f1a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('KBS-3133', '5bbbccbb5e380673139e8b743583a007e87838bf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OUJ-2379', '04adb85e1d09070b78823fa182d61147efcadfc3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZSJ-3068', '4bbb7f2cae3ab37825a88d4292ca5b087162c07b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ZSJ-3068', '031bf1e9597d4731ae8ab1511e2f07c3fe5d6fc9');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MTP-5918', '1928a89ba300e807b77241f27963a56da08cae76');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RBO-9456', 'd53e7337f20f97cbec513070e11f656a430a1686');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WQH-8604', '05afda51d686bab49c8687025d0b07b00ce45a0b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WQH-8604', 'de7dc423af712bbcf43bdf9089179c66becb786d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TZU-3777', '996af8485b077fbc3bb8fc027e689ff1b5d88a9a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YOK-9868', 'b6b49f4fb582f67512ac2f8aa540549c4845f843');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JLW-7651', '426f96dcd58ede72af69149e199e356814fd7173');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JLW-7651', '6e1e9a41cadfbd26e5090836a9e014fdb23a011f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HTB-7213', 'd6717e57a0254827b240950d9c69cf4c49c1cc43');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SMW-4629', '2419e1d62fbb5a0604f662c768d03a9df78beb23');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EVU-2342', 'f2c5b63050098babd4e50b10bb1a5364ab000b63');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UQE-1794', '2bdeb54b47c914bbf0fdb00fe4a9c18ac28484a8');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TUR-0907', 'd4e2cd1586f3ca7fdac864cfa5bb231cfbe0a9f4');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('THX-2097', '05b697134798104ef19ab9ddd698c6ee770e0bf4');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YHN-7922', '7054204a63b211dd9f47c9cb0a600da878c3b9ce');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YHN-7922', 'ac63ccacfadd16102fe70327a20e2faa6933bca6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('AST-3167', '882609e1f2b7d0a575d9cd0aad7ec0d0d4265a0b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TKI-5901', '11fa1c4b33e886d8bf2e0ff2f6df170ff1b1ea7b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FCN-7579', 'bce4acb236bd432f576479f6e6d2494c0bdd6e65');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('DTX-6550', '1421cdc6da2d62b6476748ede71009cfaec49bcf');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HHU-4629', '7dbca6c6316ec14fd7a30d99f5646e1aab680b8f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WJT-1250', 'b32e73d3b070f325d520e8908113abf600da0e0a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WJT-1250', 'e5e33035a476a76fcbb80a645b55a9cc524dcdbc');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WJT-1250', 'f67ea85f674b2d160e2d9d35f5f9c9888115568c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PZF-8039', '17ec2e4c9dbcdd0f5eabab51f3df4fcea7ff2336');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RYY-1356', '43a8db41c5058ab3c67a26ee8055d8653ff31282');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QDR-7433', '8551616e8ea37d9a0c962b022afc9f6b377790f6');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QDR-7433', '0d7fffaa94fefcf89147e425b41ad75c3dad4738');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QDR-7433', '718137d78eb52f6d38f3cbedc350fea9ae2a55e4');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QDR-7433', '8a840a35dc6946fe9d5eaf0c0910a53afadaf981');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EVC-1727', 'd1054b975ea621acd5b3c5e38f35ba94a9cf720f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EVC-1727', 'd3ff621339c1c31cf3c02c9cf0dd313ee1d66ff4');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('EVC-1727', 'dbf4782a4a5e5d73f7ee907a83afeb4f67b49453');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('HTY-2542', '06664f19ef5e14174e3f4cf8a85ef9be9122348e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GMA-9130', '2bd0c59e013b298412bec2dea29a5e7871fd8b35');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WCH-0839', '7fcfbb6e81e94d9f44ba94a57273dab71d279d07');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QQY-4830', '9efc4d746d8e6c4a58cdb8540be6229836705591');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VGW-0187', '2c5a6361c9396d7a0df624d828e06fd86abc5435');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VGW-0187', 'c1d4cb023f318be8e9f8356301104fddb7528458');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JRS-5586', '6474d6c1ad9cd22c652613af6555b6bcebe4a0ab');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JRS-5586', '683566fa384c408462fd6d187a442889ecddccd5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JRS-5586', '9c4e10457a0950fc9300795c9e18924f873b5360');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JRS-5586', '996af8485b077fbc3bb8fc027e689ff1b5d88a9a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OBJ-5334', '677aeb6f664940b25267abbcba0ceb41722b670d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OBJ-5334', 'b2a04e177ea96711ae329acc22c030d07870ec21');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LSP-5748', 'fe9f9d97f7c0a959e1f94f2020726e31e8cecc5e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LSP-5748', 'ea94b8f9411d49e58a8175199d1197856e291f99');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LSP-5748', '0b1260573cfc163d9313ddb11ea5a54b3ab7193f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LSP-5748', 'fc86ee0245cc9db1a0f8dfa10375055bddeaca0d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QVG-0019', '1332a3a83d0b572b701f0f5f30fe8a2310b5f030');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QVG-0019', 'a733dc53923e5acd86780590978c563ce1e2582e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WPM-1500', '151d03570697cfee4f4a6ef69c2fb907377f49b8');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NKJ-9530', '05afda51d686bab49c8687025d0b07b00ce45a0b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NKJ-9530', '8af78fa5cf9450329a3ecbceb4038823681de4a7');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NKJ-9530', '6a635bdc45a8266a5fb300f214f9207c4f399f6d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NKJ-9530', 'f3a48bb49697608a0ccd8f8fa1bb08b0f606296b');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PGM-5344', '5fb1a718e0b8ca1b6b5f45a042ba32eaef27a0a3');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PGM-5344', '9efc4d746d8e6c4a58cdb8540be6229836705591');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('FLJ-4831', 'd2fd0a69f8cbf47c3c05f33fc93ca59b4df47dc0');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GCS-2598', '44637da87c19cc989783b834193f940a7db2f366');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('ILW-5611', '7c55cebea3d51ecdce70d3ae5af047f1177c6f6c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('YMX-5931', 'b045e3abfee76eb6cac924a4469b572318b0fc1c');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RUD-1687', 'ec730bcb63b4b092743263fbd50be260c2a62437');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('RUD-1687', '1c67d2de8e86b5e360bc67885d55a91d8f54f4f1');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NQB-4188', '485043925eca47dd66470b801e45380eb5f816a5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NQB-4188', 'ea52c775d6049c9d5e3e327dee8d647e20799a30');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NQB-4188', '27d1a35d487d530572154257ce4e08de4d3cb870');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('XKV-0635', '627b7409dd42d9c3e3ef9fa4a2cd846ee7511693');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JJC-9386', '44637da87c19cc989783b834193f940a7db2f366');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IJL-5930', '68b1cd23753859fa55674518f39c85ed44b75174');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NMJ-6152', '05b9d537f1895a60adc4dbc25b6af2d1ef458854');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VAA-3588', 'bd2f55b11bacf7aa2791921b48dd589c3567bc81');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('IZD-2481', 'af8a385bb3e6caef5337c94d51e0999994e120e5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NXW-2049', '3a43de36b97f10207c9b22efa2227b0bf912575e');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('WBZ-0306', '3d10363c133f1fdfc57f353a7311a736fd20ab4f');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('KZM-9373', '3855dcd2b577d100a20e3f145ad8f0a165d5b371');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('UHZ-1226', 'e396c2baaa0a21fcebd8c801ead0f069b1b77b5d');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('KIB-7932', 'f52b2b1edecb0fe4358703c4d6506e76c7f2c4a0');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SMQ-6460', '81204e28f5a343c4f9812c91835b0ac8bffb763a');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('QFG-1352', 'c7880e3011bac082f53cc2d7bd15cf54224da213');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OGX-2527', '8ed4f680bfebed370dde93a7dd5954fafd733be9');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('OGX-2527', '9136a18c007e3aff9efd4ce9b21bfb5906a89533');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SXS-0514', '6b986eacc127d88cd01978f0cbf853fa79708b71');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JDV-5869', 'ca40289712cebf526b73a6a05cf72030d907b8fb');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('JDV-5869', '2172f94ba3e3cef5e533958379002a7095467ddc');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('GIM-3918', '485043925eca47dd66470b801e45380eb5f816a5');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('LGY-4956', 'e7a0ff8b08e1941ae25541c393dfd255c665d027');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NXA-9877', '0e208f129cb120b4926c982a43fabe1138c7b816');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('NXA-9877', 'd38a0b2d49fec7f66ace5d5817a9359de138a3fa');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('VGJ-4911', 'c199a16d57aaee4d986c65d118d86e1beae5d363');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('TZJ-2808', '6474d6c1ad9cd22c652613af6555b6bcebe4a0ab');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('KEC-6864', '05b697134798104ef19ab9ddd698c6ee770e0bf4');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('SXM-2997', '44a79797e2acb1d1b5e87ecb342788b1642f32f8');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('MKA-5385', '7189f4a2dfb7199ed684a781cce2d82f99e6e596');
INSERT INTO PUBLIC.TALK_SPEAKERS (TALK_ID, SPEAKERS_UUID) VALUES ('PWG-7081', 'f6be30c224fa250ab01c56d11b043036b51f4599');INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-12', 'CFL-7665');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-12', 'HJU-1325');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-12', 'WDP-2014');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-12', 'EJC-1239');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-12', 'EHE-0587');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-13', 'BLI-5468');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-13', 'MTM-6628');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-13', 'LJT-6211');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-13', 'BVD-3316');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-13', 'FSN-9751');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'HRI-0501');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'CCV-1306');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'XAZ-6526');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'NUP-3481');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'AVV-0576');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'WZW-2858');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'IZL-6493');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'NDV-3586');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'RMO-3587');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-14', 'CMU-6611');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'SOK-9080');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'URM-8627');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'JEV-7759');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'FEF-2774');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'YNH-3520');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'LPH-4584');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'ZQM-8903');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'HGA-5787');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-15', 'YZA-8319');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-16', 'YRA-9715');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-16', 'BOZ-9681');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room8', '2018-11-16', 'CFW-9146');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-12', 'HTS-1046');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-12', 'ASZ-5494');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-12', 'UVN-2568');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-12', 'RYF-0932');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-12', 'GVB-7806');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-13', 'CNS-4429');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-13', 'VND-4382');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-13', 'PWQ-4888');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-13', 'QXC-3597');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-13', 'XXT-8012');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'BGE-3228');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'VOS-4455');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'ZRG-7073');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'SAN-6621');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'LND-1450');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'DBF-1594');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'RUG-3889');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'IUH-5593');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'UNX-4400');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-14', 'DOW-5149');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'GBL-3820');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'RIK-1487');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'OAT-4417');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'DCX-1230');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'WOD-6376');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'SRU-1991');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'UNS-7465');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'EHM-4720');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'ANX-9706');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-15', 'ZLX-5595');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-16', 'RSV-7655');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-16', 'MVM-1794');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room5', '2018-11-16', 'DPN-3235');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-14', 'RSA-5914');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-14', 'ZVY-0180');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-14', 'HGK-0737');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-14', 'IDN-0435');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-14', 'WAA-7208');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-14', 'LWB-1541');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-14', 'IRG-2483');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'ZOL-0451');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'PKK-6948');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'SUF-5823');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'OHH-8000');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'NUM-1584');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'OBY-2356');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'KCR-4786');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'VFH-6802');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room3', '2018-11-15', 'QKC-0204');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-12', 'UAH-5130');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-12', 'YFG-1152');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-12', 'MQB-9462');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-12', 'AGU-8136');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-12', 'ROJ-4211');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-13', 'SUV-8791');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-13', 'PXQ-6368');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-13', 'BLA-3308');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-13', 'MJD-6193');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-13', 'JHG-7125');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'GUV-9712');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'YEF-3619');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'EBT-8493');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'GOS-9302');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'HIW-6563');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'EUU-0069');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'ASN-9274');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'RUF-4827');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'WXO-3228');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-14', 'GUL-0552');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'QKX-9175');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'DTR-4199');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'HKL-0782');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'XCZ-7253');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'CON-1402');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'ECS-4884');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'PZF-7587');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'SLG-9616');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-15', 'YXD-0794');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-16', 'TXZ-1793');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-16', 'JNV-1055');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room9', '2018-11-16', 'AWN-2088');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-12', 'IDP-9797');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-12', 'JCX-3863');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-12', 'PAZ-3181');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-12', 'WWU-4466');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-13', 'WXY-5778');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-13', 'UWC-9994');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-13', 'DIP-6064');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-13', 'LHF-2794');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-14', 'ZGJ-4385');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-14', 'ZPI-8083');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-15', 'HCZ-9162');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF2', '2018-11-15', 'YFV-9396');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-12', 'CMV-7114');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-12', 'OLG-3924');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-12', 'ORO-6131');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-12', 'QIF-9171');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-12', 'TOW-7592');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-13', 'QCM-9359');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-13', 'HAO-1908');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-13', 'TXS-3593');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-13', 'HLB-1428');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-13', 'ZCZ-7641');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'EBQ-9546');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'FGE-5982');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'HGP-1715');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'TWL-3859');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'VUM-5564');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'GBB-7040');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'NME-5763');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'XCM-6395');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'XSD-5283');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-14', 'GVB-9579');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'RMB-6935');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'FNS-6849');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'BIP-8983');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'ZWW-0582');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'GMH-7709');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'BZV-3566');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'QZY-5499');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'JME-2806');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-15', 'NAR-5215');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-16', 'KRD-3778');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-16', 'KQX-4133');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room6', '2018-11-16', 'VKZ-5277');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-14', 'XEV-9701');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-14', 'IPW-2169');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-14', 'FNP-7703');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-14', 'ENF-9465');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-14', 'CUL-8526');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-14', 'WQH-2475');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-14', 'YFD-2317');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'RGG-9998');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'IIE-9549');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'MOC-8655');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'CCM-5193');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'HDU-1733');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'OZS-8242');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'FWX-0478');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'KBS-3133');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room10', '2018-11-15', 'OUJ-2379');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-14', 'ZSJ-3068');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-14', 'MTP-5918');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-14', 'RBO-9456');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-14', 'WQH-8604');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-14', 'TZU-3777');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-14', 'YOK-9868');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-14', 'JLW-7651');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'HTB-7213');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'SMW-4629');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'EVU-2342');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'UQE-1794');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'TUR-0907');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'THX-2097');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'YHN-7922');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'AST-3167');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room7', '2018-11-15', 'TKI-5901');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-12', 'FCN-7579');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-12', 'DTX-6550');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-12', 'HHU-4629');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-12', 'WJT-1250');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-13', 'PZF-8039');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-13', 'RYY-1356');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-13', 'QDR-7433');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-13', 'EVC-1727');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-14', 'HTY-2542');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-14', 'GMA-9130');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-14', 'WCH-0839');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-14', 'QQY-4830');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-14', 'VGW-0187');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-14', 'JRS-5586');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-14', 'OBJ-5334');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-15', 'LSP-5748');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-15', 'QVG-0019');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-15', 'WPM-1500');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('BOF1', '2018-11-16', 'NKJ-9530');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-12', 'PGM-5344');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-12', 'FLJ-4831');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-12', 'GCS-2598');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-12', 'ILW-5611');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-12', 'YMX-5931');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-13', 'RUD-1687');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-13', 'NQB-4188');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-13', 'XKV-0635');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-13', 'JJC-9386');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-13', 'IJL-5930');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'NMJ-6152');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'VAA-3588');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'IZD-2481');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'NXW-2049');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'WBZ-0306');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'KZM-9373');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'UHZ-1226');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'KIB-7932');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'SMQ-6460');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-14', 'QFG-1352');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'OGX-2527');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'SXS-0514');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'JDV-5869');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'GIM-3918');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'LGY-4956');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'NXA-9877');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'VGJ-4911');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'TZJ-2808');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-15', 'KEC-6864');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-16', 'SXM-2997');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-16', 'MKA-5385');
INSERT INTO PUBLIC.ROOM_SCHEDULE_TALKS (ROOM_SCHEDULE_ROOM_ID, ROOM_SCHEDULE_SCHEDULE_DATE, TALKS_ID) VALUES ('Room4', '2018-11-16', 'PWG-7081');