{
  "id" : "d49fb72a-a4a6-418e-aff0-74f3a5e8a8d1",
  "name" : "api_conferences_dvbe18_rooms_room8_wednesday",
  "request" : {
    "url" : "/api/conferences/dvbe18/rooms/Room8/wednesday",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "{\"slots\":[{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542184200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Keynote\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Welcome to the 17th edition of Devoxx Belgium.  In this welcome presentation we'll highlight several applications we're using to run Devoxx Belgium.</p>\\n\",\"id\":\"HRI-0501\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/05b9d537f1895a60adc4dbc25b6af2d1ef458854\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Stephan Janssen\"},\"name\":\"Stephan Janssen\"}],\"title\":\"Welcome\",\"lang\":\"en\",\"summary\":\"Welcome to the 17th edition of Devoxx Belgium.  In this welcome presentation we'll highlight several applications we're using to run Devoxx Belgium.\"},\"fromTime\":\"09:30\",\"toTimeMillis\":1542186000000,\"toTime\":\"10:00\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"key_Room8_wednesday_14_9h30_10h0\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542186000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Keynote\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases.  These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores.  They are disruptive, but they’re not as scary as you may think, and many developers have already adjusted to them.</p>\\n\",\"id\":\"CCV-1306\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/bd2f55b11bacf7aa2791921b48dd589c3567bc81\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Mark Reinhold\"},\"name\":\"Mark Reinhold\"}],\"title\":\"Java in 2018: Change is the Only Constant\",\"lang\":\"en\",\"summary\":\"In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases.  These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores.  They are disruptive, but they’re not as scary as you may think, and many developers have already adjusted to them.\"},\"fromTime\":\"10:00\",\"toTimeMillis\":1542187800000,\"toTime\":\"10:30\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"key_Room8_wednesday_14_10h0_10h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542187800000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Programming languages\",\"talkType\":\"Keynote\",\"track\":\"Programming languages.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>We've, as humans, been programming only for the past few decades. We've come a long way in some ways, yet we've advanced only marginally on other fronts. We hear folks tell us, 'oh, things change so fast' and yet we've changed only a little in the way we develop software. Imagine where we'd be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We're poised for the next big change. In this presentation we'll learn about the perfect storms that's influencing that change and the directions that the programming field is evolving in.</p>\\n\",\"id\":\"XAZ-6526\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/af8a385bb3e6caef5337c94d51e0999994e120e5\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Venkat Subramaniam\"},\"name\":\"Venkat Subramaniam\"}],\"title\":\"Spearheading the future of programming\",\"lang\":\"en\",\"summary\":\"We've, as humans, been programming only for the past few decades. We've come a long way in some ways, yet we've advanced only marginally on other fronts. We hear folks tell us, 'oh, things change so fast' and yet we've changed only a little in the way we develop software. Imagine where we'd be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We're poised for the next big change. In this presentation we'll learn about the perfect storms that's influencing that change and the directions that the programming field is evolving in.\"},\"fromTime\":\"10:30\",\"toTimeMillis\":1542191400000,\"toTime\":\"11:30\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"key_Room8_wednesday_14_10h30_11h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542193200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Conference\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>I'm sure you've heard about compatibility issues with upgrading to Java 9 and beyond, but did you try it yourself yet? This live coding session starts with a typical Java 8 application and runs up against and eventually overcomes the common hurdles:</p>\\n<ul>\\n<li>build system configuration</li>\\n<li>dependency analysis with <code>jdeps</code></li>\\n<li>dependencies on internal APIs and Java EE modules</li>\\n<li>split packages</li>\\n</ul>\\n<p>To get the most out of this talk, you should have a good understanding of the module system basics - afterwards you will know how to approach <em>your</em> application's migration to Java 9 and the module system.</p>\\n\",\"id\":\"NUP-3481\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/f004137d03b2687edb58d424b9ee99e2b14dbe56\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Nicolai Parlog\"},\"name\":\"Nicolai Parlog\"}],\"title\":\"To JAR Hell And Back - A Live Migration to Java 11\",\"lang\":\"en\",\"summary\":\"I'm sure you've heard about compatibility issues with upgrading to Java 9 and beyond, but did you try it yourself yet? This live coding session starts with a typical Java 8 application and runs up against and eventually overcomes the common hurdles:\\r\\n\\r\\n* build system configuration\\r\\n* dependency analysis with `jdeps`\\r\\n* dependencies on internal APIs and Java EE modules\\r\\n* split packages\\r\\n\\r\\nTo get the most out of this talk, you should have a good understanding of the module system basics - afterwards you will know how to approach *your* application's migration to Java 9 and the module system.\\r\\n\"},\"fromTime\":\"12:00\",\"toTimeMillis\":1542196200000,\"toTime\":\"12:50\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"conf_Room8_wednesday_14_12h0_12h50\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542197100000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Quickie\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>As we all know, estimating is both difficult and expensive and how often your tasks have taken longer than expected? Estimation is today one of the preferred methods for decision-making as well as the evaluation of the release dates of our projects ... but today there is an alternative: no longer estimating our tasks!</p>\\n<p>This talk is feedback on the implementation of #noEstimates on a development team for over a year. You will see what are the keys as well as the tools needed to set it up.</p>\\n\",\"id\":\"AVV-0576\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/f325eea5554d5773dbcb919b9e59b551571910be\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Julien Topçu\"},\"name\":\"Julien Topçu\"}],\"title\":\"Developers, you should stop estimating your tasks! #noEstimates\",\"lang\":\"en\",\"summary\":\"As we all know, estimating is both difficult and expensive and how often your tasks have taken longer than expected? Estimation is today one of the preferred methods for decision-making as well as the evaluation of the release dates of our projects ... but today there is an alternative: no longer estimating our tasks!\\r\\n\\r\\nThis talk is feedback on the implementation of #noEstimates on a development team for over a year. You will see what are the keys as well as the tools needed to set it up.\"},\"fromTime\":\"13:05\",\"toTimeMillis\":1542198000000,\"toTime\":\"13:20\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"quick_Room8_wednesday_14_13h5_13h20\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542198600000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Quickie\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Monolith to Microservices is a move from the complexity of one block into the runtime environment. Companies make a common mistake to think that they can implement microservices without upskilling efficiently their developers and getting them on an appropriate learning curve. Another mistake is that the IT department is often working on their own when the involvement of other departments is a key to success in this migration. Additionally, IT usually lacks clear roadmaps and a real incremental and iterative approach.\\nMost of the time, companies develop a Hype Driven Development syndrome with often only superficial knowledge and without having defined the right segregation of concerns in an environment ( monitoring, service discovering, circuit breaker, containers, etc. ). They give in to mature in-vogue architectures without solid prerequisites leading them early on to a complex architecture system (agnosticity, etc.) and decisions over the architecture set without a clear definition of boundaries and real needs (where, when, how to’s).\\nWe will see how my customers managed to get out of their migration nightmare successfully by changing their approach.</p>\\n\",\"id\":\"WZW-2858\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/fd71b90351915730a22a0e5a1e48f1618ad2ff3d\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Mike Francois\"},\"name\":\"Mike Francois\"}],\"title\":\"Monolith 2 MicroServices - Houston we've got a problem !\",\"lang\":\"en\",\"summary\":\"Monolith to Microservices is a move from the complexity of one block into the runtime environment. Companies make a common mistake to think that they can implement microservices without upskilling efficiently their developers and getting them on an appropriate learning curve. Another mistake is that the IT department is often working on their own when the involvement of other departments is a key to success in this migration. Additionally, IT usually lacks clear roadmaps and a real incremental and iterative approach.\\r\\nMost of the time, companies develop a Hype Driven Development syndrome with often only superficial knowledge and without having defined the right segregation of concerns in an environment ( monitoring, service discovering, circuit breaker, containers, etc. ). They give in to mature in-vogue architectures without solid prerequisites leading them early on to a complex architecture system (agnosticity, etc.) and decisions over the architecture set without a clear definition of boundaries and real needs (where, when, how to’s).\\r\\nWe will see how my customers managed to get out of their migration nightmare successfully by changing their approach.\"},\"fromTime\":\"13:30\",\"toTimeMillis\":1542199500000,\"toTime\":\"13:45\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"quick_Room8_wednesday_14_13h30_13h45\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542200400000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Conference\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>What’s new in Java today, and what’s coming to Java tomorrow?  We’ll start with a review some of the recent additions to the language and the platform.  We’ll then look ahead at some of the features in development that will continue to improve both developer productivity and program performance while retaining Java’s core values of readability, generality, and compatibility.</p>\\n\",\"id\":\"IZL-6493\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/bd2f55b11bacf7aa2791921b48dd589c3567bc81\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Mark Reinhold\"},\"name\":\"Mark Reinhold\"}],\"title\":\"Java, Today and Tomorrow\",\"lang\":\"en\",\"summary\":\"What’s new in Java today, and what’s coming to Java tomorrow?  We’ll start with a review some of the recent additions to the language and the platform.  We’ll then look ahead at some of the features in development that will continue to improve both developer productivity and program performance while retaining Java’s core values of readability, generality, and compatibility.\"},\"fromTime\":\"14:00\",\"toTimeMillis\":1542203400000,\"toTime\":\"14:50\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"conf_Room8_wednesday_14_14h0_14h50\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542204600000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Conference\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>We have traditionally built robust software systems by trying to avoid mistakes and by dodging failures when they occur in production or by testing parts of the system in isolation from one another. Modern methods take a very different approach based on resiliency, which promotes embracing failure instead of trying to avoid it. Resilient architectures improve observability and leverage well-known patterns such as graceful degradation, timeouts, circuit breakers and embrace chaos engineering, a discipline that promotes breaking things on purpose in order to make them more resilient to failure. In this session, will review the most useful patterns for building resilient software systems and I will introduce chaos engineering methodology and especially show the audience how they can benefit from breaking things on purpose.</p>\\n\",\"id\":\"NDV-3586\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/1456a8892fff6e3a1313500064598e2e55e9107c\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Adrian Hornsby\"},\"name\":\"Adrian Hornsby\"}],\"title\":\"Patterns for building resilient software systems\",\"lang\":\"en\",\"summary\":\"We have traditionally built robust software systems by trying to avoid mistakes and by dodging failures when they occur in production or by testing parts of the system in isolation from one another. Modern methods take a very different approach based on resiliency, which promotes embracing failure instead of trying to avoid it. Resilient architectures improve observability and leverage well-known patterns such as graceful degradation, timeouts, circuit breakers and embrace chaos engineering, a discipline that promotes breaking things on purpose in order to make them more resilient to failure. In this session, will review the most useful patterns for building resilient software systems and I will introduce chaos engineering methodology and especially show the audience how they can benefit from breaking things on purpose.\"},\"fromTime\":\"15:10\",\"toTimeMillis\":1542207600000,\"toTime\":\"16:00\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"conf_Room8_wednesday_14_15h10_16h0\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542210000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Server Side Java\",\"talkType\":\"Conference\",\"track\":\"Server Side Java.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Spring Framework 5.1 refines Spring's functional and reactive API style on a JDK 8 baseline and embraces JDK 11 for a smooth upgrade to the next long-term support generation of the JVM.</p>\\n<p>This talk illustrates the benefits of a JDK 8 baseline and the compatibility challenges on JDK 11, providing upgrade advice for Spring applications on the classpath and the module path.</p>\\n\",\"id\":\"RMO-3587\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/683566fa384c408462fd6d187a442889ecddccd5\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Juergen Hoeller\"},\"name\":\"Juergen Hoeller\"}],\"title\":\"Spring Framework 5.1 on JDK 8 & 11\",\"lang\":\"en\",\"summary\":\"Spring Framework 5.1 refines Spring's functional and reactive API style on a JDK 8 baseline and embraces JDK 11 for a smooth upgrade to the next long-term support generation of the JVM.\\r\\n\\r\\nThis talk illustrates the benefits of a JDK 8 baseline and the compatibility challenges on JDK 11, providing upgrade advice for Spring applications on the classpath and the module path.\"},\"fromTime\":\"16:40\",\"toTimeMillis\":1542213000000,\"toTime\":\"17:30\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"conf_Room8_wednesday_14_16h40_17h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room8\",\"notAllocated\":false,\"fromTimeMillis\":1542214200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Conference\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Deploying your Java application in a Kubernetes cluster could feel like Alice in Wonderland. You keep going down the rabbit hole and don’t know how to make that ride comfortable. This no-slide and code-only session will explain how a Java application can be deployed in a Kubernetes cluster. Specifically, it will explain the following:</p>\\n<ul>\\n<li>Package the application as Docker image</li>\\n<li>Create Kubernetes manifests</li>\\n<li>Create Helm charts and hosted in a repository</li>\\n<li>Test in a local environment</li>\\n<li>Debug pod using IntelliJ</li>\\n<li>Install Istio service mesh</li>\\n<li>Distributed tracing across microservices</li>\\n<li>Metrics using Prometheus/Grafana</li>\\n<li>Setup deployment pipeline</li>\\n<li>Migrate application from a dev to prod in Cloud</li>\\n<li>Change application, show Canary and A/B</li>\\n</ul>\\n\",\"id\":\"CMU-6611\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/21656e1a64ca2d0f0f05cc513442258bc8564d3b\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Arun Gupta\"},\"name\":\"Arun Gupta\"}],\"title\":\"Java developer’s journey in Kubernetes land\",\"lang\":\"en\",\"summary\":\"Deploying your Java application in a Kubernetes cluster could feel like Alice in Wonderland. You keep going down the rabbit hole and don’t know how to make that ride comfortable. This no-slide and code-only session will explain how a Java application can be deployed in a Kubernetes cluster. Specifically, it will explain the following:\\r\\n\\r\\n- Package the application as Docker image\\r\\n- Create Kubernetes manifests\\r\\n- Create Helm charts and hosted in a repository\\r\\n- Test in a local environment\\r\\n- Debug pod using IntelliJ\\r\\n- Install Istio service mesh\\r\\n- Distributed tracing across microservices\\r\\n- Metrics using Prometheus/Grafana\\r\\n- Setup deployment pipeline\\r\\n- Migrate application from a dev to prod in Cloud\\r\\n- Change application, show Canary and A/B \"},\"fromTime\":\"17:50\",\"toTimeMillis\":1542217200000,\"toTime\":\"18:40\",\"roomCapacity\":694,\"roomName\":\"Room 8\",\"slotId\":\"conf_Room8_wednesday_14_17h50_18h40\",\"day\":\"wednesday\"}]}",
    "headers" : {
      "Content-Type" : "application/json; charset=utf-8",
      "Etag" : "v2-79145629-1731468034",
      "Links" : "<http://dvbe18.confinabox.com/api/profile/schedule>; rel=\"profile\"",
      "Vary" : "Accept-Encoding",
      "X-No-Access" : "no-origin",
      "Date" : "Wed, 15 May 2019 10:17:23 GMT"
    }
  },
  "uuid" : "d49fb72a-a4a6-418e-aff0-74f3a5e8a8d1",
  "persistent" : true,
  "insertionIndex" : 14
}