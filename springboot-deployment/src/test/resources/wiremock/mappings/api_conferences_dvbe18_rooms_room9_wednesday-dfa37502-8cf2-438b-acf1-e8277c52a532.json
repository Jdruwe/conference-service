{
  "id" : "dfa37502-8cf2-438b-acf1-e8277c52a532",
  "name" : "api_conferences_dvbe18_rooms_room9_wednesday",
  "request" : {
    "url" : "/api/conferences/dvbe18/rooms/Room9/wednesday",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "{\"slots\":[{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542184200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Keynote\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we'll highlight several applications we're using to run Devoxx Belgium.</p>\\n\",\"id\":\"GUV-9712\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/05b9d537f1895a60adc4dbc25b6af2d1ef458854\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Stephan Janssen\"},\"name\":\"Stephan Janssen\"}],\"title\":\"Welcome - Overflow\",\"lang\":\"en\",\"summary\":\"Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we'll highlight several applications we're using to run Devoxx Belgium.\"},\"fromTime\":\"09:30\",\"toTimeMillis\":1542186000000,\"toTime\":\"10:00\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"key_Room9_wednesday_14_9h30_10h0\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542186000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Keynote\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they’re not as scary as you may think, and many developers have already adjusted to them.</p>\\n\",\"id\":\"YEF-3619\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/bd2f55b11bacf7aa2791921b48dd589c3567bc81\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Mark Reinhold\"},\"name\":\"Mark Reinhold\"}],\"title\":\"Java in 2018: Change is the Only Constant - Overflow\",\"lang\":\"en\",\"summary\":\"In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they’re not as scary as you may think, and many developers have already adjusted to them.\"},\"fromTime\":\"10:00\",\"toTimeMillis\":1542187800000,\"toTime\":\"10:30\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"key_Room9_wednesday_14_10h0_10h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542187800000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Programming languages\",\"talkType\":\"Keynote\",\"track\":\"Programming languages.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>We've, as humans, been programming only for the past few decades. We've come a long way in some ways, yet we've advanced only marginally on other fronts. We hear folks tell us, 'oh, things change so fast' and yet we've changed only a little in the way we develop software. Imagine where we'd be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We're poised for the next big change. In this presentation we'll learn about the perfect storms that's influencing that change and the directions that the programming field is evolving in.</p>\\n\",\"id\":\"EBT-8493\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/af8a385bb3e6caef5337c94d51e0999994e120e5\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Venkat Subramaniam\"},\"name\":\"Venkat Subramaniam\"}],\"title\":\"Spearheading the future of programming - Overflow\",\"lang\":\"en\",\"summary\":\"We've, as humans, been programming only for the past few decades. We've come a long way in some ways, yet we've advanced only marginally on other fronts. We hear folks tell us, 'oh, things change so fast' and yet we've changed only a little in the way we develop software. Imagine where we'd be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We're poised for the next big change. In this presentation we'll learn about the perfect storms that's influencing that change and the directions that the programming field is evolving in.\"},\"fromTime\":\"10:30\",\"toTimeMillis\":1542191400000,\"toTime\":\"11:30\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"key_Room9_wednesday_14_10h30_11h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542193200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Programming languages\",\"talkType\":\"Conference\",\"track\":\"Programming languages.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Or why you should only write an eighth of the code.\\nYou live and breathe http. Most of the things you do with a computer involve it. How many tiny little http-related utils have you already created? Is it time to stop? By no means, we all do it. I'd just like to encourage you to write the next one in Go. It's a fun little language, which feels like a cross-breed between C (pointers!) and ruby (concise, powerful syntax). But how much?\\nWhy, yet another language, but my perl/python/.. does all the things? Well, it does. But go has a few things that make it super sweet, is web-scale and real fun to use!\\nOr at least come and listen how did we get rid of 87% of our codebase in a day :-)</p>\\n\",\"id\":\"GOS-9302\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/2a900c2cffc420a69e30499847f9b0d1a407c340\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Andrzej Grzesik\"},\"name\":\"Andrzej Grzesik\"}],\"title\":\"Go - one language you should try\",\"lang\":\"en\",\"summary\":\"Or why you should only write an eighth of the code.\\r\\nYou live and breathe http. Most of the things you do with a computer involve it. How many tiny little http-related utils have you already created? Is it time to stop? By no means, we all do it. I'd just like to encourage you to write the next one in Go. It's a fun little language, which feels like a cross-breed between C (pointers!) and ruby (concise, powerful syntax). But how much?\\r\\nWhy, yet another language, but my perl/python/.. does all the things? Well, it does. But go has a few things that make it super sweet, is web-scale and real fun to use!\\r\\nOr at least come and listen how did we get rid of 87% of our codebase in a day :-)\"},\"fromTime\":\"12:00\",\"toTimeMillis\":1542196200000,\"toTime\":\"12:50\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"conf_Room9_wednesday_14_12h0_12h50\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542197100000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Quickie\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Kubernetes is has become a very popular platform for running and managing your application in Docker containers. However, the basis Kubernetes YAML files are a bit cumbersome to work with. Helm is a tool which manages these deployments for you. It makes it easy to do versioning and templating of Kubernetes file. It also allows you to define dependencies between deployable components. This talk will give an introduction of Helm and discusses the most important features.</p>\\n\",\"id\":\"HIW-6563\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/0ecb72ee6d1bfa1b4ee7b4561a610bd53767e9de\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Erwin de Gier\"},\"name\":\"Erwin de Gier\"}],\"title\":\"Optimising Kubernetes deployments with Helm\",\"lang\":\"en\",\"summary\":\"Kubernetes is has become a very popular platform for running and managing your application in Docker containers. However, the basis Kubernetes YAML files are a bit cumbersome to work with. Helm is a tool which manages these deployments for you. It makes it easy to do versioning and templating of Kubernetes file. It also allows you to define dependencies between deployable components. This talk will give an introduction of Helm and discusses the most important features.\"},\"fromTime\":\"13:05\",\"toTimeMillis\":1542198000000,\"toTime\":\"13:20\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"quick_Room9_wednesday_14_13h5_13h20\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542198600000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Quickie\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>What do you think when somebody tells you they don't know? Better stop wasting time? Not quite the expert you thought they were? Or perhaps you respect their honesty? Perhaps this opens the opportunity to explore the issue together and reach a better outcome without assumptions?</p>\\n<p>What we can learn from those that admit they don't know might surprise you. I'll share some of the valuable insights I've gained from admitting there are things I didn't know and being prepared to try things with an open mind. I have seen many newcomers excel because they've admitted they don't know and many experienced people fall from refusing to admit the opposite.</p>\\n<p>Having joined a team that had finally been given the much requested green light to restart a high budget high stakes project from the ground up, I saw first hand how fear of the unknown could stop a great team of great engineers dead in their tracks. I will share my experiences of how admitting we don't know has freed us to try things without the fear of failure and, ultimately, delivered results we can all be proud of.</p>\\n\",\"id\":\"EUU-0069\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/754d5324b56208c8c8bbc5c4947a1507037518ae\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Nathan Murados\"},\"name\":\"Nathan Murados\"}],\"title\":\"Into the unknown: The power of admitting we don't know... yet\",\"lang\":\"en\",\"summary\":\"What do you think when somebody tells you they don't know? Better stop wasting time? Not quite the expert you thought they were? Or perhaps you respect their honesty? Perhaps this opens the opportunity to explore the issue together and reach a better outcome without assumptions? \\r\\n\\r\\nWhat we can learn from those that admit they don't know might surprise you. I'll share some of the valuable insights I've gained from admitting there are things I didn't know and being prepared to try things with an open mind. I have seen many newcomers excel because they've admitted they don't know and many experienced people fall from refusing to admit the opposite. \\r\\n\\r\\nHaving joined a team that had finally been given the much requested green light to restart a high budget high stakes project from the ground up, I saw first hand how fear of the unknown could stop a great team of great engineers dead in their tracks. I will share my experiences of how admitting we don't know has freed us to try things without the fear of failure and, ultimately, delivered results we can all be proud of. \"},\"fromTime\":\"13:30\",\"toTimeMillis\":1542199500000,\"toTime\":\"13:45\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"quick_Room9_wednesday_14_13h30_13h45\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542200400000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Conference\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Current application theory says that all responsibility for software should be pushed down to the actual DevOps-style team writing, delivering, and running the software. This leaves Enterprise Architect role in the dust, seemingly killing it off. In addition to this being disquieting to EAs out there who have steep mortgage payments and other expensive hobbies, it seems to drop out the original benefits of enterprise architecture, namely oversight of all IT-related activities to make sure things both don’t go wrong (e.g., with spending, poor tech choices, problematic integration, etc.) and that things, rather, go right.</p>\\n<p>I’ve spoken with several EA teams over the past few years about the changing nature of how EAs can help in a DevOps- and cloud-native-driven culture. I’ll share their experiences including what type of EA help is actually needed and helps organizations thrive.</p>\\n\",\"id\":\"ASN-9274\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/61df4cf53c99dac155f52e52f1fcb5539dc8260b\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Michael Cote\"},\"name\":\"Michael Cote\"}],\"title\":\"Rethinking enterprise architecture for DevOps, agile, & cloud native organizations\",\"lang\":\"en\",\"summary\":\"Current application theory says that all responsibility for software should be pushed down to the actual DevOps-style team writing, delivering, and running the software. This leaves Enterprise Architect role in the dust, seemingly killing it off. In addition to this being disquieting to EAs out there who have steep mortgage payments and other expensive hobbies, it seems to drop out the original benefits of enterprise architecture, namely oversight of all IT-related activities to make sure things both don’t go wrong (e.g., with spending, poor tech choices, problematic integration, etc.) and that things, rather, go right.\\r\\n\\r\\nI’ve spoken with several EA teams over the past few years about the changing nature of how EAs can help in a DevOps- and cloud-native-driven culture. I’ll share their experiences including what type of EA help is actually needed and helps organizations thrive.\"},\"fromTime\":\"14:00\",\"toTimeMillis\":1542203400000,\"toTime\":\"14:50\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"conf_Room9_wednesday_14_14h0_14h50\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542204600000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Big Data & Machine Learning\",\"talkType\":\"Conference\",\"track\":\"Big Data & Machine Learning.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Fast Data architectures provide an answer to the increasing need for the enterprise to process and analyze continuous streams of data, which helps accelerate decision making and enables faster responses to changing characteristics of their market. Apache Spark is a popular framework for data analytics. Its capabilities in the streaming domain are represented by two APIs: The low-level Spark Streaming and the more declarative Structured Streaming, which builds upon the recent advances in Spark SQL query optimization and code generation.</p>\\n<p>After a quick introduction to both APIs, we will discuss their virtues, capabilities and key differences:</p>\\n<ul>\\n<li>How to get started: ease of development.</li>\\n<li>How to deal with time: both at the processing and event level</li>\\n<li>How to deal with state: locally, distributed and its relation with time</li>\\n<li>How to migrate: functional coding strategies</li>\\n<li>How to do ML: machine learning capabilities</li>\\n</ul>\\n<p>Using practical examples from actual applications, we will provide guidance on how to choose one or even combine both APIs to implement functional and resilient streaming pipelines.</p>\\n\",\"id\":\"RUF-4827\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/48d3938acf24b622c1af8c6501857e393c4ff32d\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Gerard Maas\"},\"name\":\"Gerard Maas\"}],\"title\":\"Processing Fast Data with Apache Spark: The Tale of Two Streaming APIs\",\"lang\":\"en\",\"summary\":\"Fast Data architectures provide an answer to the increasing need for the enterprise to process and analyze continuous streams of data, which helps accelerate decision making and enables faster responses to changing characteristics of their market. Apache Spark is a popular framework for data analytics. Its capabilities in the streaming domain are represented by two APIs: The low-level Spark Streaming and the more declarative Structured Streaming, which builds upon the recent advances in Spark SQL query optimization and code generation.\\r\\n\\r\\nAfter a quick introduction to both APIs, we will discuss their virtues, capabilities and key differences:\\r\\n\\r\\n- How to get started: ease of development.\\r\\n- How to deal with time: both at the processing and event level\\r\\n- How to deal with state: locally, distributed and its relation with time\\r\\n- How to migrate: functional coding strategies\\r\\n- How to do ML: machine learning capabilities\\r\\n\\r\\nUsing practical examples from actual applications, we will provide guidance on how to choose one or even combine both APIs to implement functional and resilient streaming pipelines.\"},\"fromTime\":\"15:10\",\"toTimeMillis\":1542207600000,\"toTime\":\"16:00\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"conf_Room9_wednesday_14_15h10_16h0\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542210000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Conference\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Project Loom’s mission is to make it easier to write, debug, profile and maintain concurrent applications under heavy load. Threads are a natural and convenient concurrency construct which is being supplanted by less convenient abstractions because their implementation as OS kernel threads is insufficient for meeting performance demands, and wasteful in computing resources that are particularly valuable in the cloud. Project Loom will introduce fibers as lightweight, efficient threads managed by the Java Virtual Machine, that let developers use the same simple abstraction but with significantly better performance and lower footprint. Fibers are implemented in the JDK libraries on top of continuations in the JVM. In this session we’ll present the current status of the project, discuss implementation and design challenges, and show a demo.</p>\\n\",\"id\":\"WXO-3228\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/299d1160a30e4518341169df2817be8c7d2cd5cf\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Alan Bateman\"},\"name\":\"Alan Bateman\"}],\"title\":\"Project Loom: Fibers and Continuations for Java\",\"lang\":\"en\",\"summary\":\"Project Loom’s mission is to make it easier to write, debug, profile and maintain concurrent applications under heavy load. Threads are a natural and convenient concurrency construct which is being supplanted by less convenient abstractions because their implementation as OS kernel threads is insufficient for meeting performance demands, and wasteful in computing resources that are particularly valuable in the cloud. Project Loom will introduce fibers as lightweight, efficient threads managed by the Java Virtual Machine, that let developers use the same simple abstraction but with significantly better performance and lower footprint. Fibers are implemented in the JDK libraries on top of continuations in the JVM. In this session we’ll present the current status of the project, discuss implementation and design challenges, and show a demo.\"},\"fromTime\":\"16:40\",\"toTimeMillis\":1542213000000,\"toTime\":\"17:30\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"conf_Room9_wednesday_14_16h40_17h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room9\",\"notAllocated\":false,\"fromTimeMillis\":1542214200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Architecture & Security\",\"talkType\":\"Conference\",\"track\":\"Architecture & Security.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Microservices are everywhere. Everyone seems to be either going into that direction or is talking about doing so. But are they really the best choice for you?</p>\\n<p>Developers! Architects! Buckle up as we're going to cut through the hype. Instead of going all-in on microservices or all-in on big ball of mud, we'll introduce a third choice: the Majestic Modular Monolith! We'll look at what it brings to the table, when it may be a good fit and how it compares to the other two approaches in terms of code organization, productivity, scalability and much more. We'll look at how this can be designed and implemented in practice. Get ready. We won't shy away from the hard questions.</p>\\n\",\"id\":\"GUL-0552\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/b93078d70c84549e34fcdccf357b5625a8d5361c\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Axel Fontaine\"},\"name\":\"Axel Fontaine\"}],\"title\":\"Majestic Modular Monoliths\",\"lang\":\"en\",\"summary\":\"Microservices are everywhere. Everyone seems to be either going into that direction or is talking about doing so. But are they really the best choice for you?\\r\\n\\r\\nDevelopers! Architects! Buckle up as we're going to cut through the hype. Instead of going all-in on microservices or all-in on big ball of mud, we'll introduce a third choice: the Majestic Modular Monolith! We'll look at what it brings to the table, when it may be a good fit and how it compares to the other two approaches in terms of code organization, productivity, scalability and much more. We'll look at how this can be designed and implemented in practice. Get ready. We won't shy away from the hard questions.\"},\"fromTime\":\"17:50\",\"toTimeMillis\":1542217200000,\"toTime\":\"18:40\",\"roomCapacity\":398,\"roomName\":\"Room 9\",\"slotId\":\"conf_Room9_wednesday_14_17h50_18h40\",\"day\":\"wednesday\"}]}",
    "headers" : {
      "Content-Type" : "application/json; charset=utf-8",
      "Etag" : "v2-79145630-1731468034",
      "Links" : "<http://dvbe18.confinabox.com/api/profile/schedule>; rel=\"profile\"",
      "Vary" : "Accept-Encoding",
      "X-No-Access" : "no-origin",
      "Date" : "Wed, 15 May 2019 10:17:31 GMT"
    }
  },
  "uuid" : "dfa37502-8cf2-438b-acf1-e8277c52a532",
  "persistent" : true,
  "insertionIndex" : 108
}