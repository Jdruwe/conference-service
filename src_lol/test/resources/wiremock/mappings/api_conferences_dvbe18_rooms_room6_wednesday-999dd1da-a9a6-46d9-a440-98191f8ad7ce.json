{
  "id" : "999dd1da-a9a6-46d9-a440-98191f8ad7ce",
  "name" : "api_conferences_dvbe18_rooms_room6_wednesday",
  "request" : {
    "url" : "/api/conferences/dvbe18/rooms/Room6/wednesday",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "{\"slots\":[{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542184200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Keynote\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we'll highlight several applications we're using to run Devoxx Belgium.</p>\\n\",\"id\":\"EBQ-9546\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/05b9d537f1895a60adc4dbc25b6af2d1ef458854\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Stephan Janssen\"},\"name\":\"Stephan Janssen\"}],\"title\":\"Welcome - Overflow\",\"lang\":\"en\",\"summary\":\"Welcome to the 17th edition of Devoxx Belgium. In this welcome presentation we'll highlight several applications we're using to run Devoxx Belgium.\"},\"fromTime\":\"09:30\",\"toTimeMillis\":1542186000000,\"toTime\":\"10:00\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"key_Room6_wednesday_14_9h30_10h0\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542186000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Keynote\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they’re not as scary as you may think, and many developers have already adjusted to them.</p>\\n\",\"id\":\"FGE-5982\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/bd2f55b11bacf7aa2791921b48dd589c3567bc81\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Mark Reinhold\"},\"name\":\"Mark Reinhold\"}],\"title\":\"Java in 2018: Change is the Only Constant - Overflow\",\"lang\":\"en\",\"summary\":\"In the past year, we changed Java in three ways that we never have before: We modularized the platform, we removed some components, and we accelerated the pace of new releases. These changes aim to keep Java vibrant in an ever-changing world of competing platforms and new styles of application deployment, whether to the cloud or to app stores. They are disruptive, but they’re not as scary as you may think, and many developers have already adjusted to them.\"},\"fromTime\":\"10:00\",\"toTimeMillis\":1542187800000,\"toTime\":\"10:30\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"key_Room6_wednesday_14_10h0_10h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542187800000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Programming languages\",\"talkType\":\"Keynote\",\"track\":\"Programming languages.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>We've, as humans, been programming only for the past few decades. We've come a long way in some ways, yet we've advanced only marginally on other fronts. We hear folks tell us, 'oh, things change so fast' and yet we've changed only a little in the way we develop software. Imagine where we'd be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We're poised for the next big change. In this presentation we'll learn about the perfect storms that's influencing that change and the directions that the programming field is evolving in.</p>\\n\",\"id\":\"HGP-1715\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/af8a385bb3e6caef5337c94d51e0999994e120e5\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Venkat Subramaniam\"},\"name\":\"Venkat Subramaniam\"}],\"title\":\"Spearheading the future of programming - Overflow\",\"lang\":\"en\",\"summary\":\"We've, as humans, been programming only for the past few decades. We've come a long way in some ways, yet we've advanced only marginally on other fronts. We hear folks tell us, 'oh, things change so fast' and yet we've changed only a little in the way we develop software. Imagine where we'd be, if only von Newman had not put that bottleneck in computing... It takes a long time for the software developers to change. The last big changed happened about 20 years ago. We're poised for the next big change. In this presentation we'll learn about the perfect storms that's influencing that change and the directions that the programming field is evolving in.\"},\"fromTime\":\"10:30\",\"toTimeMillis\":1542191400000,\"toTime\":\"11:30\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"key_Room6_wednesday_14_10h30_11h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542193200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Big Data & Machine Learning\",\"talkType\":\"Conference\",\"track\":\"Big Data & Machine Learning.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>The Machine Learning field has seen so much progress lately that all developers can now build real-life smart ML-integrating applications, not only data scientists and ML researchers.</p>\\n<p>With pre-trained models and just a few lines of code, ML APIs can analyze or transform our data. Moreover, thanks to meta-learning techniques, Cloud AutoML can customize these models, solve more specific problems, and provide insights tailored to our own needs.</p>\\n<p>We'll explore what any developer can do today and we'll even try to build a custom model altogether in a live demo. Don't put your smartphone in airplane mode!</p>\\n\",\"id\":\"TWL-3859\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/4c2cc06bee1eef61b5bc866fe1be1fc97af31945\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Laurent Picard\"},\"name\":\"Laurent Picard\"}],\"title\":\"AutoML + ML APIs = machine learning for all developers\",\"lang\":\"en\",\"summary\":\"The Machine Learning field has seen so much progress lately that all developers can now build real-life smart ML-integrating applications, not only data scientists and ML researchers.\\r\\n\\r\\nWith pre-trained models and just a few lines of code, ML APIs can analyze or transform our data. Moreover, thanks to meta-learning techniques, Cloud AutoML can customize these models, solve more specific problems, and provide insights tailored to our own needs.\\r\\n\\r\\nWe'll explore what any developer can do today and we'll even try to build a custom model altogether in a live demo. Don't put your smartphone in airplane mode!\"},\"fromTime\":\"12:00\",\"toTimeMillis\":1542196200000,\"toTime\":\"12:50\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"conf_Room6_wednesday_14_12h0_12h50\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542197100000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Methodology & Culture\",\"talkType\":\"Quickie\",\"track\":\"Methodology & Culture.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>The Coding Dojo was invented to spread TDD in the development community. It turns out that coding dojos can be used to learn almost any programming technique, and not only TDD. Its Randori flavor, where everyone collaborates through the same keyboard, is less known but features many benefits. Practiced regularly, it strengthens teamwork skills like active listening, egoless programming, code review, pair programming, mob programming and coding conventions.</p>\\n<p>I’ll quickly explain how to setup your own Randori in order to improve your team on all these aspects.</p>\\n\",\"id\":\"VUM-5564\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/46b63372a59ac3b2924376a62ab13cd8a58eb65f\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Philippe Bourgau\"},\"name\":\"Philippe Bourgau\"}],\"title\":\"Boost your teamwork with Randoris\",\"lang\":\"en\",\"summary\":\"The Coding Dojo was invented to spread TDD in the development community. It turns out that coding dojos can be used to learn almost any programming technique, and not only TDD. Its Randori flavor, where everyone collaborates through the same keyboard, is less known but features many benefits. Practiced regularly, it strengthens teamwork skills like active listening, egoless programming, code review, pair programming, mob programming and coding conventions.\\r\\n\\r\\nI’ll quickly explain how to setup your own Randori in order to improve your team on all these aspects.\"},\"fromTime\":\"13:05\",\"toTimeMillis\":1542198000000,\"toTime\":\"13:20\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"quick_Room6_wednesday_14_13h5_13h20\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542198600000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Programming languages\",\"talkType\":\"Quickie\",\"track\":\"Programming languages.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<blockquote><p>In the beginning verbosity and complexity reigned. Then came Kotlin</p>\\n</blockquote>\\n<p>This pretty much sums up many presentations about Kotlin in the past two years. And it is a pretty reasonable opinion.</p>\\n<p>But let's not forget something: Kotlin is a programming language. In the end it is us who decide which code we are creating. And most of the time we seek what we envision as \\\"good\\\" code - clean, concise and understandable.</p>\\n<p>These 15 minutes will explore the darker parts. They will be dedicated to deliver \\\"evil\\\" intentions, possibilities to misuse even an appreciated language like Kotlin. So prepare for a discussion about obscurity, code injection and a little bit of ethics as spice.</p>\\n<p>You will like this talk if you...</p>\\n<ul>\\n<li>...want to do some \\\"unproductive\\\" but creative thinking</li>\\n<li>...like jumbling with language features</li>\\n<li>...simply love everything about Kotlin, even the questionable parts</li>\\n<li>...never knew anything questionable about Kotlin and are eager to learn more about it</li>\\n</ul>\\n\",\"id\":\"GBB-7040\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/fa17bb8246e76e8c9f8bc99c89673b069a0a508d\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Simon Schell\"},\"name\":\"Simon Schell\"}],\"title\":\"Evil Inspiration for Kotlin\",\"lang\":\"en\",\"summary\":\"> In the beginning verbosity and complexity reigned. Then came Kotlin\\r\\n\\r\\nThis pretty much sums up many presentations about Kotlin in the past two years. And it is a pretty reasonable opinion.\\r\\n\\r\\nBut let's not forget something: Kotlin is a programming language. In the end it is us who decide which code we are creating. And most of the time we seek what we envision as \\\"good\\\" code - clean, concise and understandable.\\r\\n\\r\\nThese 15 minutes will explore the darker parts. They will be dedicated to deliver \\\"evil\\\" intentions, possibilities to misuse even an appreciated language like Kotlin. So prepare for a discussion about obscurity, code injection and a little bit of ethics as spice.\\r\\n\\r\\nYou will like this talk if you...\\r\\n\\r\\n+ ...want to do some \\\"unproductive\\\" but creative thinking\\r\\n+ ...like jumbling with language features\\r\\n+ ...simply love everything about Kotlin, even the questionable parts\\r\\n+ ...never knew anything questionable about Kotlin and are eager to learn more about it\"},\"fromTime\":\"13:30\",\"toTimeMillis\":1542199500000,\"toTime\":\"13:45\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"quick_Room6_wednesday_14_13h30_13h45\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542200400000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Conference\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Istio, we have a problem! We've just deployed a shiny new set of micro-services and it behaves in a strange manner. Hard to say why with so many moving parts...</p>\\n<p>Let's leverage the newly installed service mesh to understand what we've deployed. Find the root problem. Fix it. And then do a proper, non trivial, blue-green deployment of the updated version.</p>\\n<p>That will involve the Service Graph, Prometheus monitoring, Grafana Dashboards, Traffic mirroring, all orchestrated in a simple manner by Istio.</p>\\n\",\"id\":\"NME-5763\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/7e5e21c2f5c83b30c6820362f100ca536c61a5de\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"David Gageot\"},\"name\":\"David Gageot\"}],\"title\":\"Istio, we have a problem! Understanding and fixing bugs with a service-mesh\",\"lang\":\"en\",\"summary\":\"Istio, we have a problem! We've just deployed a shiny new set of micro-services and it behaves in a strange manner. Hard to say why with so many moving parts...\\r\\n\\r\\nLet's leverage the newly installed service mesh to understand what we've deployed. Find the root problem. Fix it. And then do a proper, non trivial, blue-green deployment of the updated version.\\r\\n\\r\\nThat will involve the Service Graph, Prometheus monitoring, Grafana Dashboards, Traffic mirroring, all orchestrated in a simple manner by Istio.\"},\"fromTime\":\"14:00\",\"toTimeMillis\":1542203400000,\"toTime\":\"14:50\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"conf_Room6_wednesday_14_14h0_14h50\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542204600000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Server Side Java\",\"talkType\":\"Conference\",\"track\":\"Server Side Java.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>All you need to know about JHipster 5 from its lead developers. Create Web applications using Spring Boot + Angular/React and deploy it to all major cloud platforms like Heroku/AWS/GAE. Model your applications and entities using JDL v3.</p>\\n\",\"id\":\"XCM-6395\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/b6b49f4fb582f67512ac2f8aa540549c4845f843\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Deepu K Sasidharan\"},\"name\":\"Deepu K Sasidharan\"},{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/68f9c9174f46a0a4e7300b299832604c1c973709\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Julien Dubois\"},\"name\":\"Julien Dubois\"}],\"title\":\"JHipster 5 - What's new and noteworthy\",\"lang\":\"en\",\"summary\":\"All you need to know about JHipster 5 from its lead developers. Create Web applications using Spring Boot + Angular/React and deploy it to all major cloud platforms like Heroku/AWS/GAE. Model your applications and entities using JDL v3.\"},\"fromTime\":\"15:10\",\"toTimeMillis\":1542207600000,\"toTime\":\"16:00\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"conf_Room6_wednesday_14_15h10_16h0\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542210000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Conference\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Kubernetes has become the orchestrator of choice to deploy applications. But what about developer's day to day job?\\nThe more they leverage the platform, the more difficult it is to develop outside of the platform.\\nAnd developing inside containers is not always easy nor enjoyable.</p>\\n<p>Google has launched multiple Open-Source projects that focus on Developer User Experience in a Container World.</p>\\n<ul>\\n<li>Skaffold facilitates iterative development.</li>\\n<li>Distroless images offer small and secure base images.</li>\\n<li>Bazel and Jib quickly build images without Docker installed.</li>\\n<li>Kaniko securely builds images on a cluster.</li>\\n</ul>\\n<p>Come learn how those tools combined together, make a great CI/CD story for those developing for Kubernetes.</p>\\n\",\"id\":\"XSD-5283\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/7e5e21c2f5c83b30c6820362f100ca536c61a5de\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"David Gageot\"},\"name\":\"David Gageot\"}],\"title\":\"Google Open-Source Container Tools: Life of a happy developer in a container world\",\"lang\":\"en\",\"summary\":\"Kubernetes has become the orchestrator of choice to deploy applications. But what about developer's day to day job?\\r\\nThe more they leverage the platform, the more difficult it is to develop outside of the platform.\\r\\nAnd developing inside containers is not always easy nor enjoyable.\\r\\n\\r\\nGoogle has launched multiple Open-Source projects that focus on Developer User Experience in a Container World.\\r\\n\\r\\n* Skaffold facilitates iterative development.\\r\\n* Distroless images offer small and secure base images.\\r\\n* Bazel and Jib quickly build images without Docker installed.\\r\\n* Kaniko securely builds images on a cluster.\\r\\n\\r\\nCome learn how those tools combined together, make a great CI/CD story for those developing for Kubernetes.\\r\\n\"},\"fromTime\":\"16:40\",\"toTimeMillis\":1542213000000,\"toTime\":\"17:30\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"conf_Room6_wednesday_14_16h40_17h30\",\"day\":\"wednesday\"},{\"roomId\":\"Room6\",\"notAllocated\":false,\"fromTimeMillis\":1542214200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Server Side Java\",\"talkType\":\"Conference\",\"track\":\"Server Side Java.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>It seem that more and more enterprise technology is emerging that is based on Java EE. There are a lot of options to choose from, between Java EE, what is now Jakarta EE, MicroProfile, and combinations of their APIs. If we look at available application containers the number of possibilities are even higher. Which platforms, particular standards and runtimes should enterprise developers base their applications on in year 2018?</p>\\n<p>This session shows the difference between Java EE, Jakarta EE, MicroProfile and their individual specifications. We’ll how their APIs complement each other and enable us to develop applications with focus on high productivity using well-known APIs Especially cloud native applications require a few additional technical concerns, such as telemetry and resiliency that are added by the recent MicroProfile specifications. We will also see a comparison of Java Enterprise runtimes, which containers support MicroProfile, which deployment models are there, and what choice makes sense for different technology stacks.</p>\\n\",\"id\":\"GVB-9579\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/c0e3e7970ba8146f48ac7f1357ca3e0c4dc08717\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Sebastian Daschner\"},\"name\":\"Sebastian Daschner\"}],\"title\":\"Java EE, Jakarta EE, MicroProfile, Or Maybe All Of Them?\",\"lang\":\"en\",\"summary\":\"It seem that more and more enterprise technology is emerging that is based on Java EE. There are a lot of options to choose from, between Java EE, what is now Jakarta EE, MicroProfile, and combinations of their APIs. If we look at available application containers the number of possibilities are even higher. Which platforms, particular standards and runtimes should enterprise developers base their applications on in year 2018?\\r\\n\\r\\nThis session shows the difference between Java EE, Jakarta EE, MicroProfile and their individual specifications. We’ll how their APIs complement each other and enable us to develop applications with focus on high productivity using well-known APIs Especially cloud native applications require a few additional technical concerns, such as telemetry and resiliency that are added by the recent MicroProfile specifications. We will also see a comparison of Java Enterprise runtimes, which containers support MicroProfile, which deployment models are there, and what choice makes sense for different technology stacks.\"},\"fromTime\":\"17:50\",\"toTimeMillis\":1542217200000,\"toTime\":\"18:40\",\"roomCapacity\":370,\"roomName\":\"Room 6\",\"slotId\":\"conf_Room6_wednesday_14_17h50_18h40\",\"day\":\"wednesday\"}]}",
    "headers" : {
      "Content-Type" : "application/json; charset=utf-8",
      "Etag" : "v2-79145627-1731468034",
      "Links" : "<http://dvbe18.confinabox.com/api/profile/schedule>; rel=\"profile\"",
      "Vary" : "Accept-Encoding",
      "X-No-Access" : "no-origin",
      "Date" : "Wed, 15 May 2019 10:17:36 GMT"
    }
  },
  "uuid" : "999dd1da-a9a6-46d9-a440-98191f8ad7ce",
  "persistent" : true,
  "insertionIndex" : 170
}