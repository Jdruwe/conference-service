{
  "id" : "68cc6845-d861-4c2c-beee-30b0555a5a75",
  "name" : "api_conferences_dvbe18_rooms_room5_thursday",
  "request" : {
    "url" : "/api/conferences/dvbe18/rooms/Room5/thursday",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "{\"slots\":[{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542270600000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Conference\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Java 10 introduced a feature called Local Variable Type Inference, which lets programmers declare local variables using 'var' instead of using an explicit type. This feature enables one to write code that is more concise and more readable. However, it's also possible for this feature to be misused, obfuscating code instead of making it more readable. The Java Team has published a set of style guidelines that help direct programmers toward uses of 'var' that improve code quality and that help them avoid uses that detract from code quality. This session gives an overview of the new 'var' feature and describes these style rules. The presentation is liberally supplemented with code examples of both good uses and misuses of 'var'.</p>\\n\",\"id\":\"GBL-3820\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/a733dc53923e5acd86780590978c563ce1e2582e\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Stuart Marks\"},\"name\":\"Stuart Marks\"}],\"title\":\"Var with Style: Local Variable Type Inference in Java 10\",\"lang\":\"en\",\"summary\":\"Java 10 introduced a feature called Local Variable Type Inference, which lets programmers declare local variables using 'var' instead of using an explicit type. This feature enables one to write code that is more concise and more readable. However, it's also possible for this feature to be misused, obfuscating code instead of making it more readable. The Java Team has published a set of style guidelines that help direct programmers toward uses of 'var' that improve code quality and that help them avoid uses that detract from code quality. This session gives an overview of the new 'var' feature and describes these style rules. The presentation is liberally supplemented with code examples of both good uses and misuses of 'var'.\"},\"fromTime\":\"09:30\",\"toTimeMillis\":1542273600000,\"toTime\":\"10:20\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"conf_Room5_thursday_15_9h30_10h20\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542274800000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Conference\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>In the Java ecosystem, we have historically been enamored by the concept of the \\\"Application Server,\\\" the runtime engine that not only gave us portable APIs (e.g. JMS, JAX-RS, JSF, EJB) but also gave us critical runtime infrastructure for things like farm deployments, configuration, load-balancing, fail-over, distributed management and monitoring.<br  /></p>\\n<p>In this session, we are going to demonstrate how Kubernetes and OpenShift give you the critical runtime infrastructure you need for JVM-based applications whether they be Java EE, Spring, MicroProfile, Vert.x, Kotlin, etc. because in a cloud-native world, your APIs can be whatever best fit your project's requirements.</p>\\n\",\"id\":\"RIK-1487\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/70a37b119941970358f02ee9a30a18587550ff38\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Burr Sutter\"},\"name\":\"Burr Sutter\"}],\"title\":\"Kubernetes: Your Next Java Application Server\",\"lang\":\"en\",\"summary\":\"In the Java ecosystem, we have historically been enamored by the concept of the \\\"Application Server,\\\" the runtime engine that not only gave us portable APIs (e.g. JMS, JAX-RS, JSF, EJB) but also gave us critical runtime infrastructure for things like farm deployments, configuration, load-balancing, fail-over, distributed management and monitoring.  \\r\\n\\r\\nIn this session, we are going to demonstrate how Kubernetes and OpenShift give you the critical runtime infrastructure you need for JVM-based applications whether they be Java EE, Spring, MicroProfile, Vert.x, Kotlin, etc. because in a cloud-native world, your APIs can be whatever best fit your project's requirements.\"},\"fromTime\":\"10:40\",\"toTimeMillis\":1542277800000,\"toTime\":\"11:30\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"conf_Room5_thursday_15_10h40_11h30\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542279000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Programming languages\",\"talkType\":\"Conference\",\"track\":\"Programming languages.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Many JVM languages promote \\\"less boilerplate code\\\" as one of their selling points. Even updates to Java in recent years have removed unnecessary syntax. While this is clearly meant to be a Good Thing, many of us - particularly if we've been writing Java for a long time - think \\\"so what?\\\". Our IDEs can generate code, and our brains get used to ignoring the stuff that doesn't matter.</p>\\n<p>Is the removal of extraneous code from the syntax of a language necessary, or just a gimmick? How does it impact our ability to write and read code?</p>\\n<p>In this talk, Trisha will explore common coding scenarios using Java and Kotlin. We'll see what's important for developers to write (and, more importantly, read) and what can be removed. We'll also see how Java has evolved to improve our productivity as producers and consumers of code, and why understanding new languages and staying up to date with the features of Java can ultimately make your life easier.</p>\\n\",\"id\":\"OAT-4417\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/e0dfdaf80ce2454c3aec8a22cb16cae3f5b8a69c\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Trisha Gee\"},\"name\":\"Trisha Gee\"}],\"title\":\"Is boilerplate code really so bad?\",\"lang\":\"en\",\"summary\":\"Many JVM languages promote \\\"less boilerplate code\\\" as one of their selling points. Even updates to Java in recent years have removed unnecessary syntax. While this is clearly meant to be a Good Thing, many of us - particularly if we've been writing Java for a long time - think \\\"so what?\\\". Our IDEs can generate code, and our brains get used to ignoring the stuff that doesn't matter. \\r\\n\\r\\nIs the removal of extraneous code from the syntax of a language necessary, or just a gimmick? How does it impact our ability to write and read code? \\r\\n\\r\\nIn this talk, Trisha will explore common coding scenarios using Java and Kotlin. We'll see what's important for developers to write (and, more importantly, read) and what can be removed. We'll also see how Java has evolved to improve our productivity as producers and consumers of code, and why understanding new languages and staying up to date with the features of Java can ultimately make your life easier.\"},\"fromTime\":\"11:50\",\"toTimeMillis\":1542282000000,\"toTime\":\"12:40\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"conf_Room5_thursday_15_11h50_12h40\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542282900000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Quickie\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>In this session I would like to show how to run a Spring Boot application in a jshell console. We take a full advantage that Spring Boot contains all its dependencies. Not only that, with a little modification, Jshell become a powerful testing tool for Spring boot .</p>\\n\",\"id\":\"DCX-1230\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/82be2dce61bcf52698dc682c175e2d9f63bf19df\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Bowie Brotosumpeno\"},\"name\":\"Bowie Brotosumpeno\"}],\"title\":\"How to run Spring Boot with Jshell (and take advantage on it)\",\"lang\":\"en\",\"summary\":\"In this session I would like to show how to run a Spring Boot application in a jshell console. We take a full advantage that Spring Boot contains all its dependencies. Not only that, with a little modification, Jshell become a powerful testing tool for Spring boot .\"},\"fromTime\":\"12:55\",\"toTimeMillis\":1542283800000,\"toTime\":\"13:10\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"quick_Room5_thursday_15_12h55_13h10\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542284400000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Modern Web & UX\",\"talkType\":\"Quickie\",\"track\":\"Modern Web & UX.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>In this talk, we'll see how Spring WebFlux can be combined with modern HTML APIs to build reactive applications. We'll also have a quick look into the eventing service of Couchbase, and see how it can fit into the picture.</p>\\n\",\"id\":\"WOD-6376\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/13eb124313d5f0750ea53e7882cb76e8d9925549\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"François Gengler\"},\"name\":\"François Gengler\"}],\"title\":\"Reactive Web applications with Spring WebFlux & Couchbase\",\"lang\":\"en\",\"summary\":\"In this talk, we'll see how Spring WebFlux can be combined with modern HTML APIs to build reactive applications. We'll also have a quick look into the eventing service of Couchbase, and see how it can fit into the picture.\"},\"fromTime\":\"13:20\",\"toTimeMillis\":1542285300000,\"toTime\":\"13:35\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"quick_Room5_thursday_15_13h20_13h35\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542286200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Architecture & Security\",\"talkType\":\"Conference\",\"track\":\"Architecture & Security.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>You built your system, you deployed it, you rolled it up in production. Is it the end? No, it’s just a beginning. The life of your system just started. Just like a baby it will grow, evolve and wake you up in the middle of the night.</p>\\n<p>Usually at this point you start thinking about fault tolerance and error handling. Fault-tolerance concepts sound simple: modern frameworks promise to effortlessly solve it for you. But what is hiding behind the simplicity? Is there anything else that may hurt you? Let’s take a peek, and find out how to design and build truly fault tolerant Java systems.</p>\\n<p>Let’s make it real by trying failure scenarios against a live system, watching it recover in real-time - and then review the recipes (with gRPC and REST examples) that you can use right away to make YOUR code more resilient and YOUR system more robust.</p>\\n\",\"id\":\"SRU-1991\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/d04310f1a0277d2e0b129390c42dbd09174a2adf\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Mykyta Protsenko\"},\"name\":\"Mykyta Protsenko\"},{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/1207f8e3d7f5b1acdfeedcf73a6389d3f7b79230\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Alex Borysov\"},\"name\":\"Alex Borysov\"}],\"title\":\"Break me if you can: practical guide to building fault-tolerant systems (with examples from REST and gRPC polyglot stacks)\",\"lang\":\"en\",\"summary\":\"You built your system, you deployed it, you rolled it up in production. Is it the end? No, it’s just a beginning. The life of your system just started. Just like a baby it will grow, evolve and wake you up in the middle of the night. \\r\\n\\r\\nUsually at this point you start thinking about fault tolerance and error handling. Fault-tolerance concepts sound simple: modern frameworks promise to effortlessly solve it for you. But what is hiding behind the simplicity? Is there anything else that may hurt you? Let’s take a peek, and find out how to design and build truly fault tolerant Java systems. \\r\\n\\r\\nLet’s make it real by trying failure scenarios against a live system, watching it recover in real-time - and then review the recipes (with gRPC and REST examples) that you can use right away to make YOUR code more resilient and YOUR system more robust.\"},\"fromTime\":\"13:50\",\"toTimeMillis\":1542289200000,\"toTime\":\"14:40\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"conf_Room5_thursday_15_13h50_14h40\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542290400000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Modern Web & UX\",\"talkType\":\"Conference\",\"track\":\"Modern Web & UX.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>We all want to consistently ship quality software. One of the best ways to do that is by end-to-end (E2E) testing our code as it simulates the real actions of our beloved users. Let’s be frank though, E2E testing is notoriously time-consuming, expensive, slow, and often flaky. Unfortunately, these issues lead to developers doing very little to no E2E testing, and taking solace in a plethora of unit-tests that cannot fully test the intended experience of users.</p>\\n<p>We can do better. We should do better. We will do better.</p>\\n<p>We’ll explore modern tools and libraries, such as Cypress, that enable us to easily and beautifully write flake-free, reliable, deterministic E2E tests for our web applications. E2E tests will give us confidence in the software we ship down the wire.</p>\\n\",\"id\":\"UNS-7465\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/a5a5bae3854780fe1e053247e59535f5f8ce9f28\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Amir Rustamzadeh\"},\"name\":\"Amir Rustamzadeh\"}],\"title\":\"Next-Generation Web Application End-to-End Testing\",\"lang\":\"en\",\"summary\":\"We all want to consistently ship quality software. One of the best ways to do that is by end-to-end (E2E) testing our code as it simulates the real actions of our beloved users. Let’s be frank though, E2E testing is notoriously time-consuming, expensive, slow, and often flaky. Unfortunately, these issues lead to developers doing very little to no E2E testing, and taking solace in a plethora of unit-tests that cannot fully test the intended experience of users.\\r\\n\\r\\nWe can do better. We should do better. We will do better.\\r\\n\\r\\nWe’ll explore modern tools and libraries, such as Cypress, that enable us to easily and beautifully write flake-free, reliable, deterministic E2E tests for our web applications. E2E tests will give us confidence in the software we ship down the wire.\"},\"fromTime\":\"15:00\",\"toTimeMillis\":1542293400000,\"toTime\":\"15:50\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"conf_Room5_thursday_15_15h0_15h50\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542295800000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Conference\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Kubernetes and Istio provide a great foundation for orchestrating, monitoring, and scaling your apps. They're open source and work great in your data center or in any major cloud. Meanwhile, the serverless development model has empowered devs to build software faster than ever by eliminating concerns like scaling, networking, load balancing, OS patching, etc.</p>\\n<p>Come learn how you can combine the power of Kubernetes with the ease of use of serverless to create new, powerful and flexible development experiences.</p>\\n\",\"id\":\"EHM-4720\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/9997ff47b162dcb9b5c582a5a1798571b0dccdab\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Bret McGowen\"},\"name\":\"Bret McGowen\"}],\"title\":\"Bring serverless to Kubernetes with new open source tools\",\"lang\":\"en\",\"summary\":\"Kubernetes and Istio provide a great foundation for orchestrating, monitoring, and scaling your apps. They're open source and work great in your data center or in any major cloud. Meanwhile, the serverless development model has empowered devs to build software faster than ever by eliminating concerns like scaling, networking, load balancing, OS patching, etc.\\r\\n\\r\\nCome learn how you can combine the power of Kubernetes with the ease of use of serverless to create new, powerful and flexible development experiences.\\r\\n\"},\"fromTime\":\"16:30\",\"toTimeMillis\":1542298800000,\"toTime\":\"17:20\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"conf_Room5_thursday_15_16h30_17h20\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542300000000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Architecture & Security\",\"talkType\":\"Conference\",\"track\":\"Architecture & Security.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p><em>\\\"Every microservice get's its own database and then use Kafka\\\"</em> is a typical and naive advise, when reading about eventsourcing. If you approach this architectural style this way, you will probably have a really awful time ahead.</p>\\n<p>Eventsourcing and CQRS are two very useful and popular patterns when dealing with data and microservices. We often find in our customer's projects, that both have a severe impact on your future options and the maintainability of your architecture. Presentations and articles on both topics are often superficial and do not tackle real world problems like security and compliance requirements.</p>\\n<p>This combination of half-knowledge and technical confusion leads to many projects that either refactor back to a 'non-eventsourced' architecture or reduce eventsourcing to a message queue.</p>\\n<p>In this talk, I will summarize our experience while applying eventsourcing and CQRS accros multiple large financial and insurance companies over the last 5 years. We will cover the <em>Good</em>, the <em>Not so Good</em>, and the <em>'oh my god...all abandon ships!'</em> when doing eventsourcing in the real world...and see how we solved these issues.</p>\\n\",\"id\":\"ANX-9706\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/9cb2d39df72abda0f73bed7ae7f8b117e18acd66\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"David Schmitz\"},\"name\":\"David Schmitz\"}],\"title\":\"Event Sourcing - You are doing it wrong\",\"lang\":\"en\",\"summary\":\"_\\\"Every microservice get's its own database and then use Kafka\\\"_ is a typical and naive advise, when reading about eventsourcing. If you approach this architectural style this way, you will probably have a really awful time ahead.\\r\\n\\r\\nEventsourcing and CQRS are two very useful and popular patterns when dealing with data and microservices. We often find in our customer's projects, that both have a severe impact on your future options and the maintainability of your architecture. Presentations and articles on both topics are often superficial and do not tackle real world problems like security and compliance requirements.\\r\\n\\r\\nThis combination of half-knowledge and technical confusion leads to many projects that either refactor back to a 'non-eventsourced' architecture or reduce eventsourcing to a message queue.\\r\\n\\r\\nIn this talk, I will summarize our experience while applying eventsourcing and CQRS accros multiple large financial and insurance companies over the last 5 years. We will cover the _Good_, the _Not so Good_, and the _'oh my god...all abandon ships!'_ when doing eventsourcing in the real world...and see how we solved these issues.\"},\"fromTime\":\"17:40\",\"toTimeMillis\":1542303000000,\"toTime\":\"18:30\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"conf_Room5_thursday_15_17h40_18h30\",\"day\":\"thursday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542304200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Keynote\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>This talk is about the fictitious divisions we invent, and how they harm the progress of our industry.  In particular, we'll look at the supposed tension between Functional Programming and Object-Oriented Programming, and hopefully see that the tension is all in our heads.</p>\\n\",\"id\":\"ZLX-5595\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/6def69d07b56e2667ec3d3c296fbd35014e10841\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Brian Goetz\"},\"name\":\"Brian Goetz\"}],\"title\":\"FP vs OOP: Choose Two\",\"lang\":\"en\",\"summary\":\"This talk is about the fictitious divisions we invent, and how they harm the progress of our industry.  In particular, we'll look at the supposed tension between Functional Programming and Object-Oriented Programming, and hopefully see that the tension is all in our heads.\"},\"fromTime\":\"18:50\",\"toTimeMillis\":1542307800000,\"toTime\":\"19:50\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"key_Room5_thursday_15_18h50_19h50\",\"day\":\"thursday\"}]}",
    "headers" : {
      "Content-Type" : "application/json; charset=utf-8",
      "Etag" : "v2-791456261764484823",
      "Links" : "<http://dvbe18.confinabox.com/api/profile/schedule>; rel=\"profile\"",
      "Vary" : "Accept-Encoding",
      "X-No-Access" : "no-origin",
      "Date" : "Wed, 15 May 2019 10:17:27 GMT"
    }
  },
  "uuid" : "68cc6845-d861-4c2c-beee-30b0555a5a75",
  "persistent" : true,
  "insertionIndex" : 54
}