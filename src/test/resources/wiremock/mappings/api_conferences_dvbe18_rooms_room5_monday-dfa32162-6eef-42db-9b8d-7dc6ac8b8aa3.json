{
  "id" : "dfa32162-6eef-42db-9b8d-7dc6ac8b8aa3",
  "name" : "api_conferences_dvbe18_rooms_room5_monday",
  "request" : {
    "url" : "/api/conferences/dvbe18/rooms/Room5/monday",
    "method" : "GET"
  },
  "response" : {
    "status" : 200,
    "body" : "{\"slots\":[{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542011400000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Deep Dive\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l2\",\"summaryAsHtml\":\"<p>Everybody seems to be rocking with Kubernetes! Even your favorite repos at GitHub are running on top of it. Don't be the last developer/architect to board this bullet train. Come and learn a LOT in this session about Kubernetes - from getting started to staying productive.</p>\\n<p>We will provide numerous practical tips &amp; techniques that will take you from cloud newbie to cloud native.</p>\\n<ul>\\n<li>Installation &amp; Getting Started</li>\\n<li>Building &amp; Running Linux container Images</li>\\n<li>Your JVM goes boom - OOMKilled in Kubernetes</li>\\n<li>Peering inside your container</li>\\n<li>Streaming logs</li>\\n<li>IDEs and Debugging</li>\\n<li>Load-balancing and service discovery</li>\\n<li>Configuration management</li>\\n<li>Blue/green and Canary deployments</li>\\n<li>Istio Service Mesh for advanced microservices architecture</li>\\n</ul>\\n\",\"id\":\"HTS-1046\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/70a37b119941970358f02ee9a30a18587550ff38\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Burr Sutter\"},\"name\":\"Burr Sutter\"}],\"title\":\"9 Steps to Awesome with Kubernetes\",\"lang\":\"en\",\"summary\":\"Everybody seems to be rocking with Kubernetes! Even your favorite repos at GitHub are running on top of it. Don't be the last developer/architect to board this bullet train. Come and learn a LOT in this session about Kubernetes - from getting started to staying productive.\\r\\n\\r\\nWe will provide numerous practical tips & techniques that will take you from cloud newbie to cloud native.\\r\\n\\r\\n- Installation & Getting Started\\r\\n- Building & Running Linux container Images \\r\\n- Your JVM goes boom - OOMKilled in Kubernetes\\r\\n- Peering inside your container\\r\\n- Streaming logs\\r\\n- IDEs and Debugging\\r\\n- Load-balancing and service discovery \\r\\n- Configuration management\\r\\n- Blue/green and Canary deployments\\r\\n- Istio Service Mesh for advanced microservices architecture\\r\\n\"},\"fromTime\":\"09:30\",\"toTimeMillis\":1542022200000,\"toTime\":\"12:30\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"uni_Room5_monday_12_9h30_12h30\",\"day\":\"monday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542025800000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Deep Dive\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>From function source code to running in Kubernetes in 5 minutes. That's the power some of the latest open source projects can bring to your fingertips. This perceived simplicity actually hides layers of abstractions underneath. In this deep dive, we'll explore all the technology behind the scenes, from Kubernetes, Istio, Knative, to riff and Spring Cloud function.</p>\\n<p>We'll explore how Istio and Knative extend Kubernetes via Custom Resource Definitions to provide support for higher level developer concerns such as microservices autoscaling, routing across revisions of an application, and a unified eventing bus to compose event-driven workloads. Building on top of this, we'll take a look at how riff has been replatformed to run on top of Knative, while preserving its scale-on-demand Function as a Service ease of use. Finally, to tie the platform from top to bottom, we'll dive into Spring Cloud Function to see how to use Function interface to create a function that can process both synchronous HTTP requests as well as event-based messages using riff and Knative.</p>\\n\",\"id\":\"ASZ-5494\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/326f957b5bf291676606231592f9b91701075d89\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Ray Tsang\"},\"name\":\"Ray Tsang\"},{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/55e2fb75fa1fd0270646a491cded06957368bb9f\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Eric Bottard\"},\"name\":\"Eric Bottard\"}],\"title\":\"Beyond Kubernetes - Managing Applications and Functions with Knative, riff, and Spring Cloud Functions\",\"lang\":\"en\",\"summary\":\"From function source code to running in Kubernetes in 5 minutes. That's the power some of the latest open source projects can bring to your fingertips. This perceived simplicity actually hides layers of abstractions underneath. In this deep dive, we'll explore all the technology behind the scenes, from Kubernetes, Istio, Knative, to riff and Spring Cloud function.\\r\\n\\r\\nWe'll explore how Istio and Knative extend Kubernetes via Custom Resource Definitions to provide support for higher level developer concerns such as microservices autoscaling, routing across revisions of an application, and a unified eventing bus to compose event-driven workloads. Building on top of this, we'll take a look at how riff has been replatformed to run on top of Knative, while preserving its scale-on-demand Function as a Service ease of use. Finally, to tie the platform from top to bottom, we'll dive into Spring Cloud Function to see how to use Function interface to create a function that can process both synchronous HTTP requests as well as event-based messages using riff and Knative.\"},\"fromTime\":\"13:30\",\"toTimeMillis\":1542036600000,\"toTime\":\"16:30\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"uni_Room5_monday_12_13h30_16h30\",\"day\":\"monday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542037500000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Tools-in-Action\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>With great distribution comes also great responsibility. The usage of multiple (micro-)services increases the risk of losing the overview of traceability of errors and lagging performance. A well-setup ELK stack comes in handy to keep more specific track of issues occurring to your services.</p>\\n<p>But what if we want to find a specific trace concerning several services and want to know the performance of each service? With the help of Sleuth and Zipkin, we have some helpful instrumentation tools which can provide a helping hand in tracing down slow performance issues.\\nIn this session, we will explore how we can setup Sleuth into your Spring Boot services and use it into your logging monitoring to add some extra overview in your services. Next, we will use Zipkin to find the culprit which is slowing down our services.</p>\\n<p>Further, we will find out where we can add extra settings in our setup, to improve the combination of logging &amp; monitoring even more and make it even possibly useful for complex integration tests.\\nAfter this session you will know how to use Sleuth and Zipkin to enhance your insights in the performance of your services.</p>\\n\",\"id\":\"UVN-2568\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/3ec19fb70764bdafcd26de67c65b633be189cda5\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Rafaëla Breed\"},\"name\":\"Rafaëla Breed\"}],\"title\":\"Tracing performance of your service calls with some help of Sleuth, Zipkin & ELK\",\"lang\":\"en\",\"summary\":\"With great distribution comes also great responsibility. The usage of multiple (micro-)services increases the risk of losing the overview of traceability of errors and lagging performance. A well-setup ELK stack comes in handy to keep more specific track of issues occurring to your services.\\r\\n\\r\\nBut what if we want to find a specific trace concerning several services and want to know the performance of each service? With the help of Sleuth and Zipkin, we have some helpful instrumentation tools which can provide a helping hand in tracing down slow performance issues.\\r\\nIn this session, we will explore how we can setup Sleuth into your Spring Boot services and use it into your logging monitoring to add some extra overview in your services. Next, we will use Zipkin to find the culprit which is slowing down our services.\\r\\n\\r\\nFurther, we will find out where we can add extra settings in our setup, to improve the combination of logging & monitoring even more and make it even possibly useful for complex integration tests.\\r\\nAfter this session you will know how to use Sleuth and Zipkin to enhance your insights in the performance of your services.\"},\"fromTime\":\"16:45\",\"toTimeMillis\":1542039300000,\"toTime\":\"17:15\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"tia_Room5_monday_12_16h45_17h15\",\"day\":\"monday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542040200000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Cloud, Containers & Infrastructure\",\"talkType\":\"Tools-in-Action\",\"track\":\"Cloud, Containers & Infrastructure.label\",\"audienceLevel\":\"l1\",\"summaryAsHtml\":\"<p>Server-less architectures where as a developer you deploy functions that are fully managed by the Cloud environment and are executed in ephemeral processes require a unique approach.</p>\\n<p>Traditional frameworks like Grails and Spring are not really suitable since low memory consumption and fast startup time are critical and the Function as a Service (FaaS) server will typically spin up your function for a period using a cold start and then keep it warm.</p>\\n<p>This session introduces Micronaut’s compile-time approach: fast startup time and low-memory footprint which make it a great candidate for using as a framework for developing functions. In fact, Micronaut features dedicated support for developing and deploying functions to AWS Lambda and any FaaS system that supports running functions as containers (such as OpenFaaS, Rift, or Fn).</p>\\n\",\"id\":\"RYF-0932\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/1421cdc6da2d62b6476748ede71009cfaec49bcf\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Alvaro Sanchez-Mariscal\"},\"name\":\"Alvaro Sanchez-Mariscal\"}],\"title\":\"Server-less functions with Micronaut\",\"lang\":\"en\",\"summary\":\"Server-less architectures where as a developer you deploy functions that are fully managed by the Cloud environment and are executed in ephemeral processes require a unique approach.\\r\\n\\r\\nTraditional frameworks like Grails and Spring are not really suitable since low memory consumption and fast startup time are critical and the Function as a Service (FaaS) server will typically spin up your function for a period using a cold start and then keep it warm.\\r\\n\\r\\nThis session introduces Micronaut’s compile-time approach: fast startup time and low-memory footprint which make it a great candidate for using as a framework for developing functions. In fact, Micronaut features dedicated support for developing and deploying functions to AWS Lambda and any FaaS system that supports running functions as containers (such as OpenFaaS, Rift, or Fn).\\r\\n\"},\"fromTime\":\"17:30\",\"toTimeMillis\":1542042000000,\"toTime\":\"18:00\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"tia_Room5_monday_12_17h30_18h0\",\"day\":\"monday\"},{\"roomId\":\"Room5\",\"notAllocated\":false,\"fromTimeMillis\":1542042900000,\"break\":null,\"roomSetup\":\"classroom\",\"talk\":{\"trackId\":\"Java Language\",\"talkType\":\"Tools-in-Action\",\"track\":\"Java Language.label\",\"audienceLevel\":\"l3\",\"summaryAsHtml\":\"<p>Memory leaks are not always simple or easy to find. Heap dumps from production systems are often gigantic (4+ gigs) with millions of objects in memory. Simple spot checking with traditional tools is woefully inadequate in these situations, especially with real data. Leaks can be entire object graphs with enormous amounts of noise. This session will show you how to build custom tools using the Apache NetBeans Profiler/Heapwalker APIs. Using these APIs, you can read and analyze Java heaps programmatically to ask really hard questions. This gives you the power to analyze complex object graphs with tens of thousands of objects in seconds.</p>\\n\",\"id\":\"GVB-7806\",\"speakers\":[{\"link\":{\"href\":\"http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/ebc71affcab6b0cd8096485dcc252d04ee9b237e\",\"rel\":\"http://dvbe18.confinabox.com/api/profile/speaker\",\"title\":\"Ryan Cuprak\"},\"name\":\"Ryan Cuprak\"}],\"title\":\"Exploring Java Heap Dumps\",\"lang\":\"en\",\"summary\":\"Memory leaks are not always simple or easy to find. Heap dumps from production systems are often gigantic (4+ gigs) with millions of objects in memory. Simple spot checking with traditional tools is woefully inadequate in these situations, especially with real data. Leaks can be entire object graphs with enormous amounts of noise. This session will show you how to build custom tools using the Apache NetBeans Profiler/Heapwalker APIs. Using these APIs, you can read and analyze Java heaps programmatically to ask really hard questions. This gives you the power to analyze complex object graphs with tens of thousands of objects in seconds. \"},\"fromTime\":\"18:15\",\"toTimeMillis\":1542044700000,\"toTime\":\"18:45\",\"roomCapacity\":649,\"roomName\":\"Room 5\",\"slotId\":\"tia_Room5_monday_12_18h15_18h45\",\"day\":\"monday\"}]}",
    "headers" : {
      "Content-Type" : "application/json; charset=utf-8",
      "Etag" : "v2-79145626-1498252496",
      "Links" : "<http://dvbe18.confinabox.com/api/profile/schedule>; rel=\"profile\"",
      "Vary" : "Accept-Encoding",
      "X-No-Access" : "no-origin",
      "Date" : "Wed, 15 May 2019 10:17:25 GMT"
    }
  },
  "uuid" : "dfa32162-6eef-42db-9b8d-7dc6ac8b8aa3",
  "persistent" : true,
  "insertionIndex" : 34
}