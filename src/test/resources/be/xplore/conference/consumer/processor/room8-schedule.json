{
    "slots": [
        {
            "roomId": "Room8",
            "notAllocated": false,
            "fromTimeMillis": 1542011400000,
            "break": null,
            "roomSetup": "classroom",
            "talk": {
                "trackId": "Java Language",
                "talkType": "Deep Dive",
                "track": "Java Language.label",
                "audienceLevel": "l1",
                "summaryAsHtml": "<p>What is the state of lambda expressions in Java 11? Lambda expressions are the major feature of Java 8, having an impact on most of the API, including the Streams and Collections API. We are now living the Java 11 days; new features have been added and new patterns have emerged. This highly technical Deep Dive session will visit all these patterns, the well-known ones and the new ones, in an interactive hybrid of lecture and laboratory. We present a technique and show how it helps solve a problem. We then present another problem, and give you some time to solve it yourself. Finally, we present a solution, and open for questions, comments, and discussion. Bring your laptop set up with JDK 11 and your favorite IDE, and be prepared to think!</p>\n<p>This session is part 1 of 2 parts. In part 1 we will cover lambdas, functional interfaces, default methods, higher-order functions, and comparators.</p>\n",
                "id": "CFL-7665",
                "speakers": [
                    {
                        "link": {
                            "href": "http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/e14ef4212ffd330e97f9a0ff3420fc27714d4b0d",
                            "rel": "http://dvbe18.confinabox.com/api/profile/speaker",
                            "title": "José Paumard"
                        },
                        "name": "José Paumard"
                    },
                    {
                        "link": {
                            "href": "http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/a733dc53923e5acd86780590978c563ce1e2582e",
                            "rel": "http://dvbe18.confinabox.com/api/profile/speaker",
                            "title": "Stuart Marks"
                        },
                        "name": "Stuart Marks"
                    }
                ],
                "title": "Lambdas and Streams Master Class Part 1",
                "lang": "en",
                "summary": "What is the state of lambda expressions in Java 11? Lambda expressions are the major feature of Java 8, having an impact on most of the API, including the Streams and Collections API. We are now living the Java 11 days; new features have been added and new patterns have emerged. This highly technical Deep Dive session will visit all these patterns, the well-known ones and the new ones, in an interactive hybrid of lecture and laboratory. We present a technique and show how it helps solve a problem. We then present another problem, and give you some time to solve it yourself. Finally, we present a solution, and open for questions, comments, and discussion. Bring your laptop set up with JDK 11 and your favorite IDE, and be prepared to think!\r\n\r\nThis session is part 1 of 2 parts. In part 1 we will cover lambdas, functional interfaces, default methods, higher-order functions, and comparators."
            },
            "fromTime": "09:30",
            "toTimeMillis": 1542022200000,
            "toTime": "12:30",
            "roomCapacity": 694,
            "roomName": "Room 8",
            "slotId": "uni_Room8_monday_12_9h30_12h30",
            "day": "monday"
        },
        {
            "roomId": "Room8",
            "notAllocated": false,
            "fromTimeMillis": 1542025800000,
            "break": null,
            "roomSetup": "classroom",
            "talk": {
                "trackId": "Java Language",
                "talkType": "Deep Dive",
                "track": "Java Language.label",
                "audienceLevel": "l1",
                "summaryAsHtml": "<p>Java 8 introduced Streams and Java 9 now has Reactive API. Which one should we choose, when should we choose them, why, and how to use one vs. the other. This session will answer all those questions, by diving deep into the APIs using live code examples.</p>\n",
                "id": "HJU-1325",
                "speakers": [
                    {
                        "link": {
                            "href": "http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/af8a385bb3e6caef5337c94d51e0999994e120e5",
                            "rel": "http://dvbe18.confinabox.com/api/profile/speaker",
                            "title": "Venkat Subramaniam"
                        },
                        "name": "Venkat Subramaniam"
                    }
                ],
                "title": "Java Streams vs. Reactive Streams: Which, When, How, and Why?",
                "lang": "en",
                "summary": "Java 8 introduced Streams and Java 9 now has Reactive API. Which one should we choose, when should we choose them, why, and how to use one vs. the other. This session will answer all those questions, by diving deep into the APIs using live code examples."
            },
            "fromTime": "13:30",
            "toTimeMillis": 1542036600000,
            "toTime": "16:30",
            "roomCapacity": 694,
            "roomName": "Room 8",
            "slotId": "uni_Room8_monday_12_13h30_16h30",
            "day": "monday"
        },
        {
            "roomId": "Room8",
            "notAllocated": false,
            "fromTimeMillis": 1542037500000,
            "break": null,
            "roomSetup": "classroom",
            "talk": {
                "trackId": "Java Language",
                "talkType": "Tools-in-Action",
                "track": "Java Language.label",
                "audienceLevel": "l2",
                "summaryAsHtml": "<p>Exception handling in Java is often considered cumbersome and not very aesthetically appealing. In this session, we'll have a look at how functional languages deal with error handling and how we can adapt those approaches in the world of Java with Vavr.</p>\n<p>Simply put, we'll see how can we avoid “throws” by using Optional, Try, Either and by leveraging type-driven-development in general.</p>\n",
                "id": "WDP-2014",
                "speakers": [
                    {
                        "link": {
                            "href": "http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/ff0eb37df830d5236a41d278f7d71c98461d775f",
                            "rel": "http://dvbe18.confinabox.com/api/profile/speaker",
                            "title": "Grzegorz Piwowarek"
                        },
                        "name": "Grzegorz Piwowarek"
                    }
                ],
                "title": "Functional Exception Handling in Java with Vavr",
                "lang": "en",
                "summary": "Exception handling in Java is often considered cumbersome and not very aesthetically appealing. In this session, we'll have a look at how functional languages deal with error handling and how we can adapt those approaches in the world of Java with Vavr.\r\n\r\nSimply put, we'll see how can we avoid “throws” by using Optional, Try, Either and by leveraging type-driven-development in general.\r\n"
            },
            "fromTime": "16:45",
            "toTimeMillis": 1542039300000,
            "toTime": "17:15",
            "roomCapacity": 694,
            "roomName": "Room 8",
            "slotId": "tia_Room8_monday_12_16h45_17h15",
            "day": "monday"
        },
        {
            "roomId": "Room8",
            "notAllocated": false,
            "fromTimeMillis": 1542040200000,
            "break": null,
            "roomSetup": "classroom",
            "talk": {
                "trackId": "Programming languages",
                "talkType": "Tools-in-Action",
                "track": "Programming languages.label",
                "audienceLevel": "l1",
                "summaryAsHtml": "<p>Your brain is a ruthless despot. It just doesn’t want to let your ideas and thoughts out. But it has a weak spot. It’s susceptible to brain hacks. Let’s set your ingenuity free by coercing your brain to cast the creative flood gates wide open.</p>\n<p>I’m back to share with you a dozen hacks I use to get my brain to write fluently. Centered around the AsciiDoc markup language, we’ll explore tricks such as starting with the action, zen writing mode, the WORKLOG, the content fly trap, communicating with links, collaborative editing, and more!</p>\n<p>These tricks you play on your brain helps keeps you in writing flow and the cursor racing across the screen. After attending this session, the blank page will be your oyster instead of your nemesis.</p>\n",
                "id": "EJC-1239",
                "speakers": [
                    {
                        "link": {
                            "href": "http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/8551616e8ea37d9a0c962b022afc9f6b377790f6",
                            "rel": "http://dvbe18.confinabox.com/api/profile/speaker",
                            "title": "Dan Allen"
                        },
                        "name": "Dan Allen"
                    }
                ],
                "title": "A Dozen Ways to Hack Your Brain to Write Fluently",
                "lang": "en",
                "summary": "Your brain is a ruthless despot. It just doesn’t want to let your ideas and thoughts out. But it has a weak spot. It’s susceptible to brain hacks. Let’s set your ingenuity free by coercing your brain to cast the creative flood gates wide open.\r\n\r\nI’m back to share with you a dozen hacks I use to get my brain to write fluently. Centered around the AsciiDoc markup language, we’ll explore tricks such as starting with the action, zen writing mode, the WORKLOG, the content fly trap, communicating with links, collaborative editing, and more!\r\n\r\nThese tricks you play on your brain helps keeps you in writing flow and the cursor racing across the screen. After attending this session, the blank page will be your oyster instead of your nemesis."
            },
            "fromTime": "17:30",
            "toTimeMillis": 1542042000000,
            "toTime": "18:00",
            "roomCapacity": 694,
            "roomName": "Room 8",
            "slotId": "tia_Room8_monday_12_17h30_18h0",
            "day": "monday"
        },
        {
            "roomId": "Room8",
            "notAllocated": false,
            "fromTimeMillis": 1542042900000,
            "break": null,
            "roomSetup": "classroom",
            "talk": {
                "trackId": "Methodology & Culture",
                "talkType": "Tools-in-Action",
                "track": "Methodology & Culture.label",
                "audienceLevel": "l2",
                "summaryAsHtml": "<p>Is functional programming useful or just a hype? Why should I even care? What good is it to me? Used correctly, functional programming concepts make code easier to read, understand and change. Used incorrectly, they will make a mess of your code. Let’s use them correctly, shall we?</p>\n<p>For a while now, functional programming has been a hot topic in the Java community - though for many people it means stuff like “use Streams” and “write X as a lambda”. Functional programming is however so much more. In this session I’ll discuss some of the main concepts from functional programming that are relevant for Java developers. I’ll talk about when you want to use it - and when you probably don’t. Then I’ll show you ways to create useful functional code using a both core Java and a few helpful libraries.</p>\n",
                "id": "EHE-0587",
                "speakers": [
                    {
                        "link": {
                            "href": "http://dvbe18.confinabox.com/api/conferences/dvbe18/speakers/5d72df99a9534dc88b752508970034f37b476ade",
                            "rel": "http://dvbe18.confinabox.com/api/profile/speaker",
                            "title": "Alasdair Collinson"
                        },
                        "name": "Alasdair Collinson"
                    }
                ],
                "title": "Functional Programming in Java - When, Why and How?",
                "lang": "en",
                "summary": "Is functional programming useful or just a hype? Why should I even care? What good is it to me? Used correctly, functional programming concepts make code easier to read, understand and change. Used incorrectly, they will make a mess of your code. Let’s use them correctly, shall we?\r\n\r\nFor a while now, functional programming has been a hot topic in the Java community - though for many people it means stuff like “use Streams” and “write X as a lambda”. Functional programming is however so much more. In this session I’ll discuss some of the main concepts from functional programming that are relevant for Java developers. I’ll talk about when you want to use it - and when you probably don’t. Then I’ll show you ways to create useful functional code using a both core Java and a few helpful libraries."
            },
            "fromTime": "18:15",
            "toTimeMillis": 1542044700000,
            "toTime": "18:45",
            "roomCapacity": 694,
            "roomName": "Room 8",
            "slotId": "tia_Room8_monday_12_18h15_18h45",
            "day": "monday"
        }
    ]
}
